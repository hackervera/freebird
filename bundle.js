/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redux = __webpack_require__(1);
	
	__webpack_require__(16);
	
	var React = __webpack_require__(20);
	var sdk = __webpack_require__(175);
	var TweetContainer = __webpack_require__(177);
	var Conversation = __webpack_require__(229);
	var Scene = __webpack_require__(230);
	var friends;
	var room;
	var tweets = [];
	
	function tweetFunc(state, action) {
	  if (state === undefined) state = {};
	
	  switch (action.type) {
	    case 'UPDATE':
	      state[action.key] = action.value;
	      return state;
	    default:
	      return state;
	  }
	}
	var store = (0, _redux.createStore)(tweetFunc);
	store.subscribe(function () {
	  return console.log(store.getState());
	});
	window.store = store;
	window.rawSdk = __webpack_require__(181);
	window.client = rawSdk.createClient({ baseUrl: "https://matrix.org" });
	window.bcrypt = __webpack_require__(231);
	// window.delete_rooms = function(){
	//   var counter = 0;
	//   setInterval(function(){
	//     client.leave(client.getRooms()[counter].roomId);
	//     counter += 1;
	//   }, 2000)
	// }
	
	window.matrixChat = React.render(React.createElement(TweetContainer, { store: store, display: "block" }), document.getElementById('matrixchat'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;
	
	var _createStore = __webpack_require__(3);
	
	var _createStore2 = _interopRequireDefault(_createStore);
	
	var _combineReducers = __webpack_require__(11);
	
	var _combineReducers2 = _interopRequireDefault(_combineReducers);
	
	var _bindActionCreators = __webpack_require__(13);
	
	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);
	
	var _applyMiddleware = __webpack_require__(14);
	
	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);
	
	var _compose = __webpack_require__(15);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	var _warning = __webpack_require__(12);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}
	
	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}
	
	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;
	
	var _isPlainObject = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"lodash/isPlainObject\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _symbolObservable = __webpack_require__(8);
	
	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};
	
	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;
	
	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }
	
	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }
	
	    return enhancer(createStore)(reducer, preloadedState);
	  }
	
	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }
	
	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	
	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }
	
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }
	
	    var isSubscribed = true;
	
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }
	
	      isSubscribed = false;
	
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }
	
	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }
	
	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }
	
	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }
	
	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }
	
	    return action;
	  }
	
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }
	
	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }
	
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/zenparsing/es-observable
	   */
	  function observable() {
	    var _ref;
	
	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }
	
	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }
	
	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }
	
	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });
	
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ },
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(9);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _ponyfill = __webpack_require__(10);
	
	var _ponyfill2 = _interopRequireDefault(_ponyfill);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var root = module; /* global window */
	
	
	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else {
	  root = Function('return this')();
	}
	
	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204)(module), (function() { return this; }())))

/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;
	
		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}
	
		return result;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports['default'] = combineReducers;
	
	var _createStore = __webpack_require__(3);
	
	var _isPlainObject = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"lodash/isPlainObject\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _warning = __webpack_require__(12);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
	
	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
	}
	
	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
	
	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }
	
	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }
	
	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	
	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}
	
	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });
	
	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }
	
	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}
	
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }
	
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var unexpectedKeyCache = {};
	  }
	
	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }
	
	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];
	
	    if (sanityError) {
	      throw sanityError;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }
	
	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}
	
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }
	
	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }
	
	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports['default'] = applyMiddleware;
	
	var _compose = __webpack_require__(15);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }
	
	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];
	
	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);
	
	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }
	
	  if (funcs.length === 1) {
	    return funcs[0];
	  }
	
	  var last = funcs[funcs.length - 1];
	  var rest = funcs.slice(0, -1);
	  return function () {
	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(17);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(19)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./index.scss", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./index.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(18)();
	// imports
	
	
	// module
	exports.push([module.id, ".tweet {\n  border-style: solid;\n  margin: 5px;\n  min-width: 500px;\n  min-height: 200px;\n  padding-left: 20px;\n  max-width: 500px;\n  float: left; }\n  .tweet img {\n    max-width: 50px;\n    vertical-align: middle;\n    padding-right: 20px; }\n\n.reply {\n  float: right;\n  padding-right: 20px; }\n  .reply a {\n    cursor: pointer;\n    color: cadetblue; }\n\n.new-tweet {\n  border-style: solid; }\n", ""]);
	
	// exports


/***/ },
/* 18 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(21);


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var EventPluginUtils = __webpack_require__(22);
	var ReactChildren = __webpack_require__(26);
	var ReactComponent = __webpack_require__(40);
	var ReactClass = __webpack_require__(55);
	var ReactContext = __webpack_require__(30);
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactElement = __webpack_require__(29);
	var ReactElementValidator = __webpack_require__(50);
	var ReactDOM = __webpack_require__(58);
	var ReactDOMTextComponent = __webpack_require__(60);
	var ReactDefaultInjection = __webpack_require__(109);
	var ReactInstanceHandles = __webpack_require__(37);
	var ReactMount = __webpack_require__(85);
	var ReactPerf = __webpack_require__(46);
	var ReactPropTypes = __webpack_require__(140);
	var ReactReconciler = __webpack_require__(47);
	var ReactServerRendering = __webpack_require__(172);
	
	var assign = __webpack_require__(31);
	var findDOMNode = __webpack_require__(129);
	var onlyChild = __webpack_require__(174);
	
	ReactDefaultInjection.inject();
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}
	
	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(69);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }
	
	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,
	
	      // shams
	      Object.create,
	      Object.freeze
	    ];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}
	
	React.version = '0.13.3';
	
	module.exports = React;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}
	
	
	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}
	
	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}
	
	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};
	
	module.exports = EventPluginUtils;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(24);
	
	var PropagationPhases = keyMirror({bubbled: null, captured: null});
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	"use strict";
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(27);
	var ReactFragment = __webpack_require__(28);
	
	var traverseAllChildren = __webpack_require__(36);
	var warning = __webpack_require__(33);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	
	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);
	
	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;
	
	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	
	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	
	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}
	
	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};
	
	module.exports = ReactChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	
	var warning = __webpack_require__(33);
	
	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */
	
	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;
	
	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.
	
	    var dummy = function() {
	      return 1;
	    };
	
	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );
	
	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );
	
	    canWarnForReactFragment = true;
	  } catch (x) { }
	
	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };
	
	  var issuedWarnings = {};
	
	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}
	
	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};
	
	module.exports = ReactFragment;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	'use strict';
	
	var ReactContext = __webpack_require__(30);
	var ReactCurrentOwner = __webpack_require__(35);
	
	var assign = __webpack_require__(31);
	var warning = __webpack_require__(33);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};
	
	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {
	
	    configurable: false,
	    enumerable: true,
	
	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },
	
	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }
	
	  });
	}
	
	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;
	
	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;
	
	  // Record the component responsible for creating this element.
	  this._owner = owner;
	
	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;
	
	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;
	
	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }
	
	  this.props = props;
	};
	
	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};
	
	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}
	
	ReactElement.createElement = function(type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};
	
	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );
	
	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};
	
	ReactElement.cloneElement = function(element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};
	
	module.exports = ReactElement;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */
	
	'use strict';
	
	var assign = __webpack_require__(31);
	var emptyObject = __webpack_require__(32);
	var warning = __webpack_require__(33);
	
	var didWarn = false;
	
	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {
	
	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,
	
	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);
	
	      didWarn = true;
	    }
	
	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }
	
	};
	
	module.exports = ReactContext;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 31 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	'use strict';
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	}
	
	module.exports = assign;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	"use strict";
	
	var emptyObject = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	"use strict";
	
	var emptyFunction = __webpack_require__(34);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}
	
	module.exports = warning;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 34 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };
	
	module.exports = emptyFunction;


/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	var ReactFragment = __webpack_require__(28);
	var ReactInstanceHandles = __webpack_require__(37);
	
	var getIteratorFn = __webpack_require__(39);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(33);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	var didWarnAboutMaps = false;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }
	
	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactRootIndex = __webpack_require__(38);
	
	var invariant = __webpack_require__(25);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;


/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	'use strict';
	
	var ReactUpdateQueue = __webpack_require__(41);
	
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(33);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
	
	'use strict';
	
	var ReactLifeCycle = __webpack_require__(42);
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactElement = __webpack_require__(29);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactUpdates = __webpack_require__(44);
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(33);
	
	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));
	
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }
	
	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );
	
	    if (!internalInstance) {
	      return;
	    }
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );
	
	    if (!internalInstance) {
	      return;
	    }
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 42 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */
	
	'use strict';
	
	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */
	
	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};
	
	module.exports = ReactLifeCycle;


/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function(key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(45);
	var PooledClass = __webpack_require__(27);
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactPerf = __webpack_require__(46);
	var ReactReconciler = __webpack_require__(47);
	var Transaction = __webpack_require__(54);
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(33);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}
	
	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}
	
	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(27);
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(48);
	var ReactElementValidator = __webpack_require__(50);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }
	
	};
	
	module.exports = ReactReconciler;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(49);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};
	
	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	var ReactFragment = __webpack_require__(28);
	var ReactPropTypeLocations = __webpack_require__(51);
	var ReactPropTypeLocationNames = __webpack_require__(52);
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactNativeComponent = __webpack_require__(53);
	
	var getIteratorFn = __webpack_require__(39);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(33);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	var loggedTypeFailures = {};
	
	var NUMERIC_PROPERTY_REGEX = /^\d+$/;
	
	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}
	
	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}
	
	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;
	
	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;
	
	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);
	
	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }
	
	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}
	
	var warnedPropsMutations = {};
	
	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;
	
	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;
	
	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }
	
	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}
	
	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}
	
	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }
	
	  var originalProps = element._store.originalProps;
	  var props = element.props;
	
	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);
	
	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}
	
	var ReactElementValidator = {
	
	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,
	
	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }
	
	
	    return validatedFactory;
	  },
	
	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(24);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	'use strict';
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	
	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};
	
	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}
	
	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
	
	'use strict';
	
	var ReactComponent = __webpack_require__(40);
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactElement = __webpack_require__(29);
	var ReactErrorUtils = __webpack_require__(56);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactLifeCycle = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(51);
	var ReactPropTypeLocationNames = __webpack_require__(52);
	var ReactUpdateQueue = __webpack_require__(41);
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	var keyMirror = __webpack_require__(24);
	var keyOf = __webpack_require__(57);
	var warning = __webpack_require__(33);
	
	var MIXINS_KEY = keyOf({mixins: null});
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));
	
	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}
	
	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};
	
	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));
	
	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));
	
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	"use strict";
	
	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};
	
	module.exports = ReactErrorUtils;


/***/ },
/* 57 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	
	module.exports = keyOf;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	var ReactElementValidator = __webpack_require__(50);
	
	var mapObject = __webpack_require__(59);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOM;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMPropertyOperations = __webpack_require__(61);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(65);
	var ReactDOMComponent = __webpack_require__(105);
	
	var assign = __webpack_require__(31);
	var escapeTextContentForBrowser = __webpack_require__(64);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};
	
	assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;
	
	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);
	
	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }
	
	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },
	
	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(62);
	
	var quoteAttributeValueForBrowser = __webpack_require__(63);
	var warning = __webpack_require__(33);
	
	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}
	
	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);
	
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	/*jslint bitwise: true */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }
	
	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));
	
	      DOMProperty.isStandardName[propName] = true;
	
	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }
	
	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }
	
	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);
	
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},
	
	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},
	
	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},
	
	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},
	
	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},
	
	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},
	
	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},
	
	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},
	
	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},
	
	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},
	
	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(64);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 64 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
	
	'use strict';
	
	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextContentForBrowser;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	/*jslint evil: true */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(66);
	var ReactMount = __webpack_require__(85);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	/*jslint evil: true */
	
	'use strict';
	
	var CSSPropertyOperations = __webpack_require__(67);
	var DOMChildrenOperations = __webpack_require__(76);
	var DOMPropertyOperations = __webpack_require__(61);
	var ReactMount = __webpack_require__(85);
	var ReactPerf = __webpack_require__(46);
	
	var invariant = __webpack_require__(25);
	var setInnerHTML = __webpack_require__(84);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	
	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },
	
	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },
	
	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },
	
	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },
	
	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};
	
	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});
	
	module.exports = ReactDOMIDOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(68);
	var ExecutionEnvironment = __webpack_require__(69);
	
	var camelizeStyleName = __webpack_require__(70);
	var dangerousStyleValue = __webpack_require__(72);
	var hyphenateStyleName = __webpack_require__(73);
	var memoizeStringOnly = __webpack_require__(75);
	var warning = __webpack_require__(33);
	
	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	
	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };
	
	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };
	
	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 68 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;


/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	"use strict";
	
	var camelize = __webpack_require__(71);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;


/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(68);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	"use strict";
	
	var hyphenate = __webpack_require__(74);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;


/***/ },
/* 74 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;


/***/ },
/* 75 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var Danger = __webpack_require__(77);
	var ReactMultiChildUpdateTypes = __webpack_require__(82);
	
	var setTextContent = __webpack_require__(83);
	var invariant = __webpack_require__(25);
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: setTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	/*jslint evil: true, sub: true */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var createNodesFromMarkup = __webpack_require__(78);
	var emptyFunction = __webpack_require__(34);
	var getMarkupWrap = __webpack_require__(81);
	var invariant = __webpack_require__(25);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	
	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));
	
	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*jslint evil: true, sub: true */
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var createArrayFromMixed = __webpack_require__(79);
	var getMarkupWrap = __webpack_require__(81);
	var invariant = __webpack_require__(25);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */
	
	var toArray = __webpack_require__(80);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg>', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap,
	
	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	
	module.exports = getMarkupWrap;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(24);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(69);
	var escapeTextContentForBrowser = __webpack_require__(64);
	var setInnerHTML = __webpack_require__(84);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};
	
	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(62);
	var ReactBrowserEventEmitter = __webpack_require__(86);
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactElement = __webpack_require__(29);
	var ReactElementValidator = __webpack_require__(50);
	var ReactEmptyComponent = __webpack_require__(94);
	var ReactInstanceHandles = __webpack_require__(37);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactMarkupChecksum = __webpack_require__(95);
	var ReactPerf = __webpack_require__(46);
	var ReactReconciler = __webpack_require__(47);
	var ReactUpdateQueue = __webpack_require__(41);
	var ReactUpdates = __webpack_require__(44);
	
	var emptyObject = __webpack_require__(32);
	var containsNode = __webpack_require__(97);
	var getReactRootElementInContainer = __webpack_require__(100);
	var instantiateReactComponent = __webpack_require__(101);
	var invariant = __webpack_require__(25);
	var setInnerHTML = __webpack_require__(84);
	var shouldUpdateReactComponent = __webpack_require__(104);
	var warning = __webpack_require__(33);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }
	
	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);
	
	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );
	
	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);
	
	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }
	
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;
	
	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },
	
	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);
	
	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }
	
	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));
	
	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },
	
	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );
	
	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));
	
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));
	
	    setInnerHTML(container, markup);
	  },
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  getNodeFromInstance: getNodeFromInstance,
	
	  purgeID: purgeID
	};
	
	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});
	
	module.exports = ReactMount;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(87);
	var EventPluginRegistry = __webpack_require__(88);
	var ReactEventEmitterMixin = __webpack_require__(91);
	var ViewportMetrics = __webpack_require__(92);
	
	var assign = __webpack_require__(31);
	var isEventSupported = __webpack_require__(93);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },
	
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	'use strict';
	
	var EventPluginRegistry = __webpack_require__(88);
	var EventPluginUtils = __webpack_require__(22);
	
	var accumulateInto = __webpack_require__(89);
	var forEachAccumulated = __webpack_require__(90);
	var invariant = __webpack_require__(25);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));
	
	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function() {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 90 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	'use strict';
	
	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(87);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );
	
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;


/***/ },
/* 92 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	var ReactInstanceMap = __webpack_require__(43);
	
	var invariant = __webpack_require__(25);
	
	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};
	
	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};
	
	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}
	
	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};
	
	module.exports = ReactEmptyComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(96);
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;


/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	/* jslint bitwise:true */
	
	'use strict';
	
	var MOD = 65521;
	
	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}
	
	module.exports = adler32;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	var isTextNode = __webpack_require__(98);
	
	/*jslint bitwise:true */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(99);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;


/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}
	
	module.exports = isNode;


/***/ },
/* 100 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */
	
	'use strict';
	
	var DOC_NODE_TYPE = 9;
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	module.exports = getReactRootElementInContainer;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCompositeComponent = __webpack_require__(102);
	var ReactEmptyComponent = __webpack_require__(94);
	var ReactNativeComponent = __webpack_require__(53);
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(33);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;
	
	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }
	
	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }
	
	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }
	
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }
	
	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(103);
	var ReactContext = __webpack_require__(30);
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactElement = __webpack_require__(29);
	var ReactElementValidator = __webpack_require__(50);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactLifeCycle = __webpack_require__(42);
	var ReactNativeComponent = __webpack_require__(53);
	var ReactPerf = __webpack_require__(46);
	var ReactPropTypeLocations = __webpack_require__(51);
	var ReactPropTypeLocationNames = __webpack_require__(52);
	var ReactReconciler = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(44);
	
	var assign = __webpack_require__(31);
	var emptyObject = __webpack_require__(32);
	var invariant = __webpack_require__(25);
	var shouldUpdateReactComponent = __webpack_require__(104);
	var warning = __webpack_require__(33);
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	
	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedComponent = null;
	
	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;
	
	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);
	
	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );
	
	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);
	
	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var childContext;
	    var renderedElement;
	
	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }
	
	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }
	
	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );
	
	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }
	
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }
	
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	
	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },
	
	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	
	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },
	
	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }
	
	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }
	
	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },
	
	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;
	
	    var nextContext = inst.context;
	    var nextProps = inst.props;
	
	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);
	
	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }
	
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.
	
	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	
	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;
	
	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;
	
	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);
	
	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }
	
	    return renderedComponent;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);
	
	var ReactCompositeComponent = {
	
	  Mixin: ReactCompositeComponentMixin
	
	};
	
	module.exports = ReactCompositeComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(25);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var warning = __webpack_require__(33);
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var CSSPropertyOperations = __webpack_require__(67);
	var DOMProperty = __webpack_require__(62);
	var DOMPropertyOperations = __webpack_require__(61);
	var ReactBrowserEventEmitter = __webpack_require__(86);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(65);
	var ReactMount = __webpack_require__(85);
	var ReactMultiChild = __webpack_require__(106);
	var ReactPerf = __webpack_require__(46);
	
	var assign = __webpack_require__(31);
	var escapeTextContentForBrowser = __webpack_require__(64);
	var invariant = __webpack_require__(25);
	var isEventSupported = __webpack_require__(93);
	var keyOf = __webpack_require__(57);
	var warning = __webpack_require__(33);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};
	
	var STYLE = keyOf({style: null});
	
	var ELEMENT_NODE_TYPE = 1;
	
	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;
	
	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}
	
	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};
	
	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  construct: function(element) {
	    this._currentElement = element;
	  },
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }
	
	    var props = this._currentElement.props;
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },
	
	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;
	
	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }
	
	};
	
	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});
	
	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);
	
	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};
	
	module.exports = ReactDOMComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(103);
	var ReactMultiChildUpdateTypes = __webpack_require__(82);
	
	var ReactReconciler = __webpack_require__(47);
	var ReactChildReconciler = __webpack_require__(107);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(47);
	
	var flattenChildren = __webpack_require__(108);
	var instantiateReactComponent = __webpack_require__(101);
	var shouldUpdateReactComponent = __webpack_require__(104);
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	'use strict';
	
	var traverseAllChildren = __webpack_require__(36);
	var warning = __webpack_require__(33);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	'use strict';
	
	var BeforeInputEventPlugin = __webpack_require__(110);
	var ChangeEventPlugin = __webpack_require__(118);
	var ClientReactRootIndex = __webpack_require__(120);
	var DefaultEventPluginOrder = __webpack_require__(121);
	var EnterLeaveEventPlugin = __webpack_require__(122);
	var ExecutionEnvironment = __webpack_require__(69);
	var HTMLDOMPropertyConfig = __webpack_require__(126);
	var MobileSafariClickEventPlugin = __webpack_require__(127);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(65);
	var ReactDefaultBatchingStrategy = __webpack_require__(130);
	var ReactDOMComponent = __webpack_require__(105);
	var ReactDOMButton = __webpack_require__(131);
	var ReactDOMForm = __webpack_require__(134);
	var ReactDOMImg = __webpack_require__(136);
	var ReactDOMIDOperations = __webpack_require__(66);
	var ReactDOMIframe = __webpack_require__(137);
	var ReactDOMInput = __webpack_require__(138);
	var ReactDOMOption = __webpack_require__(141);
	var ReactDOMSelect = __webpack_require__(142);
	var ReactDOMTextarea = __webpack_require__(143);
	var ReactDOMTextComponent = __webpack_require__(60);
	var ReactElement = __webpack_require__(29);
	var ReactEventListener = __webpack_require__(144);
	var ReactInjection = __webpack_require__(147);
	var ReactInstanceHandles = __webpack_require__(37);
	var ReactMount = __webpack_require__(85);
	var ReactReconcileTransaction = __webpack_require__(148);
	var SelectEventPlugin = __webpack_require__(154);
	var ServerReactRootIndex = __webpack_require__(156);
	var SimpleEventPlugin = __webpack_require__(157);
	var SVGDOMPropertyConfig = __webpack_require__(166);
	
	var createFullPageComponent = __webpack_require__(167);
	
	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}
	
	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );
	
	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );
	
	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );
	
	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,
	
	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);
	
	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(168);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var EventPropagators = __webpack_require__(111);
	var ExecutionEnvironment = __webpack_require__(69);
	var FallbackCompositionState = __webpack_require__(112);
	var SyntheticCompositionEvent = __webpack_require__(114);
	var SyntheticInputEvent = __webpack_require__(117);
	
	var keyOf = __webpack_require__(57);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}
	
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(87);
	
	var accumulateInto = __webpack_require__(89);
	var forEachAccumulated = __webpack_require__(90);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}
	
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}
	
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(27);
	
	var assign = __webpack_require__(31);
	var getTextContentAccessor = __webpack_require__(113);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(115);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);
	
	module.exports = SyntheticCompositionEvent;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(27);
	
	var assign = __webpack_require__(31);
	var emptyFunction = __webpack_require__(34);
	var getEventTarget = __webpack_require__(116);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);
	
	module.exports = SyntheticEvent;


/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(115);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);
	
	module.exports = SyntheticInputEvent;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(87);
	var EventPropagators = __webpack_require__(111);
	var ExecutionEnvironment = __webpack_require__(69);
	var ReactUpdates = __webpack_require__(44);
	var SyntheticEvent = __webpack_require__(115);
	
	var isEventSupported = __webpack_require__(93);
	var isTextInputElement = __webpack_require__(119);
	var keyOf = __webpack_require__(57);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );
	
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}
	
	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;


/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}
	
	module.exports = isTextInputElement;


/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	'use strict';
	
	var keyOf = __webpack_require__(57);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];
	
	module.exports = DefaultEventPluginOrder;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var EventPropagators = __webpack_require__(111);
	var SyntheticMouseEvent = __webpack_require__(123);
	
	var ReactMount = __webpack_require__(85);
	var keyOf = __webpack_require__(57);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';
	
	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(124);
	var ViewportMetrics = __webpack_require__(92);
	
	var getEventModifierState = __webpack_require__(125);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(115);
	
	var getEventTarget = __webpack_require__(116);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;


/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	/*jslint bitwise: true*/
	
	'use strict';
	
	var DOMProperty = __webpack_require__(62);
	var ExecutionEnvironment = __webpack_require__(69);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}
	
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	
	var emptyFunction = __webpack_require__(34);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {
	
	  eventTypes: null,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }
	
	};
	
	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	'use strict';
	
	var findDOMNode = __webpack_require__(129);
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(35);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactMount = __webpack_require__(85);
	
	var invariant = __webpack_require__(25);
	var isNode = __webpack_require__(99);
	var warning = __webpack_require__(33);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}
	
	module.exports = findDOMNode;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	'use strict';
	
	var ReactUpdates = __webpack_require__(44);
	var Transaction = __webpack_require__(54);
	
	var assign = __webpack_require__(31);
	var emptyFunction = __webpack_require__(34);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	'use strict';
	
	var AutoFocusMixin = __webpack_require__(132);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	
	var keyMirror = __webpack_require__(24);
	
	var button = ReactElement.createFactory('button');
	
	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',
	
	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],
	
	  render: function() {
	    var props = {};
	
	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }
	
	    return button(props, this.props.children);
	  }
	
	});
	
	module.exports = ReactDOMButton;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var focusNode = __webpack_require__(133);
	
	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};
	
	module.exports = AutoFocusMixin;


/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	"use strict";
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}
	
	module.exports = focusNode;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var LocalEventTrapMixin = __webpack_require__(135);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	
	var form = ReactElement.createFactory('form');
	
	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',
	
	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],
	
	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },
	
	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});
	
	module.exports = ReactDOMForm;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */
	
	'use strict';
	
	var ReactBrowserEventEmitter = __webpack_require__(86);
	
	var accumulateInto = __webpack_require__(89);
	var forEachAccumulated = __webpack_require__(90);
	var invariant = __webpack_require__(25);
	
	function remove(event) {
	  event.remove();
	}
	
	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },
	
	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.
	
	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};
	
	module.exports = LocalEventTrapMixin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var LocalEventTrapMixin = __webpack_require__(135);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	
	var img = ReactElement.createFactory('img');
	
	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',
	
	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],
	
	  render: function() {
	    return img(this.props);
	  },
	
	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});
	
	module.exports = ReactDOMImg;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var LocalEventTrapMixin = __webpack_require__(135);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	
	var iframe = ReactElement.createFactory('iframe');
	
	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',
	
	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],
	
	  render: function() {
	    return iframe(this.props);
	  },
	
	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});
	
	module.exports = ReactDOMIframe;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	'use strict';
	
	var AutoFocusMixin = __webpack_require__(132);
	var DOMPropertyOperations = __webpack_require__(61);
	var LinkedValueUtils = __webpack_require__(139);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	var ReactMount = __webpack_require__(85);
	var ReactUpdates = __webpack_require__(44);
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	
	var input = ReactElement.createFactory('input');
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    props.defaultChecked = null;
	    props.defaultValue = null;
	
	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;
	
	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;
	
	    props.onChange = this._handleChange;
	
	    return input(props, this.props.children);
	  },
	
	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },
	
	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },
	
	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }
	
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	
	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;
	
	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }
	
	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }
	
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMInput;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactPropTypes = __webpack_require__(140);
	
	var invariant = __webpack_require__(25);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}
	
	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}
	
	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}
	
	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};
	
	module.exports = LinkedValueUtils;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	var ReactFragment = __webpack_require__(28);
	var ReactPropTypeLocationNames = __webpack_require__(52);
	
	var emptyFunction = __webpack_require__(34);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	module.exports = ReactPropTypes;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	'use strict';
	
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	
	var warning = __webpack_require__(33);
	
	var option = ReactElement.createFactory('option');
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',
	
	  mixins: [ReactBrowserComponentMixin],
	
	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },
	
	  render: function() {
	    return option(this.props, this.props.children);
	  }
	
	});
	
	module.exports = ReactDOMOption;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	'use strict';
	
	var AutoFocusMixin = __webpack_require__(132);
	var LinkedValueUtils = __webpack_require__(139);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(44);
	
	var assign = __webpack_require__(31);
	
	var select = ReactElement.createFactory('select');
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}
	
	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;
	
	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    props.onChange = this._handleChange;
	    props.value = null;
	
	    return select(props, this.props.children);
	  },
	
	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },
	
	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },
	
	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	
	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMSelect;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	'use strict';
	
	var AutoFocusMixin = __webpack_require__(132);
	var DOMPropertyOperations = __webpack_require__(61);
	var LinkedValueUtils = __webpack_require__(139);
	var ReactBrowserComponentMixin = __webpack_require__(128);
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(44);
	
	var assign = __webpack_require__(31);
	var invariant = __webpack_require__(25);
	
	var warning = __webpack_require__(33);
	
	var textarea = ReactElement.createFactory('textarea');
	
	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));
	
	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },
	
	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMTextarea;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventListener = __webpack_require__(145);
	var ExecutionEnvironment = __webpack_require__(69);
	var PooledClass = __webpack_require__(27);
	var ReactInstanceHandles = __webpack_require__(37);
	var ReactMount = __webpack_require__(85);
	var ReactUpdates = __webpack_require__(44);
	
	var assign = __webpack_require__(31);
	var getEventTarget = __webpack_require__(116);
	var getUnboundedScrollPosition = __webpack_require__(146);
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);
	
	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },
	
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },
	
	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(34);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },
	
	  registerDefault: function() {}
	};
	
	module.exports = EventListener;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	"use strict";
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(62);
	var EventPluginHub = __webpack_require__(87);
	var ReactComponentEnvironment = __webpack_require__(103);
	var ReactClass = __webpack_require__(55);
	var ReactEmptyComponent = __webpack_require__(94);
	var ReactBrowserEventEmitter = __webpack_require__(86);
	var ReactNativeComponent = __webpack_require__(53);
	var ReactDOMComponent = __webpack_require__(105);
	var ReactPerf = __webpack_require__(46);
	var ReactRootIndex = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(44);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(45);
	var PooledClass = __webpack_require__(27);
	var ReactBrowserEventEmitter = __webpack_require__(86);
	var ReactInputSelection = __webpack_require__(149);
	var ReactPutListenerQueue = __webpack_require__(153);
	var Transaction = __webpack_require__(54);
	
	var assign = __webpack_require__(31);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },
	
	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },
	
	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	
	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};
	
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(150);
	
	var containsNode = __webpack_require__(97);
	var focusNode = __webpack_require__(133);
	var getActiveElement = __webpack_require__(152);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },
	
	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || {start: 0, end: 0};
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var getNodeForCharacterOffset = __webpack_require__(151);
	var getTextContentAccessor = __webpack_require__(113);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;


/***/ },
/* 151 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;


/***/ },
/* 152 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(27);
	var ReactBrowserEventEmitter = __webpack_require__(86);
	
	var assign = __webpack_require__(31);
	
	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}
	
	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },
	
	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },
	
	  reset: function() {
	    this.listenersToPut.length = 0;
	  },
	
	  destructor: function() {
	    this.reset();
	  }
	});
	
	PooledClass.addPoolingTo(ReactPutListenerQueue);
	
	module.exports = ReactPutListenerQueue;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var EventPropagators = __webpack_require__(111);
	var ReactInputSelection = __webpack_require__(149);
	var SyntheticEvent = __webpack_require__(115);
	
	var getActiveElement = __webpack_require__(152);
	var isTextInputElement = __webpack_require__(119);
	var keyOf = __webpack_require__(57);
	var shallowEqual = __webpack_require__(155);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;


/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */
	
	'use strict';
	
	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = shallowEqual;


/***/ },
/* 156 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(23);
	var EventPluginUtils = __webpack_require__(22);
	var EventPropagators = __webpack_require__(111);
	var SyntheticClipboardEvent = __webpack_require__(158);
	var SyntheticEvent = __webpack_require__(115);
	var SyntheticFocusEvent = __webpack_require__(159);
	var SyntheticKeyboardEvent = __webpack_require__(160);
	var SyntheticMouseEvent = __webpack_require__(123);
	var SyntheticDragEvent = __webpack_require__(163);
	var SyntheticTouchEvent = __webpack_require__(164);
	var SyntheticUIEvent = __webpack_require__(124);
	var SyntheticWheelEvent = __webpack_require__(165);
	
	var getEventCharCode = __webpack_require__(161);
	
	var invariant = __webpack_require__(25);
	var keyOf = __webpack_require__(57);
	var warning = __webpack_require__(33);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};
	
	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
	
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);
	
	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(115);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(124);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(124);
	
	var getEventCharCode = __webpack_require__(161);
	var getEventKey = __webpack_require__(162);
	var getEventModifierState = __webpack_require__(125);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 161 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(161);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(123);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(124);
	
	var getEventModifierState = __webpack_require__(125);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(123);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	/*jslint bitwise: true*/
	
	'use strict';
	
	var DOMProperty = __webpack_require__(62);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */
	
	'use strict';
	
	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(55);
	var ReactElement = __webpack_require__(29);
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);
	
	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,
	
	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },
	
	    render: function() {
	      return elementFactory(this.props);
	    }
	  });
	
	  return FullPageComponent;
	}
	
	module.exports = createFullPageComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(62);
	var ReactDefaultPerfAnalysis = __webpack_require__(169);
	var ReactMount = __webpack_require__(85);
	var ReactPerf = __webpack_require__(46);
	
	var performanceNow = __webpack_require__(170);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {
	
	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }
	
	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	var assign = __webpack_require__(31);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;
	
	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	var performance = __webpack_require__(171);
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}
	
	var performanceNow = performance.now.bind(performance);
	
	module.exports = performanceNow;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(69);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}
	
	module.exports = performance || {};


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	var ReactInstanceHandles = __webpack_require__(37);
	var ReactMarkupChecksum = __webpack_require__(95);
	var ReactServerRenderingTransaction =
	  __webpack_require__(173);
	
	var emptyObject = __webpack_require__(32);
	var instantiateReactComponent = __webpack_require__(101);
	var invariant = __webpack_require__(25);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));
	
	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));
	
	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(27);
	var CallbackQueue = __webpack_require__(45);
	var ReactPutListenerQueue = __webpack_require__(153);
	var Transaction = __webpack_require__(54);
	
	var assign = __webpack_require__(31);
	var emptyFunction = __webpack_require__(34);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },
	
	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	
	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};
	
	
	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	
	var invariant = __webpack_require__(25);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}
	
	module.exports = onlyChild;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	
	'use strict';
	
	var Skinner = __webpack_require__(176);
	
	module.exports.loadSkin = function (skinObject) {
	    Skinner.load(skinObject);
	};
	
	module.exports.resetSkin = function () {
	    Skinner.reset();
	};
	
	module.exports.getComponent = function (componentName) {
	    return Skinner.getComponent(componentName);
	};


/***/ },
/* 176 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	
	"use strict";
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Skinner = (function () {
	    function Skinner() {
	        _classCallCheck(this, Skinner);
	
	        this.components = null;
	    }
	
	    // We define one Skinner globally, because the intention is
	    // very much that it is a singleton. Relying on there only being one
	    // copy of the module can be dicey and not work as browserify's
	    // behaviour with multiple copies of files etc. is erratic at best.
	    // XXX: We can still end up with the same file twice in the resulting
	    // JS bundle which is nonideal.
	
	    _createClass(Skinner, [{
	        key: "getComponent",
	        value: function getComponent(name) {
	            if (this.components === null) {
	                throw new Error("Attempted to get a component before a skin has been loaded." + "This is probably because either:" + " a) Your app has not called sdk.loadSkin(), or" + " b) A component has called getComponent at the root level");
	            }
	            var comp = this.components[name];
	            if (comp) {
	                return comp;
	            }
	            // XXX: Temporarily also try 'views.' as we're currently
	            // leaving the 'views.' off views.
	            var comp = this.components['views.' + name];
	            if (comp) {
	                return comp;
	            }
	            throw new Error("No such component: " + name);
	        }
	    }, {
	        key: "load",
	        value: function load(skinObject) {
	            if (this.components !== null) {
	                throw new Error("Attempted to load a skin while a skin is already loaded" + "If you want to change the active skin, call resetSkin first");
	            }
	            this.components = {};
	            var compKeys = Object.keys(skinObject.components);
	            for (var i = 0; i < compKeys.length; ++i) {
	                var comp = skinObject.components[compKeys[i]];
	                this.addComponent(compKeys[i], comp);
	            }
	        }
	    }, {
	        key: "addComponent",
	        value: function addComponent(name, comp) {
	            var slot = name;
	            if (comp.replaces !== undefined) {
	                if (comp.replaces.indexOf('.') > -1) {
	                    slot = comp.replaces;
	                } else {
	                    slot = name.substr(0, name.lastIndexOf('.') + 1) + comp.replaces.split('.').pop();
	                }
	            }
	            this.components[slot] = comp;
	        }
	    }, {
	        key: "reset",
	        value: function reset() {
	            this.components = null;
	        }
	    }]);
	
	    return Skinner;
	})();
	
	if (global.mxSkinner === undefined) {
	    global.mxSkinner = new Skinner();
	}
	module.exports = global.mxSkinner;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(20);
	var Tweet = __webpack_require__(178);
	var NewTweet = __webpack_require__(179);
	var Friends = __webpack_require__(180);
	var Conversation = __webpack_require__(229);
	
	var React = __webpack_require__(20);
	var sdk = __webpack_require__(175);
	var friends;
	var room;
	var tweets = [];
	
	window.rawSdk = __webpack_require__(181);
	window.client = rawSdk.createClient({ baseUrl: "https://matrix.org" });
	
	module.exports = React.createClass({
	  displayName: 'exports',
	
	  getInitialState: function getInitialState() {
	    return { tweets: [] };
	  },
	  containerDisplay: function containerDisplay() {
	    var display = this.props.display;
	    if (this.state && this.state.display) {
	      display = this.state.display;
	    }
	    return display;
	  },
	  componentDidMount: function componentDidMount() {
	    var self = this;
	    this.props.store.subscribe(function () {
	      self.setState({ display: self.props.store.getState().display });
	      self.setState({ tweet: self.props.store.getState().convoData });
	    });
	    console.log("mounted");
	    var self = this;
	    if (!localStorage["client"]) {
	      client.loginWithPassword("kodo", "kidid1th").done(function (d) {
	        client = rawSdk.createClient({ baseUrl: "https://matrix.org", accessToken: d.access_token, userId: d.user_id });
	
	        //localStorage["client"] = JSON.stringify(client);
	        window.creds = d;
	        client.on("Room.timeline", function (event, room, toStartOfTimeline) {
	          friends = client.getAccountData("cat.tyler.friends").event.content.friends;
	          if (toStartOfTimeline) {
	            return; // don't print paginated results
	          }
	          if (event.getType() !== "m.room.message") {
	            //console.log(event.event.content);
	            //console.log(event.event.type);
	
	            //console.log(event.event.content)
	            return; // only print messages
	          }
	          console.log(event.getSender());
	          if (friends.indexOf(event.getSender()) != -1) {
	            console.log(event);
	            client.getProfileInfo(event.sender.userId).done(function (profile) {
	              event["avatar"] = client.mxcUrlToHttp(profile.avatar_url);
	              event["room"] = room;
	              tweets.push(event);
	              self.setState({ tweets: tweets });
	            });
	            console.log(
	            //the room name will update with m.room.name events automatically
	            "(%s) %s :: %s", room.name, event.getSender(), JSON.stringify(event.getContent()));
	          }
	        });
	        client.startClient();
	      });
	    } else {
	      console.log("fail");
	      client = JSON.parse(localStorage["client"]);
	    }
	  },
	  render: function render() {
	    var self = this;
	    var propTweets = this.state.tweets.map(function (tweet) {
	      return React.createElement(Tweet, { tweetData: tweet, store: self.props.store });
	    });
	    var conversation;
	    if (this.state.tweet) {
	      conversation = React.createElement(Conversation, { tweet: this.state.tweet, store: this.props.store });
	    }
	    return React.createElement(
	      'div',
	      null,
	      React.createElement(
	        'div',
	        null,
	        conversation
	      ),
	      React.createElement(
	        'div',
	        { style: { display: this.containerDisplay() } },
	        React.createElement(
	          'div',
	          null,
	          React.createElement(NewTweet, { store: this.props.store })
	        ),
	        propTweets.reverse()
	      )
	    );
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(20);
	
	module.exports = React.createClass({
	  displayName: 'exports',
	
	  reply: function reply(ev) {
	    console.log(ev);
	    this.props.store.dispatch({ type: 'UPDATE', key: "tweetData", value: this.props.tweetData });
	  },
	  viewConvo: function viewConvo() {
	    this.props.store.dispatch({ type: 'UPDATE', key: "convoData", value: this.props.tweetData });
	  },
	  waitForData: function waitForData(count) {
	    var self = this;
	    setTimeout(function () {
	      var room = client.getRoom(self.props.tweetData.room.roomId);
	      var event = room.findEventById(self.props.tweetData.getContent().inReplyTo);
	      if (event) {
	        self.setState({ event: event });
	      } else {
	        console.log("waiting for data: " + self.props.tweetData.getContent().inReplyTo);
	        if (count < 5) {
	          self.waitForData(count + 1);
	        }
	      }
	    }, 1000);
	  },
	  render: function render() {
	    var replyString;
	    if (this.props.tweetData.getContent().inReplyTo) {
	      this.waitForData(0);
	      if (this.state && this.state.event) {
	        replyString = React.createElement(
	          'p',
	          null,
	          'In reply to ',
	          React.createElement(
	            'b',
	            null,
	            this.state.event.getContent().body
	          ),
	          ' ',
	          this.state.event.getSender(),
	          React.createElement(
	            'span',
	            { className: 'view-convo', onClick: this.viewConvo },
	            '[view conversation]'
	          )
	        );
	      }
	    }
	    return React.createElement(
	      'div',
	      { className: 'tweet' },
	      React.createElement(
	        'div',
	        { className: 'innerTweet' },
	        React.createElement(
	          'p',
	          null,
	          React.createElement('img', { src: this.props.tweetData.avatar }),
	          this.props.tweetData.sender.name,
	          ' . ',
	          this.props.tweetData.sender.userId,
	          ' . ',
	          this.props.tweetData.room.name
	        ),
	        React.createElement(
	          'p',
	          null,
	          this.props.tweetData.getContent().body
	        ),
	        replyString
	      ),
	      React.createElement(
	        'div',
	        { className: 'reply' },
	        React.createElement(
	          'a',
	          { onClick: this.reply },
	          'Reply'
	        )
	      )
	    );
	  }
	});

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(20);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  componentDidMount: function componentDidMount() {
	    var self = this;
	    this.props.store.subscribe(function () {
	      self.setState({ tweet: self.props.store.getState().tweetData });
	    });
	  },
	  onChange: function onChange(ev) {
	    this.setState({ message: ev.target.value });
	  },
	  onClick: function onClick() {
	    console.log(this.state.message);
	    client.sendMessage("!xtYgwAVUadJnJUydMa:matrix.org", {
	      msgtype: "cat.tyler.twitter",
	      body: this.state.message,
	      inReplyTo: this.state.tweet.event.event_id
	    });
	  },
	  render: function render() {
	    if (this.state) {
	      console.log(this.state);
	      return React.createElement(
	        "div",
	        { className: "new-tweet" },
	        React.createElement(
	          "p",
	          null,
	          "Sending reply to ",
	          this.state.tweet.sender.name,
	          " in reply to ",
	          this.state.tweet.event.event_id
	        ),
	        React.createElement("input", { type: "text", onChange: this.onChange, value: this.state.message }),
	        React.createElement(
	          "button",
	          { onClick: this.onClick },
	          "Send"
	        )
	      );
	    } else {
	      return React.createElement("div", { style: { display: "none" } });
	    }
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(20);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  getInitialState: function getInitialState() {
	    return { text: JSON.stringify(this.props.friends) };
	  },
	  onChange: function onChange(ev) {
	    //console.log(ev.target.value);
	    this.setState({ text: ev.target.value });
	  },
	  render: function render() {
	    return React.createElement("input", { type: "text", onChange: this.onChange, value: this.state.text });
	  }
	});

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var matrixcs = __webpack_require__(182);
	matrixcs.request(__webpack_require__(228));
	module.exports = matrixcs; // keep export for browserify package deps
	global.matrixcs = matrixcs;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/** The {@link module:models/event.MatrixEvent|MatrixEvent} class. */
	module.exports.MatrixEvent = __webpack_require__(183).MatrixEvent;
	/** The {@link module:models/event.EventStatus|EventStatus} enum. */
	module.exports.EventStatus = __webpack_require__(183).EventStatus;
	/** The {@link module:store/memory.MatrixInMemoryStore|MatrixInMemoryStore} class. */
	module.exports.MatrixInMemoryStore = __webpack_require__(184).MatrixInMemoryStore;
	/** The {@link module:store/webstorage~WebStorageStore|WebStorageStore} class.
	 * <strong>Work in progress; unstable.</strong> */
	module.exports.WebStorageStore = __webpack_require__(188);
	/** The {@link module:http-api.MatrixHttpApi|MatrixHttpApi} class. */
	module.exports.MatrixHttpApi = __webpack_require__(196).MatrixHttpApi;
	/** The {@link module:http-api.MatrixError|MatrixError} class. */
	module.exports.MatrixError = __webpack_require__(196).MatrixError;
	/** The {@link module:client.MatrixClient|MatrixClient} class. */
	module.exports.MatrixClient = __webpack_require__(200).MatrixClient;
	/** The {@link module:models/room|Room} class. */
	module.exports.Room = __webpack_require__(189);
	/** The {@link module:models/event-timeline~EventTimeline} class. */
	module.exports.EventTimeline = __webpack_require__(192);
	/** The {@link module:models/event-timeline-set~EventTimelineSet} class. */
	module.exports.EventTimelineSet = __webpack_require__(195);
	/** The {@link module:models/room-member|RoomMember} class. */
	module.exports.RoomMember = __webpack_require__(194);
	/** The {@link module:models/room-state~RoomState|RoomState} class. */
	module.exports.RoomState = __webpack_require__(193);
	/** The {@link module:models/user~User|User} class. */
	module.exports.User = __webpack_require__(186);
	/** The {@link module:scheduler~MatrixScheduler|MatrixScheduler} class. */
	module.exports.MatrixScheduler = __webpack_require__(225);
	/** The {@link module:store/session/webstorage~WebStorageSessionStore|
	 * WebStorageSessionStore} class. <strong>Work in progress; unstable.</strong> */
	module.exports.WebStorageSessionStore = __webpack_require__(226);
	/** True if crypto libraries are being used on this client. */
	module.exports.CRYPTO_ENABLED = __webpack_require__(200).CRYPTO_ENABLED;
	/** {@link module:content-repo|ContentRepo} utility functions. */
	module.exports.ContentRepo = __webpack_require__(191);
	/** The {@link module:filter~Filter|Filter} class. */
	module.exports.Filter = __webpack_require__(212);
	/** The {@link module:timeline-window~TimelineWindow} class. */
	module.exports.TimelineWindow = __webpack_require__(227).TimelineWindow;
	
	/**
	 * Create a new Matrix Call.
	 * @function
	 * @param {module:client.MatrixClient} client The MatrixClient instance to use.
	 * @param {string} roomId The room the call is in.
	 * @return {module:webrtc/call~MatrixCall} The Matrix call or null if the browser
	 * does not support WebRTC.
	 */
	module.exports.createNewMatrixCall = __webpack_require__(211).createNewMatrixCall;
	
	// expose the underlying request object so different environments can use
	// different request libs (e.g. request or browser-request)
	var request;
	/**
	 * The function used to perform HTTP requests. Only use this if you want to
	 * use a different HTTP library, e.g. Angular's <code>$http</code>. This should
	 * be set prior to calling {@link createClient}.
	 * @param {requestFunction} r The request function to use.
	 */
	module.exports.request = function(r) {
	    request = r;
	};
	
	/**
	 * Construct a Matrix Client. Similar to {@link module:client~MatrixClient}
	 * except that the 'request', 'store' and 'scheduler' dependencies are satisfied.
	 * @param {(Object|string)} opts The configuration options for this client. If
	 * this is a string, it is assumed to be the base URL. These configuration
	 * options will be passed directly to {@link module:client~MatrixClient}.
	 * @param {Object} opts.store If not set, defaults to
	 * {@link module:store/memory.MatrixInMemoryStore}.
	 * @param {Object} opts.scheduler If not set, defaults to
	 * {@link module:scheduler~MatrixScheduler}.
	 * @param {requestFunction} opts.request If not set, defaults to the function
	 * supplied to {@link request} which defaults to the request module from NPM.
	 * @return {MatrixClient} A new matrix client.
	 * @see {@link module:client~MatrixClient} for the full list of options for
	 * <code>opts</code>.
	 */
	module.exports.createClient = function(opts) {
	    if (typeof opts === "string") {
	        opts = {
	            "baseUrl": opts
	        };
	    }
	    opts.request = opts.request || request;
	    opts.store = opts.store || new module.exports.MatrixInMemoryStore({
	      localStorage: global.localStorage
	    });
	    opts.scheduler = opts.scheduler || new module.exports.MatrixScheduler();
	    return new module.exports.MatrixClient(opts);
	};
	
	/**
	 * The request function interface for performing HTTP requests. This matches the
	 * API for the {@link https://github.com/request/request#requestoptions-callback|
	 * request NPM module}. The SDK will attempt to call this function in order to
	 * perform an HTTP request.
	 * @callback requestFunction
	 * @param {Object} opts The options for this HTTP request.
	 * @param {string} opts.uri The complete URI.
	 * @param {string} opts.method The HTTP method.
	 * @param {Object} opts.qs The query parameters to append to the URI.
	 * @param {Object} opts.body The JSON-serializable object.
	 * @param {boolean} opts.json True if this is a JSON request.
	 * @param {Object} opts._matrix_opts The underlying options set for
	 * {@link MatrixHttpApi}.
	 * @param {requestCallback} callback The request callback.
	 */
	
	 /**
	  * The request callback interface for performing HTTP requests. This matches the
	  * API for the {@link https://github.com/request/request#requestoptions-callback|
	  * request NPM module}. The SDK will implement a callback which meets this
	  * interface in order to handle the HTTP response.
	  * @callback requestCallback
	  * @param {Error} err The error if one occurred, else falsey.
	  * @param {Object} response The HTTP response which consists of
	  * <code>{statusCode: {Number}, headers: {Object}}</code>
	  * @param {Object} body The parsed HTTP response body.
	  */
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 183 */
/***/ function(module, exports) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * This is an internal module. See {@link MatrixEvent} and {@link RoomEvent} for
	 * the public classes.
	 * @module models/event
	 */
	
	/**
	 * Enum for event statuses.
	 * @readonly
	 * @enum {string}
	 */
	module.exports.EventStatus = {
	    /** The event was not sent and will no longer be retried. */
	    NOT_SENT: "not_sent",
	
	    /** The message is being encrypted */
	    ENCRYPTING: "encrypting",
	
	    /** The event is in the process of being sent. */
	    SENDING: "sending",
	    /** The event is in a queue waiting to be sent. */
	    QUEUED: "queued",
	    /** The event has been sent to the server, but we have not yet received the
	     * echo. */
	    SENT: "sent",
	
	    /** The event was cancelled before it was successfully sent. */
	    CANCELLED: "cancelled",
	};
	
	/**
	 * Construct a Matrix Event object
	 * @constructor
	 *
	 * @param {Object} event The raw event to be wrapped in this DAO
	 *
	 * @param {Object=} clearEvent For encrypted events, the plaintext payload for
	 * the event (typically containing <tt>type</tt> and <tt>content</tt> fields).
	 *
	 * @param {Object=} keysProved Keys owned by the sender of this event.
	 *    See {@link module:models/event.MatrixEvent#getKeysProved}.
	 *
	 * @param {Object=} keysClaimed Keys the sender of this event claims.
	 *    See {@link module:models/event.MatrixEvent#getKeysClaimed}.
	 *
	 * @prop {Object} event The raw (possibly encrypted) event. <b>Do not access
	 * this property</b> directly unless you absolutely have to. Prefer the getter
	 * methods defined on this class. Using the getter methods shields your app
	 * from changes to event JSON between Matrix versions.
	 *
	 * @prop {RoomMember} sender The room member who sent this event, or null e.g.
	 * this is a presence event.
	 * @prop {RoomMember} target The room member who is the target of this event, e.g.
	 * the invitee, the person being banned, etc.
	 * @prop {EventStatus} status The sending status of the event.
	 * @prop {boolean} forwardLooking True if this event is 'forward looking', meaning
	 * that getDirectionalContent() will return event.content and not event.prev_content.
	 * Default: true. <strong>This property is experimental and may change.</strong>
	 */
	module.exports.MatrixEvent = function MatrixEvent(
	    event, clearEvent, keysProved, keysClaimed
	) {
	    this.event = event || {};
	    this.sender = null;
	    this.target = null;
	    this.status = null;
	    this.forwardLooking = true;
	
	    this._clearEvent = clearEvent || {};
	    this._pushActions = null;
	
	    this._keysProved = keysProved || {};
	    this._keysClaimed = keysClaimed || {};
	};
	
	module.exports.MatrixEvent.prototype = {
	
	    /**
	     * Get the event_id for this event.
	     * @return {string} The event ID, e.g. <code>$143350589368169JsLZx:localhost
	     * </code>
	     */
	    getId: function() {
	        return this.event.event_id;
	    },
	
	    /**
	     * Get the user_id for this event.
	     * @return {string} The user ID, e.g. <code>@alice:matrix.org</code>
	     */
	    getSender: function() {
	        return this.event.sender || this.event.user_id; // v2 / v1
	    },
	
	    /**
	     * Get the (decrypted, if necessary) type of event.
	     *
	     * @return {string} The event type, e.g. <code>m.room.message</code>
	     */
	    getType: function() {
	        return this._clearEvent.type || this.event.type;
	    },
	
	    /**
	     * Get the (possibly encrypted) type of the event that will be sent to the
	     * homeserver.
	     *
	     * @return {string} The event type.
	     */
	    getWireType: function() {
	        return this.event.type;
	    },
	
	    /**
	     * Get the room_id for this event. This will return <code>undefined</code>
	     * for <code>m.presence</code> events.
	     * @return {string} The room ID, e.g. <code>!cURbafjkfsMDVwdRDQ:matrix.org
	     * </code>
	     */
	    getRoomId: function() {
	        return this.event.room_id;
	    },
	
	    /**
	     * Get the timestamp of this event.
	     * @return {Number} The event timestamp, e.g. <code>1433502692297</code>
	     */
	    getTs: function() {
	        return this.event.origin_server_ts;
	    },
	
	    /**
	     * Get the (decrypted, if necessary) event content JSON.
	     *
	     * @return {Object} The event content JSON, or an empty object.
	     */
	    getContent: function() {
	        return this._clearEvent.content || this.event.content || {};
	    },
	
	    /**
	     * Get the (possibly encrypted) event content JSON that will be sent to the
	     * homeserver.
	     *
	     * @return {Object} The event content JSON, or an empty object.
	     */
	    getWireContent: function() {
	        return this.event.content || {};
	    },
	
	    /**
	     * Get the previous event content JSON. This will only return something for
	     * state events which exist in the timeline.
	     * @return {Object} The previous event content JSON, or an empty object.
	     */
	    getPrevContent: function() {
	        // v2 then v1 then default
	        return this.getUnsigned().prev_content || this.event.prev_content || {};
	    },
	
	    /**
	     * Get either 'content' or 'prev_content' depending on if this event is
	     * 'forward-looking' or not. This can be modified via event.forwardLooking.
	     * In practice, this means we get the chronologically earlier content value
	     * for this event (this method should surely be called getEarlierContent)
	     * <strong>This method is experimental and may change.</strong>
	     * @return {Object} event.content if this event is forward-looking, else
	     * event.prev_content.
	     */
	    getDirectionalContent: function() {
	        return this.forwardLooking ? this.getContent() : this.getPrevContent();
	    },
	
	    /**
	     * Get the age of this event. This represents the age of the event when the
	     * event arrived at the device, and not the age of the event when this
	     * function was called.
	     * @return {Number} The age of this event in milliseconds.
	     */
	    getAge: function() {
	        return this.getUnsigned().age || this.event.age; // v2 / v1
	    },
	
	    /**
	     * Get the event state_key if it has one. This will return <code>undefined
	     * </code> for message events.
	     * @return {string} The event's <code>state_key</code>.
	     */
	    getStateKey: function() {
	        return this.event.state_key;
	    },
	
	    /**
	     * Check if this event is a state event.
	     * @return {boolean} True if this is a state event.
	     */
	    isState: function() {
	        return this.event.state_key !== undefined;
	    },
	
	    /**
	     * Replace the content of this event with encrypted versions.
	     * (This is used when sending an event; it should not be used by applications).
	     *
	     * @internal
	     *
	     * @param {string} crypto_type type of the encrypted event - typically
	     * <tt>"m.room.encrypted"</tt>
	     *
	     * @param {object} crypto_content raw 'content' for the encrypted event.
	     * @param {object} keys The local keys claimed and proved by this event.
	     */
	    makeEncrypted: function(crypto_type, crypto_content, keys) {
	        // keep the plain-text data for 'view source'
	        this._clearEvent = {
	            type: this.event.type,
	            content: this.event.content,
	        };
	        this.event.type = crypto_type;
	        this.event.content = crypto_content;
	        this._keysProved = keys;
	        this._keysClaimed = keys;
	    },
	
	    /**
	     * Check if the event is encrypted.
	     * @return {boolean} True if this event is encrypted.
	     */
	    isEncrypted: function() {
	        return Boolean(this._clearEvent.type);
	    },
	
	    /**
	     * The curve25519 key that sent this event
	     * @return {string}
	     */
	    getSenderKey: function() {
	        return this.getKeysProved().curve25519 || null;
	    },
	
	    /**
	     * The keys that must have been owned by the sender of this encrypted event.
	     * <p>
	     * These don't necessarily have to come from this event itself, but may be
	     * implied by the cryptographic session.
	     *
	     * @return {Object<string, string>}
	     */
	    getKeysProved: function() {
	        return this._keysProved;
	    },
	
	    /**
	     * The additional keys the sender of this encrypted event claims to possess.
	     * <p>
	     * These don't necessarily have to come from this event itself, but may be
	     * implied by the cryptographic session.
	     * For example megolm messages don't claim keys directly, but instead
	     * inherit a claim from the olm message that established the session.
	     *
	     * @return {Object<string, string>}
	     */
	    getKeysClaimed: function() {
	        return this._keysClaimed;
	    },
	
	    getUnsigned: function() {
	        return this.event.unsigned || {};
	    },
	
	    /**
	     * Update the content of an event in the same way it would be by the server
	     * if it were redacted before it was sent to us
	     *
	     * @param {module:models/event.MatrixEvent} redaction_event
	     *     event causing the redaction
	     */
	    makeRedacted: function(redaction_event) {
	        // quick sanity-check
	        if (!redaction_event.event) {
	            throw new Error("invalid redaction_event in makeRedacted");
	        }
	
	        // we attempt to replicate what we would see from the server if
	        // the event had been redacted before we saw it.
	        //
	        // The server removes (most of) the content of the event, and adds a
	        // "redacted_because" key to the unsigned section containing the
	        // redacted event.
	        if (!this.event.unsigned) {
	            this.event.unsigned = {};
	        }
	        this.event.unsigned.redacted_because = redaction_event.event;
	
	        var key;
	        for (key in this.event) {
	            if (!this.event.hasOwnProperty(key)) { continue; }
	            if (!_REDACT_KEEP_KEY_MAP[key]) {
	                delete this.event[key];
	            }
	        }
	
	        var keeps = _REDACT_KEEP_CONTENT_MAP[this.getType()] || {};
	        var content = this.getContent();
	        for (key in content) {
	            if (!content.hasOwnProperty(key)) { continue; }
	            if (!keeps[key]) {
	                delete content[key];
	            }
	        }
	    },
	
	    /**
	     * Check if this event has been redacted
	     *
	     * @return {boolean} True if this event has been redacted
	     */
	    isRedacted: function() {
	        return Boolean(this.getUnsigned().redacted_because);
	    },
	
	    /**
	     * Get the push actions, if known, for this event
	     *
	     * @return {?Object} push actions
	     */
	     getPushActions: function() {
	        return this._pushActions;
	     },
	
	    /**
	     * Set the push actions for this event.
	     *
	     * @param {Object} pushActions push actions
	     */
	     setPushActions: function(pushActions) {
	        this._pushActions = pushActions;
	     },
	};
	
	
	/* http://matrix.org/docs/spec/r0.0.1/client_server.html#redactions says:
	 *
	 * the server should strip off any keys not in the following list:
	 *    event_id
	 *    type
	 *    room_id
	 *    user_id
	 *    state_key
	 *    prev_state
	 *    content
	 *    [we keep 'unsigned' as well, since that is created by the local server]
	 *
	 * The content object should also be stripped of all keys, unless it is one of
	 * one of the following event types:
	 *    m.room.member allows key membership
	 *    m.room.create allows key creator
	 *    m.room.join_rules allows key join_rule
	 *    m.room.power_levels allows keys ban, events, events_default, kick,
	 *        redact, state_default, users, users_default.
	 *    m.room.aliases allows key aliases
	 */
	// a map giving the keys we keep when an event is redacted
	var _REDACT_KEEP_KEY_MAP = [
	    'event_id', 'type', 'room_id', 'user_id', 'state_key', 'prev_state',
	    'content', 'unsigned',
	].reduce(function(ret, val) { ret[val] = 1; return ret; }, {});
	
	// a map from event type to the .content keys we keep when an event is redacted
	var _REDACT_KEEP_CONTENT_MAP = {
	    'm.room.member': {'membership': 1},
	    'm.room.create': {'creator': 1},
	    'm.room.join_rules': {'join_rule': 1},
	    'm.room.power_levels': {'ban': 1, 'events': 1, 'events_default': 1,
	                            'kick': 1, 'redact': 1, 'state_default': 1,
	                            'users': 1, 'users_default': 1,
	                           },
	    'm.room.aliases': {'aliases': 1},
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * This is an internal module. See {@link MatrixInMemoryStore} for the public class.
	 * @module store/memory
	 */
	 var utils = __webpack_require__(185);
	 var User = __webpack_require__(186);
	
	/**
	 * Construct a new in-memory data store for the Matrix Client.
	 * @constructor
	 * @param {Object=} opts Config options
	 * @param {LocalStorage} opts.localStorage The local storage instance to persist
	 * some forms of data such as tokens. Rooms will NOT be stored. See
	 * {@link WebStorageStore} to persist rooms.
	 */
	module.exports.MatrixInMemoryStore = function MatrixInMemoryStore(opts) {
	    opts = opts || {};
	    this.rooms = {
	        // roomId: Room
	    };
	    this.users = {
	        // userId: User
	    };
	    this.syncToken = null;
	    this.filters = {
	        // userId: {
	        //    filterId: Filter
	        // }
	    };
	    this.accountData = {
	        // type : content
	    };
	    this.localStorage = opts.localStorage;
	};
	
	module.exports.MatrixInMemoryStore.prototype = {
	
	    /**
	     * Retrieve the token to stream from.
	     * @return {string} The token or null.
	     */
	    getSyncToken: function() {
	        return this.syncToken;
	    },
	
	
	    /**
	     * Set the token to stream from.
	     * @param {string} token The token to stream from.
	     */
	    setSyncToken: function(token) {
	        this.syncToken = token;
	    },
	
	    /**
	     * Store the given room.
	     * @param {Room} room The room to be stored. All properties must be stored.
	     */
	    storeRoom: function(room) {
	        this.rooms[room.roomId] = room;
	        // add listeners for room member changes so we can keep the room member
	        // map up-to-date.
	        room.currentState.on("RoomState.members", this._onRoomMember.bind(this));
	        // add existing members
	        var self = this;
	        room.currentState.getMembers().forEach(function(m) {
	            self._onRoomMember(null, room.currentState, m);
	        });
	    },
	
	    /**
	     * Called when a room member in a room being tracked by this store has been
	     * updated.
	     * @param {MatrixEvent} event
	     * @param {RoomState} state
	     * @param {RoomMember} member
	     */
	    _onRoomMember: function(event, state, member) {
	        if (member.membership === "invite") {
	            // We do NOT add invited members because people love to typo user IDs
	            // which would then show up in these lists (!)
	            return;
	        }
	
	        var user = this.users[member.userId] || new User(member.userId);
	        if (member.name) {
	            user.setDisplayName(member.name);
	            if (member.events.member) {
	                user.setRawDisplayName(
	                    member.events.member.getDirectionalContent().displayname
	                );
	            }
	        }
	        if (member.events.member && member.events.member.getContent().avatar_url) {
	            user.setAvatarUrl(member.events.member.getContent().avatar_url);
	        }
	        this.users[user.userId] = user;
	    },
	
	    /**
	     * Retrieve a room by its' room ID.
	     * @param {string} roomId The room ID.
	     * @return {Room} The room or null.
	     */
	    getRoom: function(roomId) {
	        return this.rooms[roomId] || null;
	    },
	
	    /**
	     * Retrieve all known rooms.
	     * @return {Room[]} A list of rooms, which may be empty.
	     */
	    getRooms: function() {
	        return utils.values(this.rooms);
	    },
	
	    /**
	     * Permanently delete a room.
	     * @param {string} roomId
	     */
	    removeRoom: function(roomId) {
	        if (this.rooms[roomId]) {
	            this.rooms[roomId].removeListener("RoomState.members", this._onRoomMember);
	        }
	        delete this.rooms[roomId];
	    },
	
	    /**
	     * Retrieve a summary of all the rooms.
	     * @return {RoomSummary[]} A summary of each room.
	     */
	    getRoomSummaries: function() {
	        return utils.map(utils.values(this.rooms), function(room) {
	            return room.summary;
	        });
	    },
	
	    /**
	     * Store a User.
	     * @param {User} user The user to store.
	     */
	    storeUser: function(user) {
	        this.users[user.userId] = user;
	    },
	
	    /**
	     * Retrieve a User by its' user ID.
	     * @param {string} userId The user ID.
	     * @return {User} The user or null.
	     */
	    getUser: function(userId) {
	        return this.users[userId] || null;
	    },
	
	    /**
	     * Retrieve all known users.
	     * @return {User[]} A list of users, which may be empty.
	     */
	    getUsers: function() {
	        return utils.values(this.users);
	    },
	
	    /**
	     * Retrieve scrollback for this room.
	     * @param {Room} room The matrix room
	     * @param {integer} limit The max number of old events to retrieve.
	     * @return {Array<Object>} An array of objects which will be at most 'limit'
	     * length and at least 0. The objects are the raw event JSON.
	     */
	    scrollback: function(room, limit) {
	        return [];
	    },
	
	    /**
	     * Store events for a room. The events have already been added to the timeline
	     * @param {Room} room The room to store events for.
	     * @param {Array<MatrixEvent>} events The events to store.
	     * @param {string} token The token associated with these events.
	     * @param {boolean} toStart True if these are paginated results.
	     */
	    storeEvents: function(room, events, token, toStart) {
	        // no-op because they've already been added to the room instance.
	    },
	
	    /**
	     * Store a filter.
	     * @param {Filter} filter
	     */
	    storeFilter: function(filter) {
	        if (!filter) { return; }
	        if (!this.filters[filter.userId]) {
	            this.filters[filter.userId] = {};
	        }
	        this.filters[filter.userId][filter.filterId] = filter;
	    },
	
	    /**
	     * Retrieve a filter.
	     * @param {string} userId
	     * @param {string} filterId
	     * @return {?Filter} A filter or null.
	     */
	    getFilter: function(userId, filterId) {
	        if (!this.filters[userId] || !this.filters[userId][filterId]) {
	            return null;
	        }
	        return this.filters[userId][filterId];
	    },
	
	    /**
	     * Retrieve a filter ID with the given name.
	     * @param {string} filterName The filter name.
	     * @return {?string} The filter ID or null.
	     */
	    getFilterIdByName: function(filterName) {
	        if (!this.localStorage) {
	            return null;
	        }
	        try {
	            return this.localStorage.getItem("mxjssdk_memory_filter_" + filterName);
	        }
	        catch (e) {}
	        return null;
	    },
	
	    /**
	     * Set a filter name to ID mapping.
	     * @param {string} filterName
	     * @param {string} filterId
	     */
	    setFilterIdByName: function(filterName, filterId) {
	        if (!this.localStorage) {
	            return;
	        }
	        try {
	            this.localStorage.setItem("mxjssdk_memory_filter_" + filterName, filterId);
	        }
	        catch (e) {}
	    },
	
	    /**
	     * Store user-scoped account data events.
	     * N.B. that account data only allows a single event per type, so multiple
	     * events with the same type will replace each other.
	     * @param {Array<MatrixEvent>} events The events to store.
	     */
	    storeAccountDataEvents: function(events) {
	        var self = this;
	        events.forEach(function(event) {
	            self.accountData[event.getType()] = event;
	        });
	    },
	
	    /**
	     * Get account data event by event type
	     * @param {string} eventType The event type being queried
	     * @return {?MatrixEvent} the user account_data event of given type, if any
	     */
	    getAccountData: function(eventType) {
	        return this.accountData[eventType];
	    },
	
	    // TODO
	    //setMaxHistoryPerRoom: function(maxHistory) {},
	
	    // TODO
	    //reapOldMessages: function() {},
	};


/***/ },
/* 185 */
/***/ function(module, exports) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * This is an internal module.
	 * @module utils
	 */
	
	/**
	 * Encode a dictionary of query parameters.
	 * @param {Object} params A dict of key/values to encode e.g.
	 * {"foo": "bar", "baz": "taz"}
	 * @return {string} The encoded string e.g. foo=bar&baz=taz
	 */
	module.exports.encodeParams = function(params) {
	    var qs = "";
	    for (var key in params) {
	        if (!params.hasOwnProperty(key)) { continue; }
	        qs += "&" + encodeURIComponent(key) + "=" +
	                encodeURIComponent(params[key]);
	    }
	    return qs.substring(1);
	};
	
	/**
	 * Encodes a URI according to a set of template variables. Variables will be
	 * passed through encodeURIComponent.
	 * @param {string} pathTemplate The path with template variables e.g. '/foo/$bar'.
	 * @param {Object} variables The key/value pairs to replace the template
	 * variables with. E.g. { "$bar": "baz" }.
	 * @return {string} The result of replacing all template variables e.g. '/foo/baz'.
	 */
	module.exports.encodeUri = function(pathTemplate, variables) {
	    for (var key in variables) {
	        if (!variables.hasOwnProperty(key)) { continue; }
	        pathTemplate = pathTemplate.replace(
	            key, encodeURIComponent(variables[key])
	        );
	    }
	    return pathTemplate;
	};
	
	/**
	 * Applies a map function to the given array.
	 * @param {Array} array The array to apply the function to.
	 * @param {Function} fn The function that will be invoked for each element in
	 * the array with the signature <code>fn(element){...}</code>
	 * @return {Array} A new array with the results of the function.
	 */
	module.exports.map = function(array, fn) {
	    var results = new Array(array.length);
	    for (var i = 0; i < array.length; i++) {
	        results[i] = fn(array[i]);
	    }
	    return results;
	};
	
	/**
	 * Applies a filter function to the given array.
	 * @param {Array} array The array to apply the function to.
	 * @param {Function} fn The function that will be invoked for each element in
	 * the array. It should return true to keep the element. The function signature
	 * looks like <code>fn(element, index, array){...}</code>.
	 * @return {Array} A new array with the results of the function.
	 */
	module.exports.filter = function(array, fn) {
	    var results = [];
	    for (var i = 0; i < array.length; i++) {
	        if (fn(array[i], i, array)) {
	            results.push(array[i]);
	        }
	    }
	    return results;
	};
	
	/**
	 * Get the keys for an object. Same as <code>Object.keys()</code>.
	 * @param {Object} obj The object to get the keys for.
	 * @return {string[]} The keys of the object.
	 */
	module.exports.keys = function(obj) {
	    var keys = [];
	    for (var key in obj) {
	        if (!obj.hasOwnProperty(key)) { continue; }
	        keys.push(key);
	    }
	    return keys;
	};
	
	/**
	 * Get the values for an object.
	 * @param {Object} obj The object to get the values for.
	 * @return {Array<*>} The values of the object.
	 */
	module.exports.values = function(obj) {
	    var values = [];
	    for (var key in obj) {
	        if (!obj.hasOwnProperty(key)) { continue; }
	        values.push(obj[key]);
	    }
	    return values;
	};
	
	/**
	 * Invoke a function for each item in the array.
	 * @param {Array} array The array.
	 * @param {Function} fn The function to invoke for each element. Has the
	 * function signature <code>fn(element, index)</code>.
	 */
	module.exports.forEach = function(array, fn) {
	    for (var i = 0; i < array.length; i++) {
	        fn(array[i], i);
	    }
	};
	
	/**
	 * The findElement() method returns a value in the array, if an element in the array
	 * satisfies (returns true) the provided testing function. Otherwise undefined
	 * is returned.
	 * @param {Array} array The array.
	 * @param {Function} fn Function to execute on each value in the array, with the
	 * function signature <code>fn(element, index, array)</code>
	 * @param {boolean} reverse True to search in reverse order.
	 * @return {*} The first value in the array which returns <code>true</code> for
	 * the given function.
	 */
	module.exports.findElement = function(array, fn, reverse) {
	    var i;
	    if (reverse) {
	        for (i = array.length - 1; i >= 0; i--) {
	            if (fn(array[i], i, array)) {
	                return array[i];
	            }
	        }
	    }
	    else {
	        for (i = 0; i < array.length; i++) {
	            if (fn(array[i], i, array)) {
	                return array[i];
	            }
	        }
	    }
	};
	
	/**
	 * The removeElement() method removes the first element in the array that
	 * satisfies (returns true) the provided testing function.
	 * @param {Array} array The array.
	 * @param {Function} fn Function to execute on each value in the array, with the
	 * function signature <code>fn(element, index, array)</code>. Return true to
	 * remove this element and break.
	 * @param {boolean} reverse True to search in reverse order.
	 * @return {boolean} True if an element was removed.
	 */
	module.exports.removeElement = function(array, fn, reverse) {
	    var i;
	    var removed;
	    if (reverse) {
	        for (i = array.length - 1; i >= 0; i--) {
	            if (fn(array[i], i, array)) {
	                removed = array[i];
	                array.splice(i, 1);
	                return removed;
	            }
	        }
	    }
	    else {
	        for (i = 0; i < array.length; i++) {
	            if (fn(array[i], i, array)) {
	                removed = array[i];
	                array.splice(i, 1);
	                return removed;
	            }
	        }
	    }
	    return false;
	};
	
	/**
	 * Checks if the given thing is a function.
	 * @param {*} value The thing to check.
	 * @return {boolean} True if it is a function.
	 */
	module.exports.isFunction = function(value) {
	    return Object.prototype.toString.call(value) == "[object Function]";
	};
	
	/**
	 * Checks if the given thing is an array.
	 * @param {*} value The thing to check.
	 * @return {boolean} True if it is an array.
	 */
	module.exports.isArray = function(value) {
	    return Boolean(value && value.constructor === Array);
	};
	
	/**
	 * Checks that the given object has the specified keys.
	 * @param {Object} obj The object to check.
	 * @param {string[]} keys The list of keys that 'obj' must have.
	 * @throws If the object is missing keys.
	 */
	module.exports.checkObjectHasKeys = function(obj, keys) {
	    for (var i = 0; i < keys.length; i++) {
	        if (!obj.hasOwnProperty(keys[i])) {
	            throw new Error("Missing required key: " + keys[i]);
	        }
	    }
	};
	
	/**
	 * Checks that the given object has no extra keys other than the specified ones.
	 * @param {Object} obj The object to check.
	 * @param {string[]} allowedKeys The list of allowed key names.
	 * @throws If there are extra keys.
	 */
	module.exports.checkObjectHasNoAdditionalKeys = function(obj, allowedKeys) {
	    for (var key in obj) {
	        if (!obj.hasOwnProperty(key)) { continue; }
	        if (allowedKeys.indexOf(key) === -1) {
	            throw new Error("Unknown key: " + key);
	        }
	    }
	};
	
	/**
	 * Deep copy the given object. The object MUST NOT have circular references and
	 * MUST NOT have functions.
	 * @param {Object} obj The object to deep copy.
	 * @return {Object} A copy of the object without any references to the original.
	 */
	module.exports.deepCopy = function(obj) {
	    return JSON.parse(JSON.stringify(obj));
	};
	
	/**
	 * Compare two objects for equality. The objects MUST NOT have circular references.
	 *
	 * @param {Object} x The first object to compare.
	 * @param {Object} y The second object to compare.
	 *
	 * @return {boolean} true if the two objects are equal
	 */
	var deepCompare = module.exports.deepCompare = function(x, y) {
	    // Inspired by
	    // http://stackoverflow.com/questions/1068834/object-comparison-in-javascript#1144249
	
	    // Compare primitives and functions.
	    // Also check if both arguments link to the same object.
	    if (x === y) {
	        return true;
	    }
	
	    if (typeof x !== typeof y) {
	        return false;
	    }
	
	    // special-case NaN (since NaN !== NaN)
	    if (typeof x === 'number' && isNaN(x) && isNaN(y)) {
	         return true;
	    }
	
	    // special-case null (since typeof null == 'object', but null.constructor
	    // throws)
	    if (x === null || y === null) {
	        return x === y;
	    }
	
	    // everything else is either an unequal primitive, or an object
	    if (!(x instanceof Object)) {
	        return false;
	    }
	
	    // check they are the same type of object
	    if (x.constructor !== y.constructor || x.prototype !== y.prototype) {
	        return false;
	    }
	
	    // special-casing for some special types of object
	    if (x instanceof RegExp || x instanceof Date) {
	        return x.toString() === y.toString();
	    }
	
	    // the object algorithm works for Array, but it's sub-optimal.
	    if (x instanceof Array) {
	        if (x.length !== y.length) {
	            return false;
	        }
	
	        for (var i = 0; i < x.length; i++) {
	            if (!deepCompare(x[i], y[i])) {
	                return false;
	            }
	        }
	    } else {
	        // disable jshint "The body of a for in should be wrapped in an if
	        // statement"
	        /* jshint -W089 */
	
	        // check that all of y's direct keys are in x
	        var p;
	        for (p in y) {
	            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
	                return false;
	            }
	        }
	
	        // finally, compare each of x's keys with y
	        for (p in y) {
	            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
	                return false;
	            }
	            if (!deepCompare(x[p], y[p])) {
	                return false;
	            }
	        }
	    }
	    /* jshint +W089 */
	    return true;
	};
	
	/**
	 * Copy properties from one object to another.
	 *
	 * All enumerable properties, included inherited ones, are copied.
	 *
	 * @param {Object} target  The object that will receive new properties
	 * @param {...Object} source  Objects from which to copy properties
	 *
	 * @return {Object} target
	 */
	module.exports.extend = function() {
	    var target = arguments[0] || {};
	    // disable jshint "The body of a for in should be wrapped in an if
	    // statement"
	    /* jshint -W089 */
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];
	        for (var propName in source) {
	            target[propName] = source[propName];
	        }
	    }
	    /* jshint +W089 */
	    return target;
	};
	
	/**
	 * Run polyfills to add Array.map and Array.filter if they are missing.
	 */
	module.exports.runPolyfills = function() {
	    //                Array.prototype.filter
	    // ========================================================
	    // SOURCE:
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
	    if (!Array.prototype.filter) {
	      Array.prototype.filter = function(fun/*, thisArg*/) {
	
	        if (this === void 0 || this === null) {
	          throw new TypeError();
	        }
	
	        var t = Object(this);
	        var len = t.length >>> 0;
	        if (typeof fun !== 'function') {
	          throw new TypeError();
	        }
	
	        var res = [];
	        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
	        for (var i = 0; i < len; i++) {
	          if (i in t) {
	            var val = t[i];
	
	            // NOTE: Technically this should Object.defineProperty at
	            //       the next index, as push can be affected by
	            //       properties on Object.prototype and Array.prototype.
	            //       But that method's new, and collisions should be
	            //       rare, so use the more-compatible alternative.
	            if (fun.call(thisArg, val, i, t)) {
	              res.push(val);
	            }
	          }
	        }
	
	        return res;
	      };
	    }
	
	    //                Array.prototype.map
	    // ========================================================
	    // SOURCE:
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
	    // Production steps of ECMA-262, Edition 5, 15.4.4.19
	    // Reference: http://es5.github.io/#x15.4.4.19
	    if (!Array.prototype.map) {
	
	      Array.prototype.map = function(callback, thisArg) {
	
	        var T, A, k;
	
	        if (this === null || this === undefined) {
	          throw new TypeError(' this is null or not defined');
	        }
	
	        // 1. Let O be the result of calling ToObject passing the |this|
	        //    value as the argument.
	        var O = Object(this);
	
	        // 2. Let lenValue be the result of calling the Get internal
	        //    method of O with the argument "length".
	        // 3. Let len be ToUint32(lenValue).
	        var len = O.length >>> 0;
	
	        // 4. If IsCallable(callback) is false, throw a TypeError exception.
	        // See: http://es5.github.com/#x9.11
	        if (typeof callback !== 'function') {
	          throw new TypeError(callback + ' is not a function');
	        }
	
	        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
	        if (arguments.length > 1) {
	          T = thisArg;
	        }
	
	        // 6. Let A be a new array created as if by the expression new Array(len)
	        //    where Array is the standard built-in constructor with that name and
	        //    len is the value of len.
	        A = new Array(len);
	
	        // 7. Let k be 0
	        k = 0;
	
	        // 8. Repeat, while k < len
	        while (k < len) {
	
	          var kValue, mappedValue;
	
	          // a. Let Pk be ToString(k).
	          //   This is implicit for LHS operands of the in operator
	          // b. Let kPresent be the result of calling the HasProperty internal
	          //    method of O with argument Pk.
	          //   This step can be combined with c
	          // c. If kPresent is true, then
	          if (k in O) {
	
	            // i. Let kValue be the result of calling the Get internal
	            //    method of O with argument Pk.
	            kValue = O[k];
	
	            // ii. Let mappedValue be the result of calling the Call internal
	            //     method of callback with T as the this value and argument
	            //     list containing kValue, k, and O.
	            mappedValue = callback.call(T, kValue, k, O);
	
	            // iii. Call the DefineOwnProperty internal method of A with arguments
	            // Pk, Property Descriptor
	            // { Value: mappedValue,
	            //   Writable: true,
	            //   Enumerable: true,
	            //   Configurable: true },
	            // and false.
	
	            // In browsers that support Object.defineProperty, use the following:
	            // Object.defineProperty(A, k, {
	            //   value: mappedValue,
	            //   writable: true,
	            //   enumerable: true,
	            //   configurable: true
	            // });
	
	            // For best browser support, use the following:
	            A[k] = mappedValue;
	          }
	          // d. Increase k by 1.
	          k++;
	        }
	
	        // 9. return A
	        return A;
	      };
	    }
	
	    //                Array.prototype.forEach
	    // ========================================================
	    // SOURCE:
	  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
	    // Production steps of ECMA-262, Edition 5, 15.4.4.18
	    // Reference: http://es5.github.io/#x15.4.4.18
	    if (!Array.prototype.forEach) {
	
	      Array.prototype.forEach = function(callback, thisArg) {
	
	        var T, k;
	
	        if (this === null || this === undefined) {
	          throw new TypeError(' this is null or not defined');
	        }
	
	        // 1. Let O be the result of calling ToObject passing the |this| value as the
	        // argument.
	        var O = Object(this);
	
	        // 2. Let lenValue be the result of calling the Get internal method of O with the
	        // argument "length".
	        // 3. Let len be ToUint32(lenValue).
	        var len = O.length >>> 0;
	
	        // 4. If IsCallable(callback) is false, throw a TypeError exception.
	        // See: http://es5.github.com/#x9.11
	        if (typeof callback !== "function") {
	          throw new TypeError(callback + ' is not a function');
	        }
	
	        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
	        if (arguments.length > 1) {
	          T = thisArg;
	        }
	
	        // 6. Let k be 0
	        k = 0;
	
	        // 7. Repeat, while k < len
	        while (k < len) {
	
	          var kValue;
	
	          // a. Let Pk be ToString(k).
	          //   This is implicit for LHS operands of the in operator
	          // b. Let kPresent be the result of calling the HasProperty internal
	          //    method of O with
	          //    argument Pk.
	          //   This step can be combined with c
	          // c. If kPresent is true, then
	          if (k in O) {
	
	            // i. Let kValue be the result of calling the Get internal method of O with
	            // argument Pk
	            kValue = O[k];
	
	            // ii. Call the Call internal method of callback with T as the this value and
	            // argument list containing kValue, k, and O.
	            callback.call(T, kValue, k, O);
	          }
	          // d. Increase k by 1.
	          k++;
	        }
	        // 8. return undefined
	      };
	    }
	};
	
	/**
	 * Inherit the prototype methods from one constructor into another. This is a
	 * port of the Node.js implementation with an Object.create polyfill.
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	module.exports.inherits = function(ctor, superCtor) {
	    // Add Object.create polyfill for IE8
	    // Source:
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript
	    // /Reference/Global_Objects/Object/create#Polyfill
	    if (typeof Object.create != 'function') {
	      // Production steps of ECMA-262, Edition 5, 15.2.3.5
	      // Reference: http://es5.github.io/#x15.2.3.5
	      Object.create = (function() {
	        // To save on memory, use a shared constructor
	        function Temp() {}
	
	        // make a safe reference to Object.prototype.hasOwnProperty
	        var hasOwn = Object.prototype.hasOwnProperty;
	
	        return function(O) {
	          // 1. If Type(O) is not Object or Null throw a TypeError exception.
	          if (typeof O != 'object') {
	            throw new TypeError('Object prototype may only be an Object or null');
	          }
	
	          // 2. Let obj be the result of creating a new object as if by the
	          //    expression new Object() where Object is the standard built-in
	          //    constructor with that name
	          // 3. Set the [[Prototype]] internal property of obj to O.
	          Temp.prototype = O;
	          var obj = new Temp();
	          Temp.prototype = null; // Let's not keep a stray reference to O...
	
	          // 4. If the argument Properties is present and not undefined, add
	          //    own properties to obj as if by calling the standard built-in
	          //    function Object.defineProperties with arguments obj and
	          //    Properties.
	          if (arguments.length > 1) {
	            // Object.defineProperties does ToObject on its first argument.
	            var Properties = Object(arguments[1]);
	            for (var prop in Properties) {
	              if (hasOwn.call(Properties, prop)) {
	                obj[prop] = Properties[prop];
	              }
	            }
	          }
	
	          // 5. Return obj
	          return obj;
	        };
	      })();
	    }
	    // END polyfill
	
	    // Add util.inherits from Node.js
	    // Source:
	    // https://github.com/joyent/node/blob/master/lib/util.js
	    // Copyright Joyent, Inc. and other Node contributors.
	    //
	    // Permission is hereby granted, free of charge, to any person obtaining a
	    // copy of this software and associated documentation files (the
	    // "Software"), to deal in the Software without restriction, including
	    // without limitation the rights to use, copy, modify, merge, publish,
	    // distribute, sublicense, and/or sell copies of the Software, and to permit
	    // persons to whom the Software is furnished to do so, subject to the
	    // following conditions:
	    //
	    // The above copyright notice and this permission notice shall be included
	    // in all copies or substantial portions of the Software.
	    //
	    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	    // USE OR OTHER DEALINGS IN THE SOFTWARE.
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	            value: ctor,
	            enumerable: false,
	            writable: true,
	            configurable: true
	        }
	    });
	};


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module models/user
	 */
	 var EventEmitter = __webpack_require__(187).EventEmitter;
	 var utils = __webpack_require__(185);
	
	/**
	 * Construct a new User. A User must have an ID and can optionally have extra
	 * information associated with it.
	 * @constructor
	 * @param {string} userId Required. The ID of this user.
	 * @prop {string} userId The ID of the user.
	 * @prop {Object} info The info object supplied in the constructor.
	 * @prop {string} displayName The 'displayname' of the user if known.
	 * @prop {string} avatarUrl The 'avatar_url' of the user if known.
	 * @prop {string} presence The presence enum if known.
	 * @prop {string} presenceStatusMsg The presence status message if known.
	 * @prop {Number} lastActiveAgo The time elapsed in ms since the user interacted
	 *                proactively with the server, or we saw a message from the user
	 * @prop {Number} lastPresenceTs Timestamp (ms since the epoch) for when we last
	 *                received presence data for this user.  We can subtract
	 *                lastActiveAgo from this to approximate an absolute value for
	 *                when a user was last active.
	 * @prop {Boolean} currentlyActive Whether we should consider lastActiveAgo to be
	 *               an approximation and that the user should be seen as active 'now'
	 * @prop {Object} events The events describing this user.
	 * @prop {MatrixEvent} events.presence The m.presence event for this user.
	 */
	function User(userId) {
	    this.userId = userId;
	    this.presence = "offline";
	    this.presenceStatusMsg = null;
	    this.displayName = userId;
	    this.rawDisplayName = userId;
	    this.avatarUrl = null;
	    this.lastActiveAgo = 0;
	    this.lastPresenceTs = 0;
	    this.currentlyActive = false;
	    this.events = {
	        presence: null,
	        profile: null
	    };
	    this._updateModifiedTime();
	}
	utils.inherits(User, EventEmitter);
	
	/**
	 * Update this User with the given presence event. May fire "User.presence",
	 * "User.avatarUrl" and/or "User.displayName" if this event updates this user's
	 * properties.
	 * @param {MatrixEvent} event The <code>m.presence</code> event.
	 * @fires module:client~MatrixClient#event:"User.presence"
	 * @fires module:client~MatrixClient#event:"User.displayName"
	 * @fires module:client~MatrixClient#event:"User.avatarUrl"
	 */
	User.prototype.setPresenceEvent = function(event) {
	    if (event.getType() !== "m.presence") {
	        return;
	    }
	    var firstFire = this.events.presence === null;
	    this.events.presence = event;
	
	    var eventsToFire = [];
	    if (event.getContent().presence !== this.presence || firstFire) {
	        eventsToFire.push("User.presence");
	    }
	    if (event.getContent().avatar_url &&
	        event.getContent().avatar_url !== this.avatarUrl)
	    {
	        eventsToFire.push("User.avatarUrl");
	    }
	    if (event.getContent().displayname &&
	        event.getContent().displayname !== this.displayName)
	    {
	        eventsToFire.push("User.displayName");
	    }
	    if (event.getContent().currently_active !== undefined &&
	        event.getContent().currently_active !== this.currentlyActive)
	    {
	        eventsToFire.push("User.currentlyActive");
	    }
	
	    this.presence = event.getContent().presence;
	    eventsToFire.push("User.lastPresenceTs");
	
	    if (event.getContent().status_msg) {
	      this.presenceStatusMsg = event.getContent().status_msg;
	    }
	    if (event.getContent().displayname) {
	        this.displayName = event.getContent().displayname;
	    }
	    if (event.getContent().avatar_url) {
	        this.avatarUrl = event.getContent().avatar_url;
	    }
	    this.lastActiveAgo = event.getContent().last_active_ago;
	    this.lastPresenceTs = Date.now();
	    this.currentlyActive = event.getContent().currently_active;
	
	    this._updateModifiedTime();
	
	    for (var i = 0; i < eventsToFire.length; i++) {
	        this.emit(eventsToFire[i], event, this);
	    }
	};
	
	/**
	 * Manually set this user's display name. No event is emitted in response to this
	 * as there is no underlying MatrixEvent to emit with.
	 * @param {string} name The new display name.
	 */
	User.prototype.setDisplayName = function(name) {
	    var oldName = this.displayName;
	    this.displayName = name;
	    if (name !== oldName) {
	        this._updateModifiedTime();
	    }
	};
	
	
	/**
	 * Manually set this user's non-disambiguated display name. No event is emitted
	 * in response to this as there is no underlying MatrixEvent to emit with.
	 * @param {string} name The new display name.
	 */
	User.prototype.setRawDisplayName = function(name) {
	    this.rawDisplayName = name;
	};
	
	
	/**
	 * Manually set this user's avatar URL. No event is emitted in response to this
	 * as there is no underlying MatrixEvent to emit with.
	 * @param {string} url The new avatar URL.
	 */
	User.prototype.setAvatarUrl = function(url) {
	    var oldUrl = this.avatarUrl;
	    this.avatarUrl = url;
	    if (url !== oldUrl) {
	        this._updateModifiedTime();
	    }
	};
	
	/**
	 * Update the last modified time to the current time.
	 */
	User.prototype._updateModifiedTime = function() {
	    this._modified = Date.now();
	};
	
	/**
	 * Get the timestamp when this User was last updated. This timestamp is
	 * updated when this User receives a new Presence event which has updated a
	 * property on this object. It is updated <i>before</i> firing events.
	 * @return {number} The timestamp
	 */
	User.prototype.getLastModifiedTime = function() {
	    return this._modified;
	};
	
	/**
	 * Get the absolute timestamp when this User was last known active on the server.
	 * It is *NOT* accurate if this.currentlyActive is true.
	 * @return {number} The timestamp
	 */
	User.prototype.getLastActiveTs = function() {
	    return this.lastPresenceTs - this.lastActiveAgo;
	};
	
	/**
	 * The User class.
	 */
	module.exports = User;
	
	/**
	 * Fires whenever any user's lastPresenceTs changes,
	 * ie. whenever any presence event is received for a user.
	 * @event module:client~MatrixClient#"User.lastPresenceTs"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {User} user The user whose User.lastPresenceTs changed.
	 * @example
	 * matrixClient.on("User.lastPresenceTs", function(event, user){
	 *   var newlastPresenceTs = user.lastPresenceTs;
	 * });
	 */
	
	/**
	 * Fires whenever any user's presence changes.
	 * @event module:client~MatrixClient#"User.presence"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {User} user The user whose User.presence changed.
	 * @example
	 * matrixClient.on("User.presence", function(event, user){
	 *   var newPresence = user.presence;
	 * });
	 */
	
	/**
	 * Fires whenever any user's currentlyActive changes.
	 * @event module:client~MatrixClient#"User.currentlyActive"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {User} user The user whose User.currentlyActive changed.
	 * @example
	 * matrixClient.on("User.currentlyActive", function(event, user){
	 *   var newCurrentlyActive = user.currentlyActive;
	 * });
	 */
	
	/**
	 * Fires whenever any user's display name changes.
	 * @event module:client~MatrixClient#"User.displayName"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {User} user The user whose User.displayName changed.
	 * @example
	 * matrixClient.on("User.displayName", function(event, user){
	 *   var newName = user.displayName;
	 * });
	 */
	
	/**
	 * Fires whenever any user's avatar URL changes.
	 * @event module:client~MatrixClient#"User.avatarUrl"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {User} user The user whose User.avatarUrl changed.
	 * @example
	 * matrixClient.on("User.avatarUrl", function(event, user){
	 *   var newUrl = user.avatarUrl;
	 * });
	 */


/***/ },
/* 187 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * This is an internal module. Implementation details:
	 * <pre>
	 * Room data is stored as follows:
	 *   room_$ROOMID_timeline_$INDEX : [ Event, Event, Event ]
	 *   room_$ROOMID_state : {
	 *                          pagination_token: <oldState.paginationToken>,
	 *                          events: {
	 *                            <event_type>: { <state_key> : {JSON} }
	 *                          }
	 *                        }
	 * User data is stored as follows:
	 *   user_$USERID : User
	 * Sync token:
	 *   sync_token : $TOKEN
	 *
	 * Room Retrieval
	 * --------------
	 * Retrieving a room requires the $ROOMID which then pulls out the current state
	 * from room_$ROOMID_state. A defined starting batch of timeline events are then
	 * extracted from the highest numbered $INDEX for room_$ROOMID_timeline_$INDEX
	 * (more indices as required). The $INDEX may be negative. These are
	 * added to the timeline in the same way as /initialSync (old state will diverge).
	 * If there exists a room_$ROOMID_timeline_live key, then a timeline sync should
	 * be performed before retrieving.
	 *
	 * Retrieval of earlier messages
	 * -----------------------------
	 * The earliest event the Room instance knows about is E. Retrieving earlier
	 * messages requires a Room which has a storageToken defined.
	 * This token maps to the index I where the Room is at. Events are then retrieved from
	 * room_$ROOMID_timeline_{I} and elements before E are extracted. If the limit
	 * demands more events, I-1 is retrieved, up until I=min $INDEX where it gives
	 * less than the limit. Index may go negative if you have paginated in the past.
	 *
	 * Full Insertion
	 * --------------
	 * Storing a room requires the timeline and state keys for $ROOMID to
	 * be blown away and completely replaced, which is computationally expensive.
	 * Room.timeline is batched according to the given batch size B. These batches
	 * are then inserted into storage as room_$ROOMID_timeline_$INDEX. Finally,
	 * the current room state is persisted to room_$ROOMID_state.
	 *
	 * Incremental Insertion
	 * ---------------------
	 * As events arrive, the store can quickly persist these new events. This
	 * involves pushing the events to room_$ROOMID_timeline_live. If the
	 * current room state has been modified by the new event, then
	 * room_$ROOMID_state should be updated in addition to the timeline.
	 *
	 * Timeline sync
	 * -------------
	 * Retrieval of events from the timeline depends on the proper batching of
	 * events. This is computationally expensive to perform on every new event, so
	 * is deferred by inserting live events to room_$ROOMID_timeline_live. A
	 * timeline sync reconciles timeline_live and timeline_$INDEX. This involves
	 * retrieving _live and the highest numbered $INDEX batch. If the batch is < B,
	 * the earliest entries from _live are inserted into the $INDEX until the
	 * batch == B. Then, the remaining entries in _live are batched to $INDEX+1,
	 * $INDEX+2, and so on. The easiest way to visualise this is that the timeline
	 * goes from old to new, left to right:
	 *          -2         -1         0         1
	 * <--OLD---------------------------------------NEW-->
	 *        [a,b,c]    [d,e,f]   [g,h,i]   [j,k,l]
	 *
	 * Purging
	 * -------
	 * Events from the timeline can be purged by removing the lowest
	 * timeline_$INDEX in the store.
	 *
	 * Example
	 * -------
	 * A room with room_id !foo:bar has 9 messages (M1->9 where 9=newest) with a
	 * batch size of 4. The very first time, there is no entry for !foo:bar until
	 * storeRoom() is called, which results in the keys: [Full Insert]
	 *   room_!foo:bar_timeline_0 : [M1, M2, M3, M4]
	 *   room_!foo:bar_timeline_1 : [M5, M6, M7, M8]
	 *   room_!foo:bar_timeline_2 : [M9]
	 *   room_!foo:bar_state: { ... }
	 *
	 * 5 new messages (N1-5, 5=newest) arrive and are then added: [Incremental Insert]
	 *   room_!foo:bar_timeline_live: [N1]
	 *   room_!foo:bar_timeline_live: [N1, N2]
	 *   room_!foo:bar_timeline_live: [N1, N2, N3]
	 *   room_!foo:bar_timeline_live: [N1, N2, N3, N4]
	 *   room_!foo:bar_timeline_live: [N1, N2, N3, N4, N5]
	 *
	 * App is shutdown. Restarts. The timeline is synced [Timeline Sync]
	 *   room_!foo:bar_timeline_2 : [M9, N1, N2, N3]
	 *   room_!foo:bar_timeline_3 : [N4, N5]
	 *   room_!foo:bar_timeline_live: []
	 *
	 * And the room is retrieved with 8 messages: [Room Retrieval]
	 *   Room.timeline: [M7, M8, M9, N1, N2, N3, N4, N5]
	 *   Room.storageToken: => early_index = 1 because that's where M7 is.
	 *
	 * 3 earlier messages are requested: [Earlier retrieval]
	 *   Use storageToken to find batch index 1. Scan batch for earliest event ID.
	 *   earliest event = M7
	 *   events = room_!foo:bar_timeline_1 where event < M7 = [M5, M6]
	 * Too few events, use next index (0) and get 1 more:
	 *   events = room_!foo:bar_timeline_0 = [M1, M2, M3, M4] => [M4]
	 * Return concatentation:
	 *   [M4, M5, M6]
	 *
	 * Purge oldest events: [Purge]
	 *   del room_!foo:bar_timeline_0
	 * </pre>
	 * @module store/webstorage
	 */
	var DEBUG = false;  // set true to enable console logging.
	var utils = __webpack_require__(185);
	var Room = __webpack_require__(189);
	var User = __webpack_require__(186);
	var MatrixEvent = __webpack_require__(183).MatrixEvent;
	
	/**
	 * Construct a web storage store, capable of storing rooms and users.
	 * @constructor
	 * @param {WebStorage} webStore A web storage implementation, e.g.
	 * 'window.localStorage' or 'window.sessionStorage' or a custom implementation.
	 * @param {integer} batchSize The number of events to store per key/value (room
	 * scoped). Use -1 to store all events for a room under one key/value.
	 * @throws if the supplied 'store' does not meet the Storage interface of the
	 * WebStorage API.
	 */
	function WebStorageStore(webStore, batchSize) {
	    this.store = webStore;
	    this.batchSize = batchSize;
	    if (!utils.isFunction(webStore.getItem) || !utils.isFunction(webStore.setItem) ||
	            !utils.isFunction(webStore.removeItem) || !utils.isFunction(webStore.key)) {
	        throw new Error(
	            "Supplied webStore does not meet the WebStorage API interface"
	        );
	    }
	    if (!parseInt(webStore.length) && webStore.length !== 0) {
	        throw new Error(
	            "Supplied webStore does not meet the WebStorage API interface (length)"
	        );
	    }
	    // cached list of room_ids this is storing.
	    this._roomIds = [];
	    this._syncedWithStore = false;
	    // tokens used to remember which index the room instance is at.
	    this._tokens = [
	        // { earliestIndex: -4 }
	    ];
	}
	
	
	/**
	 * Retrieve the token to stream from.
	 * @return {string} The token or null.
	 */
	WebStorageStore.prototype.getSyncToken = function() {
	    return this.store.getItem("sync_token");
	};
	
	/**
	 * Set the token to stream from.
	 * @param {string} token The token to stream from.
	 */
	WebStorageStore.prototype.setSyncToken = function(token) {
	    this.store.setItem("sync_token", token);
	};
	
	/**
	 * Store a room in web storage.
	 * @param {Room} room
	 */
	WebStorageStore.prototype.storeRoom = function(room) {
	    var serRoom = SerialisedRoom.fromRoom(room, this.batchSize);
	    persist(this.store, serRoom);
	    if (this._roomIds.indexOf(room.roomId) === -1) {
	        this._roomIds.push(room.roomId);
	    }
	};
	
	/**
	 * Retrieve a room from web storage.
	 * @param {string} roomId
	 * @return {?Room}
	 */
	WebStorageStore.prototype.getRoom = function(roomId) {
	    // probe if room exists; break early if not. Every room should have state.
	    if (!getItem(this.store, keyName(roomId, "state"))) {
	        debuglog("getRoom: No room with id %s found.", roomId);
	        return null;
	    }
	    var timelineKeys = getTimelineIndices(this.store, roomId);
	    if (timelineKeys.indexOf("live") !== -1) {
	        debuglog("getRoom: Live events found. Syncing timeline for %s", roomId);
	        this._syncTimeline(roomId, timelineKeys);
	    }
	    return loadRoom(this.store, roomId, this.batchSize, this._tokens);
	};
	
	/**
	 * Get a list of all rooms from web storage.
	 * @return {Array} An empty array.
	 */
	WebStorageStore.prototype.getRooms = function() {
	    var rooms = [];
	    var i;
	    if (!this._syncedWithStore) {
	        // sync with the store to set this._roomIds correctly. We know there is
	        // exactly one 'state' key for each room, so we grab them.
	        this._roomIds = [];
	        for (i = 0; i < this.store.length; i++) {
	            if (this.store.key(i).indexOf("room_") === 0 &&
	                    this.store.key(i).indexOf("_state") !== -1) {
	                // grab the middle bit which is the room ID
	                var k = this.store.key(i);
	                this._roomIds.push(
	                    k.substring("room_".length, k.length - "_state".length)
	                );
	            }
	        }
	        this._syncedWithStore = true;
	    }
	    // call getRoom on each room_id
	    for (i = 0; i < this._roomIds.length; i++) {
	        var rm = this.getRoom(this._roomIds[i]);
	        if (rm) {
	            rooms.push(rm);
	        }
	    }
	    return rooms;
	};
	
	/**
	 * Get a list of summaries from web storage.
	 * @return {Array} An empty array.
	 */
	WebStorageStore.prototype.getRoomSummaries = function() {
	    return [];
	};
	
	/**
	 * Store a user in web storage.
	 * @param {User} user
	 */
	WebStorageStore.prototype.storeUser = function(user) {
	    // persist the events used to make the user, we can reconstruct on demand.
	    setItem(this.store, "user_" + user.userId, {
	        presence: user.events.presence ? user.events.presence.event : null
	    });
	};
	
	/**
	 * Get a user from web storage.
	 * @param {string} userId
	 * @return {User}
	 */
	WebStorageStore.prototype.getUser = function(userId) {
	    var userData = getItem(this.store, "user_" + userId);
	    if (!userData) {
	        return null;
	    }
	    var user = new User(userId);
	    if (userData.presence) {
	        user.setPresenceEvent(new MatrixEvent(userData.presence));
	    }
	    return user;
	};
	
	/**
	 * Retrieve scrollback for this room. Automatically adds events to the timeline.
	 * @param {Room} room The matrix room to add the events to the start of the timeline.
	 * @param {integer} limit The max number of old events to retrieve.
	 * @return {Array<Object>} An array of objects which will be at most 'limit'
	 * length and at least 0. The objects are the raw event JSON. The last element
	 * is the 'oldest' (for parity with homeserver scrollback APIs).
	 */
	WebStorageStore.prototype.scrollback = function(room, limit) {
	    if (room.storageToken === undefined || room.storageToken >= this._tokens.length) {
	        return [];
	    }
	    // find the index of the earliest event in this room's timeline
	    var storeData = this._tokens[room.storageToken] || {};
	    var i;
	    var earliestIndex = storeData.earliestIndex;
	    var earliestEventId = room.timeline[0] ? room.timeline[0].getId() : null;
	    debuglog(
	        "scrollback in %s (timeline=%s msgs) i=%s, timeline[0].id=%s - req %s events",
	        room.roomId, room.timeline.length, earliestIndex, earliestEventId, limit
	    );
	    var batch = getItem(
	        this.store, keyName(room.roomId, "timeline", earliestIndex)
	    );
	    if (!batch) {
	        // bad room or already at start, either way we have nothing to give.
	        debuglog("No batch with index %s found.", earliestIndex);
	        return [];
	    }
	    // populate from this batch first
	    var scrollback = [];
	    var foundEventId = false;
	    for (i = batch.length - 1; i >= 0; i--) {
	        // go back and find the earliest event ID, THEN start adding entries.
	        // Make a MatrixEvent so we don't assume .event_id exists
	        // (e.g v2/v3 JSON may be different)
	        var matrixEvent = new MatrixEvent(batch[i]);
	        if (matrixEvent.getId() === earliestEventId) {
	            foundEventId = true;
	            debuglog(
	                "Found timeline[0] event at position %s in batch %s",
	                i, earliestIndex
	            );
	            continue;
	        }
	        if (!foundEventId) {
	            continue;
	        }
	        // add entry
	        debuglog("Add event at position %s in batch %s", i, earliestIndex);
	        scrollback.push(batch[i]);
	        if (scrollback.length === limit) {
	            break;
	        }
	    }
	    if (scrollback.length === limit) {
	        debuglog("Batch has enough events to satisfy request.");
	        return scrollback;
	    }
	    if (!foundEventId) {
	        // the earliest index batch didn't contain the event. In other words,
	        // this timeline is at a state we don't know, so bail.
	        debuglog(
	            "Failed to find event ID %s in batch %s", earliestEventId, earliestIndex
	        );
	        return [];
	    }
	
	    // get the requested earlier events from earlier batches
	    while (scrollback.length < limit) {
	        earliestIndex--;
	        batch = getItem(
	            this.store, keyName(room.roomId, "timeline", earliestIndex)
	        );
	        if (!batch) {
	            // no more events
	            debuglog("No batch found at index %s", earliestIndex);
	            break;
	        }
	        for (i = batch.length - 1; i >= 0; i--) {
	            debuglog("Add event at position %s in batch %s", i, earliestIndex);
	            scrollback.push(batch[i]);
	            if (scrollback.length === limit) {
	                break;
	            }
	        }
	    }
	    debuglog(
	        "Out of %s requested events, returning %s. New index=%s",
	        limit, scrollback.length, earliestIndex
	    );
	    room.addEventsToTimeline(utils.map(scrollback, function(e) {
	            return new MatrixEvent(e);
	    }), true, room.getLiveTimeline());
	
	    this._tokens[room.storageToken] = {
	        earliestIndex: earliestIndex
	    };
	    return scrollback;
	};
	
	/**
	 * Store events for a room. The events have already been added to the timeline.
	 * @param {Room} room The room to store events for.
	 * @param {Array<MatrixEvent>} events The events to store.
	 * @param {string} token The token associated with these events.
	 * @param {boolean} toStart True if these are paginated results. The last element
	 * is the 'oldest' (for parity with homeserver scrollback APIs).
	 */
	WebStorageStore.prototype.storeEvents = function(room, events, token, toStart) {
	    if (toStart) {
	        // add paginated events to lowest batch indexes (can go -ve)
	        var lowIndex = getIndexExtremity(
	            getTimelineIndices(this.store, room.roomId), true
	        );
	        var i, key, batch;
	        for (i = 0; i < events.length; i++) { // loop events to be stored
	            key = keyName(room.roomId, "timeline", lowIndex);
	            batch = getItem(this.store, key) || [];
	            while (batch.length < this.batchSize && i < events.length) {
	                batch.unshift(events[i].event);
	                i++; // increment to insert next event into this batch
	            }
	            i--; // decrement to avoid skipping one (for loop ++s)
	            setItem(this.store, key, batch);
	            lowIndex--; // decrement index to get a new batch.
	        }
	    }
	    else {
	        // dump as live events
	        var liveEvents = getItem(
	            this.store, keyName(room.roomId, "timeline", "live")
	        ) || [];
	        debuglog(
	            "Adding %s events to %s live list (which has %s already)",
	            events.length, room.roomId, liveEvents.length
	        );
	        var updateState = false;
	        liveEvents = liveEvents.concat(utils.map(events, function(me) {
	            // cheeky check to avoid looping twice
	            if (me.isState()) {
	                updateState = true;
	            }
	            return me.event;
	        }));
	        setItem(
	            this.store, keyName(room.roomId, "timeline", "live"), liveEvents
	        );
	        if (updateState) {
	            debuglog("Storing state for %s as new events updated state", room.roomId);
	            // use 0 batch size; we don't care about batching right now.
	            var serRoom = SerialisedRoom.fromRoom(room, 0);
	            setItem(this.store, keyName(serRoom.roomId, "state"), serRoom.state);
	        }
	    }
	};
	
	/**
	 * Sync the 'live' timeline, batching live events according to 'batchSize'.
	 * @param {string} roomId The room to sync the timeline.
	 * @param {Array<String>} timelineIndices Optional. The indices in the timeline
	 * if known already.
	 */
	WebStorageStore.prototype._syncTimeline = function(roomId, timelineIndices) {
	    timelineIndices = timelineIndices || getTimelineIndices(this.store, roomId);
	    var liveEvents = getItem(this.store, keyName(roomId, "timeline", "live")) || [];
	
	    // get the highest numbered $INDEX batch
	    var highestIndex = getIndexExtremity(timelineIndices);
	    var hiKey = keyName(roomId, "timeline", highestIndex);
	    var hiBatch = getItem(this.store, hiKey) || [];
	    // fill up the existing batch first.
	    while (hiBatch.length < this.batchSize && liveEvents.length > 0) {
	        hiBatch.push(liveEvents.shift());
	    }
	    setItem(this.store, hiKey, hiBatch);
	
	    // start adding new batches as required
	    var batch = [];
	    while (liveEvents.length > 0) {
	        batch.push(liveEvents.shift());
	        if (batch.length === this.batchSize || liveEvents.length === 0) {
	            // persist the full batch and make another
	            highestIndex++;
	            hiKey = keyName(roomId, "timeline", highestIndex);
	            setItem(this.store, hiKey, batch);
	            batch = [];
	        }
	    }
	    // reset live array
	    setItem(this.store, keyName(roomId, "timeline", "live"), []);
	};
	
	
	/**
	 * Store a filter.
	 * @param {Filter} filter
	 */
	WebStorageStore.prototype.storeFilter = function(filter) {
	};
	
	/**
	 * Retrieve a filter.
	 * @param {string} userId
	 * @param {string} filterId
	 * @return {?Filter} A filter or null.
	 */
	WebStorageStore.prototype.getFilter = function(userId, filterId) {
	    return null;
	};
	
	function SerialisedRoom(roomId) {
	    this.state = {
	        events: {}
	    };
	    this.timeline = {
	        // $INDEX: []
	    };
	    this.roomId = roomId;
	}
	
	/**
	 * Convert a Room instance into a SerialisedRoom instance which can be stored
	 * in the key value store.
	 * @param {Room} room The matrix room to convert
	 * @param {integer} batchSize The number of events per timeline batch
	 * @return {SerialisedRoom} A serialised room representation of 'room'.
	 */
	SerialisedRoom.fromRoom = function(room, batchSize) {
	    var self = new SerialisedRoom(room.roomId);
	    var index;
	    self.state.pagination_token = room.oldState.paginationToken;
	    // [room_$ROOMID_state] downcast to POJO from MatrixEvent
	    utils.forEach(utils.keys(room.currentState.events), function(eventType) {
	        utils.forEach(utils.keys(room.currentState.events[eventType]), function(skey) {
	            if (!self.state.events[eventType]) {
	                self.state.events[eventType] = {};
	            }
	            self.state.events[eventType][skey] = (
	                room.currentState.events[eventType][skey].event
	            );
	        });
	    });
	
	    // [room_$ROOMID_timeline_$INDEX]
	    if (batchSize > 0) {
	        index = 0;
	        while (index * batchSize < room.timeline.length) {
	            self.timeline[index] = room.timeline.slice(
	                index * batchSize, (index + 1) * batchSize
	            );
	            self.timeline[index] = utils.map(self.timeline[index], function(me) {
	                // use POJO not MatrixEvent
	                return me.event;
	            });
	            index++;
	        }
	    }
	    else { // don't batch
	        self.timeline[0] = utils.map(room.timeline, function(matrixEvent) {
	            return matrixEvent.event;
	        });
	    }
	    return self;
	};
	
	function loadRoom(store, roomId, numEvents, tokenArray) {
	    var room = new Room(roomId, {
	        storageToken: tokenArray.length
	    });
	
	    // populate state (flatten nested struct to event array)
	    var currentStateMap = getItem(store, keyName(roomId, "state"));
	    var stateEvents = [];
	    utils.forEach(utils.keys(currentStateMap.events), function(eventType) {
	        utils.forEach(utils.keys(currentStateMap.events[eventType]), function(skey) {
	            stateEvents.push(currentStateMap.events[eventType][skey]);
	        });
	    });
	    // TODO: Fix logic dupe with MatrixClient._processRoomEvents
	    var oldStateEvents = utils.map(
	        utils.deepCopy(stateEvents), function(e) {
	            return new MatrixEvent(e);
	        }
	    );
	    var currentStateEvents = utils.map(stateEvents, function(e) {
	            return new MatrixEvent(e);
	        }
	    );
	    room.oldState.setStateEvents(oldStateEvents);
	    room.currentState.setStateEvents(currentStateEvents);
	
	    // add most recent numEvents
	    var recentEvents = [];
	    var index = getIndexExtremity(getTimelineIndices(store, roomId));
	    var eventIndex = index;
	    var i, key, batch;
	    while (recentEvents.length < numEvents) {
	        key = keyName(roomId, "timeline", index);
	        batch = getItem(store, key) || [];
	        if (batch.length === 0) {
	            // nothing left in the store.
	            break;
	        }
	        for (i = batch.length - 1; i >= 0; i--) {
	            recentEvents.unshift(new MatrixEvent(batch[i]));
	            if (recentEvents.length === numEvents) {
	                eventIndex = index;
	                break;
	            }
	        }
	        index--;
	    }
	    // add events backwards to diverge old state correctly.
	    room.addEventsToTimeline(recentEvents.reverse(), true, room.getLiveTimeline());
	    room.oldState.paginationToken = currentStateMap.pagination_token;
	    // set the token data to let us know which index this room instance is at
	    // for scrollback.
	    tokenArray.push({
	        earliestIndex: eventIndex
	    });
	    return room;
	}
	
	function persist(store, serRoom) {
	    setItem(store, keyName(serRoom.roomId, "state"), serRoom.state);
	    utils.forEach(utils.keys(serRoom.timeline), function(index) {
	        setItem(store,
	            keyName(serRoom.roomId, "timeline", index),
	            serRoom.timeline[index]
	        );
	    });
	}
	
	function getTimelineIndices(store, roomId) {
	    var keys = [];
	    for (var i = 0; i < store.length; i++) {
	        if (store.key(i).indexOf(keyName(roomId, "timeline_")) !== -1) {
	            // e.g. room_$ROOMID_timeline_0  =>  0
	            keys.push(
	                store.key(i).replace(keyName(roomId, "timeline_"), "")
	            );
	        }
	    }
	    return keys;
	}
	
	function getIndexExtremity(timelineIndices, getLowest) {
	    var extremity, index;
	    for (var i = 0; i < timelineIndices.length; i++) {
	        index = parseInt(timelineIndices[i]);
	        if (!isNaN(index) && (
	                extremity === undefined ||
	                !getLowest && index > extremity ||
	                getLowest && index < extremity)) {
	            extremity = index;
	        }
	    }
	    return extremity;
	}
	
	function keyName(roomId, key, index) {
	    return "room_" + roomId + "_" + key + (
	        index === undefined ? "" : ("_" + index)
	    );
	}
	
	function getItem(store, key) {
	    try {
	        return JSON.parse(store.getItem(key));
	    }
	    catch (e) {
	        debuglog("Failed to get key %s: %s", key, e);
	        debuglog(e.stack);
	    }
	    return null;
	}
	
	function setItem(store, key, val) {
	    store.setItem(key, JSON.stringify(val));
	}
	
	function debuglog() {
	    if (DEBUG) {
	        console.log.apply(console, arguments);
	    }
	}
	
	/*
	function delRoomStruct(store, roomId) {
	    var prefix = "room_" + roomId;
	    var keysToRemove = [];
	    for (var i = 0; i < store.length; i++) {
	        if (store.key(i).indexOf(prefix) !== -1) {
	            keysToRemove.push(store.key(i));
	        }
	    }
	    utils.forEach(keysToRemove, function(key) {
	        store.removeItem(key);
	    });
	} */
	
	/** Web Storage Store class. */
	module.exports = WebStorageStore;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module models/room
	 */
	var EventEmitter = __webpack_require__(187).EventEmitter;
	
	var EventStatus = __webpack_require__(183).EventStatus;
	var RoomSummary = __webpack_require__(190);
	var MatrixEvent = __webpack_require__(183).MatrixEvent;
	var utils = __webpack_require__(185);
	var ContentRepo = __webpack_require__(191);
	var EventTimeline = __webpack_require__(192);
	var EventTimelineSet = __webpack_require__(195);
	
	
	function synthesizeReceipt(userId, event, receiptType) {
	    // console.log("synthesizing receipt for "+event.getId());
	    // This is really ugly because JS has no way to express an object literal
	    // where the name of a key comes from an expression
	    var fakeReceipt = {
	        content: {},
	        type: "m.receipt",
	        room_id: event.getRoomId()
	    };
	    fakeReceipt.content[event.getId()] = {};
	    fakeReceipt.content[event.getId()][receiptType] = {};
	    fakeReceipt.content[event.getId()][receiptType][userId] = {
	        ts: event.getTs()
	    };
	    return new MatrixEvent(fakeReceipt);
	}
	
	
	/**
	 * Construct a new Room.
	 *
	 * <p>For a room, we store an ordered sequence of timelines, which may or may not
	 * be continuous. Each timeline lists a series of events, as well as tracking
	 * the room state at the start and the end of the timeline. It also tracks
	 * forward and backward pagination tokens, as well as containing links to the
	 * next timeline in the sequence.
	 *
	 * <p>There is one special timeline - the 'live' timeline, which represents the
	 * timeline to which events are being added in real-time as they are received
	 * from the /sync API. Note that you should not retain references to this
	 * timeline - even if it is the current timeline right now, it may not remain
	 * so if the server gives us a timeline gap in /sync.
	 *
	 * <p>In order that we can find events from their ids later, we also maintain a
	 * map from event_id to timeline and index.
	 *
	 * @constructor
	 * @alias module:models/room
	 * @param {string} roomId Required. The ID of this room.
	 * @param {Object=} opts Configuration options
	 * @param {*} opts.storageToken Optional. The token which a data store can use
	 * to remember the state of the room. What this means is dependent on the store
	 * implementation.
	 *
	 * @param {String=} opts.pendingEventOrdering Controls where pending messages
	 * appear in a room's timeline. If "<b>chronological</b>", messages will appear
	 * in the timeline when the call to <code>sendEvent</code> was made. If
	 * "<b>detached</b>", pending messages will appear in a separate list,
	 * accessbile via {@link module:models/room#getPendingEvents}. Default:
	 * "chronological".
	 *
	 * @param {boolean} [opts.timelineSupport = false] Set to true to enable improved
	 * timeline support.
	 *
	 * @prop {string} roomId The ID of this room.
	 * @prop {string} name The human-readable display name for this room.
	 * @prop {Array<MatrixEvent>} timeline The live event timeline for this room,
	 * with the oldest event at index 0. Present for backwards compatibility -
	 * prefer getLiveTimeline().getEvents().
	 * @prop {object} tags Dict of room tags; the keys are the tag name and the values
	 * are any metadata associated with the tag - e.g. { "fav" : { order: 1 } }
	 * @prop {object} accountData Dict of per-room account_data events; the keys are the
	 * event type and the values are the events.
	 * @prop {RoomState} oldState The state of the room at the time of the oldest
	 * event in the live timeline. Present for backwards compatibility -
	 * prefer getLiveTimeline().getState(true).
	 * @prop {RoomState} currentState The state of the room at the time of the
	 * newest event in the timeline. Present for backwards compatibility -
	 * prefer getLiveTimeline().getState(false).
	 * @prop {RoomSummary} summary The room summary.
	 * @prop {*} storageToken A token which a data store can use to remember
	 * the state of the room.
	 */
	function Room(roomId, opts) {
	    opts = opts || {};
	    opts.pendingEventOrdering = opts.pendingEventOrdering || "chronological";
	
	    if (["chronological", "detached"].indexOf(opts.pendingEventOrdering) === -1) {
	        throw new Error(
	            "opts.pendingEventOrdering MUST be either 'chronological' or " +
	            "'detached'. Got: '" + opts.pendingEventOrdering + "'"
	        );
	    }
	
	    this.roomId = roomId;
	    this.name = roomId;
	    this.tags = {
	        // $tagName: { $metadata: $value },
	        // $tagName: { $metadata: $value },
	    };
	    this.accountData = {
	        // $eventType: $event
	    };
	    this.summary = null;
	    this.storageToken = opts.storageToken;
	    this._opts = opts;
	    this._txnToEvent = {}; // Pending in-flight requests { string: MatrixEvent }
	    // receipts should clobber based on receipt_type and user_id pairs hence
	    // the form of this structure. This is sub-optimal for the exposed APIs
	    // which pass in an event ID and get back some receipts, so we also store
	    // a pre-cached list for this purpose.
	    this._receipts = {
	        // receipt_type: {
	        //   user_id: {
	        //     eventId: <event_id>,
	        //     data: <receipt_data>
	        //   }
	        // }
	    };
	    this._receiptCacheByEventId = {
	        // $event_id: [{
	        //   type: $type,
	        //   userId: $user_id,
	        //   data: <receipt data>
	        // }]
	    };
	    // only receipts that came from the server, not synthesized ones
	    this._realReceipts = {};
	
	    this._notificationCounts = {};
	
	    // all our per-room timeline sets. the first one is the unfiltered ones;
	    // the subsequent ones are the filtered ones in no particular order.
	    this._timelineSets = [new EventTimelineSet(this, opts)];
	    reEmit(this, this.getUnfilteredTimelineSet(),
	           ["Room.timeline", "Room.timelineReset"]);
	
	    this._fixUpLegacyTimelineFields();
	
	    // any filtered timeline sets we're maintaining for this room
	    this._filteredTimelineSets = {
	        // filter_id: timelineSet
	    };
	
	    if (this._opts.pendingEventOrdering == "detached") {
	        this._pendingEventList = [];
	    }
	}
	utils.inherits(Room, EventEmitter);
	
	/**
	 * Get the list of pending sent events for this room
	 *
	 * @return {module:models/event.MatrixEvent[]} A list of the sent events
	 * waiting for remote echo.
	 *
	 * @throws If <code>opts.pendingEventOrdering</code> was not 'detached'
	 */
	Room.prototype.getPendingEvents = function() {
	    if (this._opts.pendingEventOrdering !== "detached") {
	        throw new Error(
	            "Cannot call getPendingEventList with pendingEventOrdering == " +
	                this._opts.pendingEventOrdering);
	    }
	
	    return this._pendingEventList;
	};
	
	/**
	 * Get the live unfiltered timeline for this room.
	 *
	 * @return {module:models/event-timeline~EventTimeline} live timeline
	 */
	Room.prototype.getLiveTimeline = function() {
	    return this.getUnfilteredTimelineSet().getLiveTimeline();
	};
	
	
	/**
	 * Reset the live timeline of all timelineSets, and start new ones.
	 *
	 * <p>This is used when /sync returns a 'limited' timeline.
	 *
	 * @param {string=} backPaginationToken   token for back-paginating the new timeline
	 */
	Room.prototype.resetLiveTimeline = function(backPaginationToken) {
	    for (var i = 0; i < this._timelineSets.length; i++) {
	        this._timelineSets[i].resetLiveTimeline(backPaginationToken);
	    }
	
	    this._fixUpLegacyTimelineFields();
	};
	
	/**
	 * Fix up this.timeline, this.oldState and this.currentState
	 *
	 * @private
	 */
	Room.prototype._fixUpLegacyTimelineFields = function() {
	    // maintain this.timeline as a reference to the live timeline,
	    // and this.oldState and this.currentState as references to the
	    // state at the start and end of that timeline. These are more
	    // for backwards-compatibility than anything else.
	    this.timeline = this.getLiveTimeline().getEvents();
	    this.oldState = this.getLiveTimeline()
	                        .getState(EventTimeline.BACKWARDS);
	    this.currentState = this.getLiveTimeline()
	                            .getState(EventTimeline.FORWARDS);
	};
	
	/**
	 * Return the timeline sets for this room.
	 * @return {EventTimelineSet[]} array of timeline sets for this room
	 */
	Room.prototype.getTimelineSets = function() {
	    return this._timelineSets;
	};
	
	/**
	 * Helper to return the main unfiltered timeline set for this room
	 * @return {EventTimelineSet} room's unfiltered timeline set
	 */
	Room.prototype.getUnfilteredTimelineSet = function() {
	    return this._timelineSets[0];
	};
	
	/**
	 * Get the timeline which contains the given event from the unfiltered set, if any
	 *
	 * @param {string} eventId  event ID to look for
	 * @return {?module:models/event-timeline~EventTimeline} timeline containing
	 * the given event, or null if unknown
	 */
	Room.prototype.getTimelineForEvent = function(eventId) {
	    return this.getUnfilteredTimelineSet().getTimelineForEvent(eventId);
	};
	
	/**
	 * Add a new timeline to this room's unfiltered timeline set
	 *
	 * @return {module:models/event-timeline~EventTimeline} newly-created timeline
	 */
	Room.prototype.addTimeline = function() {
	    return this.getUnfilteredTimelineSet().addTimeline();
	};
	
	/**
	 * Get an event which is stored in our unfiltered timeline set
	 *
	 * @param {string} eventId  event ID to look for
	 * @return {?module:models/event.MatrixEvent} the given event, or undefined if unknown
	 */
	Room.prototype.findEventById = function(eventId) {
	    return this.getUnfilteredTimelineSet().findEventById(eventId);
	};
	
	/**
	 * Get one of the notification counts for this room
	 * @param {String} type The type of notification count to get. default: 'total'
	 * @return {Number} The notification count, or undefined if there is no count
	 *                  for this type.
	 */
	Room.prototype.getUnreadNotificationCount = function(type) {
	    type = type || 'total';
	    return this._notificationCounts[type];
	};
	
	/**
	 * Set one of the notification counts for this room
	 * @param {String} type The type of notification count to set.
	 * @param {Number} count The new count
	 */
	Room.prototype.setUnreadNotificationCount = function(type, count) {
	    this._notificationCounts[type] = count;
	};
	
	/**
	 * Get the avatar URL for a room if one was set.
	 * @param {String} baseUrl The homeserver base URL. See
	 * {@link module:client~MatrixClient#getHomeserverUrl}.
	 * @param {Number} width The desired width of the thumbnail.
	 * @param {Number} height The desired height of the thumbnail.
	 * @param {string} resizeMethod The thumbnail resize method to use, either
	 * "crop" or "scale".
	 * @param {boolean} allowDefault True to allow an identicon for this room if an
	 * avatar URL wasn't explicitly set. Default: true.
	 * @return {?string} the avatar URL or null.
	 */
	Room.prototype.getAvatarUrl = function(baseUrl, width, height, resizeMethod,
	                                       allowDefault) {
	    var roomAvatarEvent = this.currentState.getStateEvents("m.room.avatar", "");
	    if (allowDefault === undefined) { allowDefault = true; }
	    if (!roomAvatarEvent && !allowDefault) {
	        return null;
	    }
	
	    var mainUrl = roomAvatarEvent ? roomAvatarEvent.getContent().url : null;
	    if (mainUrl) {
	        return ContentRepo.getHttpUriForMxc(
	            baseUrl, mainUrl, width, height, resizeMethod
	        );
	    }
	    else if (allowDefault) {
	        return ContentRepo.getIdenticonUri(
	            baseUrl, this.roomId, width, height
	        );
	    }
	
	    return null;
	};
	
	/**
	 * Get the aliases this room has according to the room's state
	 * The aliases returned by this function may not necessarily
	 * still point to this room.
	 * @return {array} The room's alias as an array of strings
	 */
	Room.prototype.getAliases = function() {
	    var alias_strings = [];
	
	    var alias_events = this.currentState.getStateEvents("m.room.aliases");
	    if (alias_events) {
	        for (var i = 0; i < alias_events.length; ++i) {
	            var alias_event = alias_events[i];
	            if (utils.isArray(alias_event.getContent().aliases)) {
	                Array.prototype.push.apply(
	                    alias_strings, alias_event.getContent().aliases
	                );
	            }
	        }
	    }
	    return alias_strings;
	};
	
	/**
	 * Get this room's canonical alias
	 * The alias returned by this function may not necessarily
	 * still point to this room.
	 * @return {?string} The room's canonical alias, or null if there is none
	 */
	Room.prototype.getCanonicalAlias = function() {
	    var canonicalAlias = this.currentState.getStateEvents("m.room.canonical_alias", "");
	    if (canonicalAlias) {
	        return canonicalAlias.getContent().alias;
	    }
	    return null;
	};
	
	/**
	 * Add events to a timeline
	 *
	 * <p>Will fire "Room.timeline" for each event added.
	 *
	 * @param {MatrixEvent[]} events A list of events to add.
	 *
	 * @param {boolean} toStartOfTimeline   True to add these events to the start
	 * (oldest) instead of the end (newest) of the timeline. If true, the oldest
	 * event will be the <b>last</b> element of 'events'.
	 *
	 * @param {module:models/event-timeline~EventTimeline} timeline   timeline to
	 *    add events to.
	 *
	 * @param {string=} paginationToken   token for the next batch of events
	 *
	 * @fires module:client~MatrixClient#event:"Room.timeline"
	 *
	 */
	Room.prototype.addEventsToTimeline = function(events, toStartOfTimeline,
	                                              timeline, paginationToken) {
	    timeline.getTimelineSet().addEventsToTimeline(
	        events, toStartOfTimeline,
	        timeline, paginationToken
	    );
	};
	
	/**
	 * Get a member from the current room state.
	 * @param {string} userId The user ID of the member.
	 * @return {RoomMember} The member or <code>null</code>.
	 */
	 Room.prototype.getMember = function(userId) {
	    var member = this.currentState.members[userId];
	    if (!member) {
	        return null;
	    }
	    return member;
	 };
	
	/**
	 * Get a list of members whose membership state is "join".
	 * @return {RoomMember[]} A list of currently joined members.
	 */
	 Room.prototype.getJoinedMembers = function() {
	    return this.getMembersWithMembership("join");
	 };
	
	/**
	 * Get a list of members with given membership state.
	 * @param {string} membership The membership state.
	 * @return {RoomMember[]} A list of members with the given membership state.
	 */
	 Room.prototype.getMembersWithMembership = function(membership) {
	    return utils.filter(this.currentState.getMembers(), function(m) {
	        return m.membership === membership;
	    });
	 };
	
	 /**
	  * Get the default room name (i.e. what a given user would see if the
	  * room had no m.room.name)
	  * @param {string} userId The userId from whose perspective we want
	  * to calculate the default name
	  * @return {string} The default room name
	  */
	 Room.prototype.getDefaultRoomName = function(userId) {
	    return calculateRoomName(this, userId, true);
	 };
	
	
	 /**
	 * Check if the given user_id has the given membership state.
	 * @param {string} userId The user ID to check.
	 * @param {string} membership The membership e.g. <code>'join'</code>
	 * @return {boolean} True if this user_id has the given membership state.
	 */
	 Room.prototype.hasMembershipState = function(userId, membership) {
	    var member = this.getMember(userId);
	    if (!member) {
	        return false;
	    }
	    return member.membership === membership;
	 };
	
	/**
	 * Add a timelineSet for this room with the given filter
	 * @param {Filter} filter  The filter to be applied to this timelineSet
	 * @return {EventTimelineSet}  The timelineSet
	 */
	Room.prototype.getOrCreateFilteredTimelineSet = function(filter) {
	    if (this._filteredTimelineSets[filter.filterId]) {
	        return this._filteredTimelineSets[filter.filterId];
	    }
	    var opts = Object.assign({ filter: filter }, this._opts);
	    var timelineSet = new EventTimelineSet(this, opts);
	    reEmit(this, timelineSet, ["Room.timeline", "Room.timelineReset"]);
	    this._filteredTimelineSets[filter.filterId] = timelineSet;
	    this._timelineSets.push(timelineSet);
	
	    // populate up the new timelineSet with filtered events from our live
	    // unfiltered timeline.
	    //
	    // XXX: This is risky as our timeline
	    // may have grown huge and so take a long time to filter.
	    // see https://github.com/vector-im/vector-web/issues/2109
	
	    var unfilteredLiveTimeline = this.getLiveTimeline();
	
	    unfilteredLiveTimeline.getEvents().forEach(function(event) {
	        timelineSet.addLiveEvent(event);
	    });
	
	    // find the earliest unfiltered timeline
	    var timeline = unfilteredLiveTimeline;
	    while (timeline.getNeighbouringTimeline(EventTimeline.BACKWARDS)) {
	        timeline = timeline.getNeighbouringTimeline(EventTimeline.BACKWARDS);
	    }
	
	    timelineSet.getLiveTimeline().setPaginationToken(
	        timeline.getPaginationToken(EventTimeline.BACKWARDS),
	        EventTimeline.BACKWARDS
	    );
	
	    // alternatively, we could try to do something like this to try and re-paginate
	    // in the filtered events from nothing, but Mark says it's an abuse of the API
	    // to do so:
	    //
	    // timelineSet.resetLiveTimeline(
	    //      unfilteredLiveTimeline.getPaginationToken(EventTimeline.FORWARDS)
	    // );
	
	    return timelineSet;
	};
	
	/**
	 * Forget the timelineSet for this room with the given filter
	 *
	 * @param {Filter} filter  the filter whose timelineSet is to be forgotten
	 */
	Room.prototype.removeFilteredTimelineSet = function(filter) {
	    var timelineSet = this._filteredTimelineSets[filter.filterId];
	    delete this._filteredTimelineSets[filter.filterId];
	    var i = this._timelineSets.indexOf(timelineSet);
	    if (i > -1) {
	        this._timelineSets.splice(i, 1);
	    }
	};
	
	/**
	 * Add an event to the end of this room's live timelines. Will fire
	 * "Room.timeline".
	 *
	 * @param {MatrixEvent} event Event to be added
	 * @param {string?} duplicateStrategy 'ignore' or 'replace'
	 * @fires module:client~MatrixClient#event:"Room.timeline"
	 * @private
	 */
	Room.prototype._addLiveEvent = function(event, duplicateStrategy) {
	    var i;
	    if (event.getType() === "m.room.redaction") {
	        var redactId = event.event.redacts;
	
	        // if we know about this event, redact its contents now.
	        var redactedEvent = this.getUnfilteredTimelineSet().findEventById(redactId);
	        if (redactedEvent) {
	            redactedEvent.makeRedacted(event);
	            this.emit("Room.redaction", event, this);
	
	            // TODO: we stash user displaynames (among other things) in
	            // RoomMember objects which are then attached to other events
	            // (in the sender and target fields). We should get those
	            // RoomMember objects to update themselves when the events that
	            // they are based on are changed.
	        }
	
	        // FIXME: apply redactions to notification list
	
	        // NB: We continue to add the redaction event to the timeline so
	        // clients can say "so and so redacted an event" if they wish to. Also
	        // this may be needed to trigger an update.
	    }
	
	    if (event.getUnsigned().transaction_id) {
	        var existingEvent = this._txnToEvent[event.getUnsigned().transaction_id];
	        if (existingEvent) {
	            // remote echo of an event we sent earlier
	            this._handleRemoteEcho(event, existingEvent);
	            return;
	        }
	    }
	
	    // add to our timeline sets
	    for (i = 0; i < this._timelineSets.length; i++) {
	        this._timelineSets[i].addLiveEvent(event, duplicateStrategy);
	    }
	
	    // synthesize and inject implicit read receipts
	    // Done after adding the event because otherwise the app would get a read receipt
	    // pointing to an event that wasn't yet in the timeline
	    if (event.sender) {
	        this.addReceipt(synthesizeReceipt(
	            event.sender.userId, event, "m.read"
	        ), true);
	
	        // Any live events from a user could be taken as implicit
	        // presence information: evidence that they are currently active.
	        // ...except in a world where we use 'user.currentlyActive' to reduce
	        // presence spam, this isn't very useful - we'll get a transition when
	        // they are no longer currently active anyway. So don't bother to
	        // reset the lastActiveAgo and lastPresenceTs from the RoomState's user.
	    }
	};
	
	
	/**
	 * Add a pending outgoing event to this room.
	 *
	 * <p>The event is added to either the pendingEventList, or the live timeline,
	 * depending on the setting of opts.pendingEventOrdering.
	 *
	 * <p>This is an internal method, intended for use by MatrixClient.
	 *
	 * @param {module:models/event.MatrixEvent} event The event to add.
	 *
	 * @param {string} txnId   Transaction id for this outgoing event
	 *
	 * @fires module:client~MatrixClient#event:"Room.localEchoUpdated"
	 *
	 * @throws if the event doesn't have status SENDING, or we aren't given a
	 * unique transaction id.
	 */
	Room.prototype.addPendingEvent = function(event, txnId) {
	    if (event.status !== EventStatus.SENDING) {
	        throw new Error("addPendingEvent called on an event with status " +
	                        event.status);
	    }
	
	    if (this._txnToEvent[txnId]) {
	        throw new Error("addPendingEvent called on an event with known txnId " +
	                        txnId);
	    }
	
	    // call setEventMetadata to set up event.sender etc
	    // as event is shared over all timelineSets, we set up its metadata based
	    // on the unfiltered timelineSet.
	    EventTimeline.setEventMetadata(
	        event,
	        this.getLiveTimeline().getState(EventTimeline.FORWARDS),
	        false
	    );
	
	    this._txnToEvent[txnId] = event;
	
	    if (this._opts.pendingEventOrdering == "detached") {
	        this._pendingEventList.push(event);
	    } else {
	        for (var i = 0; i < this._timelineSets.length; i++) {
	            var timelineSet = this._timelineSets[i];
	            if (timelineSet.getFilter()) {
	                if (this._filter.filterRoomTimeline([event]).length) {
	                    timelineSet.addEventToTimeline(event,
	                        timelineSet.getLiveTimeline(), false);
	                }
	            }
	            else {
	                timelineSet.addEventToTimeline(event,
	                    timelineSet.getLiveTimeline(), false);
	            }
	        }
	    }
	
	    this.emit("Room.localEchoUpdated", event, this, null, null);
	};
	
	/**
	 * Deal with the echo of a message we sent.
	 *
	 * <p>We move the event to the live timeline if it isn't there already, and
	 * update it.
	 *
	 * @param {module:models/event.MatrixEvent} remoteEvent   The event received from
	 *    /sync
	 * @param {module:models/event.MatrixEvent} localEvent    The local echo, which
	 *    should be either in the _pendingEventList or the timeline.
	 *
	 * @fires module:client~MatrixClient#event:"Room.localEchoUpdated"
	 * @private
	 */
	Room.prototype._handleRemoteEcho = function(remoteEvent, localEvent) {
	    var oldEventId = localEvent.getId();
	    var newEventId = remoteEvent.getId();
	    var oldStatus = localEvent.status;
	
	    // no longer pending
	    delete this._txnToEvent[remoteEvent.transaction_id];
	
	    // if it's in the pending list, remove it
	    if (this._pendingEventList) {
	        utils.removeElement(
	            this._pendingEventList,
	            function(ev) { return ev.getId() == oldEventId; },
	            false
	        );
	    }
	
	    // replace the event source (this will preserve the plaintext payload if
	    // any, which is good, because we don't want to try decoding it again).
	    localEvent.event = remoteEvent.event;
	
	    // successfully sent.
	    localEvent.status = null;
	
	    for (var i = 0; i < this._timelineSets.length; i++) {
	        var timelineSet = this._timelineSets[i];
	
	        // if it's already in the timeline, update the timeline map. If it's not, add it.
	        timelineSet.handleRemoteEcho(localEvent, oldEventId, newEventId);
	    }
	
	    this.emit("Room.localEchoUpdated", localEvent, this,
	              oldEventId, oldStatus);
	};
	
	/* a map from current event status to a list of allowed next statuses
	 */
	var ALLOWED_TRANSITIONS = {};
	
	ALLOWED_TRANSITIONS[EventStatus.ENCRYPTING] = [
	    EventStatus.SENDING,
	    EventStatus.NOT_SENT,
	];
	
	ALLOWED_TRANSITIONS[EventStatus.SENDING] = [
	    EventStatus.ENCRYPTING,
	    EventStatus.QUEUED,
	    EventStatus.NOT_SENT,
	    EventStatus.SENT,
	];
	
	ALLOWED_TRANSITIONS[EventStatus.QUEUED] =
	    [EventStatus.SENDING, EventStatus.CANCELLED];
	
	ALLOWED_TRANSITIONS[EventStatus.SENT] =
	    [];
	
	ALLOWED_TRANSITIONS[EventStatus.NOT_SENT] =
	    [EventStatus.SENDING, EventStatus.QUEUED, EventStatus.CANCELLED];
	
	ALLOWED_TRANSITIONS[EventStatus.CANCELLED] =
	    [];
	
	/**
	 * Update the status / event id on a pending event, to reflect its transmission
	 * progress.
	 *
	 * <p>This is an internal method.
	 *
	 * @param {MatrixEvent} event      local echo event
	 * @param {EventStatus} newStatus  status to assign
	 * @param {string} newEventId      new event id to assign. Ignored unless
	 *    newStatus == EventStatus.SENT.
	 * @fires module:client~MatrixClient#event:"Room.localEchoUpdated"
	 */
	Room.prototype.updatePendingEvent = function(event, newStatus, newEventId) {
	    // if the message was sent, we expect an event id
	    if (newStatus == EventStatus.SENT && !newEventId) {
	        throw new Error("updatePendingEvent called with status=SENT, " +
	                        "but no new event id");
	    }
	
	    // SENT races against /sync, so we have to special-case it.
	    if (newStatus == EventStatus.SENT) {
	        var timeline = this.getUnfilteredTimelineSet().eventIdToTimeline(newEventId);
	        if (timeline) {
	            // we've already received the event via the event stream.
	            // nothing more to do here.
	            return;
	        }
	    }
	
	    var oldStatus = event.status;
	    var oldEventId = event.getId();
	
	    if (!oldStatus) {
	        throw new Error("updatePendingEventStatus called on an event which is " +
	                        "not a local echo.");
	    }
	
	    var allowed = ALLOWED_TRANSITIONS[oldStatus];
	    if (!allowed || allowed.indexOf(newStatus) < 0) {
	        throw new Error("Invalid EventStatus transition " + oldStatus + "->" +
	                        newStatus);
	    }
	
	    event.status = newStatus;
	
	    if (newStatus == EventStatus.SENT) {
	        // update the event id
	        event.event.event_id = newEventId;
	
	        // if the event was already in the timeline (which will be the case if
	        // opts.pendingEventOrdering==chronological), we need to update the
	        // timeline map.
	        for (var i = 0; i < this._timelineSets.length; i++) {
	            this._timelineSets[i].replaceEventId(oldEventId, newEventId);
	        }
	    }
	    else if (newStatus == EventStatus.CANCELLED) {
	        // remove it from the pending event list, or the timeline.
	        if (this._pendingEventList) {
	            utils.removeElement(
	                this._pendingEventList,
	                function(ev) { return ev.getId() == oldEventId; },
	                false
	            );
	        }
	        this.removeEvent(oldEventId);
	    }
	
	    this.emit("Room.localEchoUpdated", event, this, event.getId(), oldStatus);
	};
	
	
	/**
	 * Add some events to this room. This can include state events, message
	 * events and typing notifications. These events are treated as "live" so
	 * they will go to the end of the timeline.
	 *
	 * @param {MatrixEvent[]} events A list of events to add.
	 *
	 * @param {string} duplicateStrategy Optional. Applies to events in the
	 * timeline only. If this is 'replace' then if a duplicate is encountered, the
	 * event passed to this function will replace the existing event in the
	 * timeline. If this is not specified, or is 'ignore', then the event passed to
	 * this function will be ignored entirely, preserving the existing event in the
	 * timeline. Events are identical based on their event ID <b>only</b>.
	 *
	 * @throws If <code>duplicateStrategy</code> is not falsey, 'replace' or 'ignore'.
	 */
	Room.prototype.addLiveEvents = function(events, duplicateStrategy) {
	    var i;
	    if (duplicateStrategy && ["replace", "ignore"].indexOf(duplicateStrategy) === -1) {
	        throw new Error("duplicateStrategy MUST be either 'replace' or 'ignore'");
	    }
	
	    // sanity check that the live timeline is still live
	    for (i = 0; i < this._timelineSets.length; i++) {
	        var liveTimeline = this._timelineSets[i].getLiveTimeline();
	        if (liveTimeline.getPaginationToken(EventTimeline.FORWARDS)) {
	            throw new Error(
	                "live timeline " + i + " is no longer live - it has a pagination token " +
	                "(" + liveTimeline.getPaginationToken(EventTimeline.FORWARDS) + ")"
	            );
	        }
	        if (liveTimeline.getNeighbouringTimeline(EventTimeline.FORWARDS)) {
	            throw new Error(
	                "live timeline " + i + " is no longer live - " +
	                "it has a neighbouring timeline"
	            );
	        }
	    }
	
	    for (i = 0; i < events.length; i++) {
	        if (events[i].getType() === "m.typing") {
	            this.currentState.setTypingEvent(events[i]);
	        }
	        else if (events[i].getType() === "m.receipt") {
	            this.addReceipt(events[i]);
	        }
	        // N.B. account_data is added directly by /sync to avoid
	        // having to maintain an event.isAccountData() here
	        else {
	            // TODO: We should have a filter to say "only add state event
	            // types X Y Z to the timeline".
	            this._addLiveEvent(events[i], duplicateStrategy);
	        }
	    }
	};
	
	/**
	 * Removes events from this room.
	 * @param {String[]} event_ids A list of event_ids to remove.
	 */
	Room.prototype.removeEvents = function(event_ids) {
	    for (var i = 0; i < event_ids.length; ++i) {
	        this.removeEvent(event_ids[i]);
	    }
	};
	
	/**
	 * Removes a single event from this room.
	 *
	 * @param {String} eventId  The id of the event to remove
	 *
	 * @return {bool} true if the event was removed from any of the room's timeline sets
	 */
	Room.prototype.removeEvent = function(eventId) {
	    var removedAny = false;
	    for (var i = 0; i < this._timelineSets.length; i++) {
	        var removed = this._timelineSets[i].removeEvent(eventId);
	        if (removed) {
	            removedAny = true;
	        }
	    }
	    return removedAny;
	};
	
	
	/**
	 * Recalculate various aspects of the room, including the room name and
	 * room summary. Call this any time the room's current state is modified.
	 * May fire "Room.name" if the room name is updated.
	 * @param {string} userId The client's user ID.
	 * @fires module:client~MatrixClient#event:"Room.name"
	 */
	Room.prototype.recalculate = function(userId) {
	    // set fake stripped state events if this is an invite room so logic remains
	    // consistent elsewhere.
	    var self = this;
	    var membershipEvent = this.currentState.getStateEvents(
	        "m.room.member", userId
	    );
	    if (membershipEvent && membershipEvent.getContent().membership === "invite") {
	        var strippedStateEvents = membershipEvent.event.invite_room_state || [];
	        utils.forEach(strippedStateEvents, function(strippedEvent) {
	            var existingEvent = self.currentState.getStateEvents(
	                strippedEvent.type, strippedEvent.state_key
	            );
	            if (!existingEvent) {
	                // set the fake stripped event instead
	                self.currentState.setStateEvents([new MatrixEvent({
	                    type: strippedEvent.type,
	                    state_key: strippedEvent.state_key,
	                    content: strippedEvent.content,
	                    event_id: "$fake" + Date.now(),
	                    room_id: self.roomId,
	                    user_id: userId // technically a lie
	                })]);
	            }
	        });
	    }
	
	
	
	    var oldName = this.name;
	    this.name = calculateRoomName(this, userId);
	    this.summary = new RoomSummary(this.roomId, {
	        title: this.name
	    });
	
	    if (oldName !== this.name) {
	        this.emit("Room.name", this);
	    }
	};
	
	
	/**
	 * Get a list of user IDs who have <b>read up to</b> the given event.
	 * @param {MatrixEvent} event the event to get read receipts for.
	 * @return {String[]} A list of user IDs.
	 */
	Room.prototype.getUsersReadUpTo = function(event) {
	    return this.getReceiptsForEvent(event).filter(function(receipt) {
	        return receipt.type === "m.read";
	    }).map(function(receipt) {
	        return receipt.userId;
	    });
	};
	
	/**
	 * Get the ID of the event that a given user has read up to, or null if we
	 * have received no read receipts from them.
	 * @param {String} userId The user ID to get read receipt event ID for
	 * @param {Boolean} ignoreSynthesized If true, return only receipts that have been
	 *                                    sent by the server, not implicit ones generated
	 *                                    by the JS SDK.
	 * @return {String} ID of the latest event that the given user has read, or null.
	 */
	Room.prototype.getEventReadUpTo = function(userId, ignoreSynthesized) {
	    var receipts = this._receipts;
	    if (ignoreSynthesized) {
	        receipts = this._realReceipts;
	    }
	
	    if (
	        receipts["m.read"] === undefined ||
	        receipts["m.read"][userId] === undefined
	    ) {
	        return null;
	    }
	
	    return receipts["m.read"][userId].eventId;
	};
	
	/**
	 * Get a list of receipts for the given event.
	 * @param {MatrixEvent} event the event to get receipts for
	 * @return {Object[]} A list of receipts with a userId, type and data keys or
	 * an empty list.
	 */
	Room.prototype.getReceiptsForEvent = function(event) {
	    return this._receiptCacheByEventId[event.getId()] || [];
	};
	
	/**
	 * Add a receipt event to the room.
	 * @param {MatrixEvent} event The m.receipt event.
	 * @param {Boolean} fake True if this event is implicit
	 */
	Room.prototype.addReceipt = function(event, fake) {
	    // event content looks like:
	    // content: {
	    //   $event_id: {
	    //     $receipt_type: {
	    //       $user_id: {
	    //         ts: $timestamp
	    //       }
	    //     }
	    //   }
	    // }
	    if (fake === undefined) { fake = false; }
	    if (!fake) {
	        this._addReceiptsToStructure(event, this._realReceipts);
	        // we don't bother caching real receipts by event ID
	        // as there's nothing that would read it.
	    }
	    this._addReceiptsToStructure(event, this._receipts);
	    this._receiptCacheByEventId = this._buildReceiptCache(this._receipts);
	
	    // send events after we've regenerated the cache, otherwise things that
	    // listened for the event would read from a stale cache
	    this.emit("Room.receipt", event, this);
	};
	
	/**
	 * Add a receipt event to the room.
	 * @param {MatrixEvent} event The m.receipt event.
	 * @param {Object} receipts The object to add receipts to
	 */
	Room.prototype._addReceiptsToStructure = function(event, receipts) {
	    var self = this;
	    utils.keys(event.getContent()).forEach(function(eventId) {
	        utils.keys(event.getContent()[eventId]).forEach(function(receiptType) {
	            utils.keys(event.getContent()[eventId][receiptType]).forEach(
	            function(userId) {
	                var receipt = event.getContent()[eventId][receiptType][userId];
	
	                if (!receipts[receiptType]) {
	                    receipts[receiptType] = {};
	                }
	
	                var existingReceipt = receipts[receiptType][userId];
	
	                if (!existingReceipt) {
	                    receipts[receiptType][userId] = {};
	                } else {
	                    // we only want to add this receipt if we think it is later
	                    // than the one we already have. (This is managed
	                    // server-side, but because we synthesize RRs locally we
	                    // have to do it here too.)
	                    var ordering = self.getUnfilteredTimelineSet().compareEventOrdering(
	                        existingReceipt.eventId, eventId);
	                    if (ordering !== null && ordering >= 0) {
	                        return;
	                    }
	                }
	
	                receipts[receiptType][userId] = {
	                    eventId: eventId,
	                    data: receipt
	                };
	            });
	        });
	    });
	};
	
	/**
	 * Build and return a map of receipts by event ID
	 * @param {Object} receipts A map of receipts
	 * @return {Object} Map of receipts by event ID
	 */
	Room.prototype._buildReceiptCache = function(receipts) {
	    var receiptCacheByEventId = {};
	    utils.keys(receipts).forEach(function(receiptType) {
	        utils.keys(receipts[receiptType]).forEach(function(userId) {
	            var receipt = receipts[receiptType][userId];
	            if (!receiptCacheByEventId[receipt.eventId]) {
	                receiptCacheByEventId[receipt.eventId] = [];
	            }
	            receiptCacheByEventId[receipt.eventId].push({
	                userId: userId,
	                type: receiptType,
	                data: receipt.data
	            });
	        });
	    });
	    return receiptCacheByEventId;
	};
	
	
	/**
	 * Add a temporary local-echo receipt to the room to reflect in the
	 * client the fact that we've sent one.
	 * @param {string} userId The user ID if the receipt sender
	 * @param {MatrixEvent} e The event that is to be acknowledged
	 * @param {string} receiptType The type of receipt
	 */
	Room.prototype._addLocalEchoReceipt = function(userId, e, receiptType) {
	    this.addReceipt(synthesizeReceipt(userId, e, receiptType), true);
	};
	
	/**
	 * Update the room-tag event for the room.  The previous one is overwritten.
	 * @param {MatrixEvent} event the m.tag event
	 */
	Room.prototype.addTags = function(event) {
	    // event content looks like:
	    // content: {
	    //    tags: {
	    //       $tagName: { $metadata: $value },
	    //       $tagName: { $metadata: $value },
	    //    }
	    // }
	
	    // XXX: do we need to deep copy here?
	    this.tags = event.getContent().tags;
	
	    // XXX: we could do a deep-comparison to see if the tags have really
	    // changed - but do we want to bother?
	    this.emit("Room.tags", event, this);
	};
	
	/**
	 * Update the account_data events for this room, overwriting events of the same type.
	 * @param {Array<MatrixEvent>} events an array of account_data events to add
	 */
	Room.prototype.addAccountData = function(events) {
	    for (var i = 0; i < events.length; i++) {
	        var event = events[i];
	        if (event.getType() === "m.tag") {
	            this.addTags(event);
	        }
	        this.accountData[event.getType()] = event;
	        this.emit("Room.accountData", event, this);
	    }
	};
	
	/**
	 * Access account_data event of given event type for this room
	 * @param {string} type the type of account_data event to be accessed
	 * @return {?MatrixEvent} the account_data event in question
	 */
	Room.prototype.getAccountData = function(type) {
	    return this.accountData[type];
	};
	
	/**
	 * This is an internal method. Calculates the name of the room from the current
	 * room state.
	 * @param {Room} room The matrix room.
	 * @param {string} userId The client's user ID. Used to filter room members
	 * correctly.
	 * @param {bool} ignoreRoomNameEvent Return the implicit room name that we'd see if there
	 * was no m.room.name event.
	 * @return {string} The calculated room name.
	 */
	function calculateRoomName(room, userId, ignoreRoomNameEvent) {
	    if (!ignoreRoomNameEvent) {
	        // check for an alias, if any. for now, assume first alias is the
	        // official one.
	        var mRoomName = room.currentState.getStateEvents("m.room.name", "");
	        if (mRoomName && mRoomName.getContent() && mRoomName.getContent().name) {
	            return mRoomName.getContent().name;
	        }
	    }
	
	    var alias = room.getCanonicalAlias();
	
	    if (!alias) {
	        var aliases = room.getAliases();
	
	        if (aliases.length) {
	            alias = aliases[0];
	        }
	    }
	    if (alias) {
	        return alias;
	    }
	
	    // get members that are NOT ourselves and are actually in the room.
	    var otherMembers = utils.filter(room.currentState.getMembers(), function(m) {
	        return (m.userId !== userId && m.membership !== "leave");
	    });
	    var allMembers = utils.filter(room.currentState.getMembers(), function(m) {
	        return (m.membership !== "leave");
	    });
	    var myMemberEventArray = utils.filter(room.currentState.getMembers(), function(m) {
	        return (m.userId == userId);
	    });
	    var myMemberEvent = (
	        (myMemberEventArray.length && myMemberEventArray[0].events) ?
	            myMemberEventArray[0].events.member.event : undefined
	    );
	
	    // TODO: Localisation
	    if (myMemberEvent && myMemberEvent.content.membership == "invite") {
	        if (room.currentState.getMember(myMemberEvent.sender)) {
	            // extract who invited us to the room
	            return "Invite from " + room.currentState.getMember(
	                myMemberEvent.sender
	            ).name;
	        } else if (allMembers[0].events.member) {
	            // use the sender field from the invite event, although this only
	            // gets us the mxid
	            return "Invite from " + myMemberEvent.sender;
	        } else {
	            return "Room Invite";
	        }
	    }
	
	
	    if (otherMembers.length === 0) {
	        if (allMembers.length === 1) {
	            // self-chat, peeked room with 1 participant,
	            // or inbound invite, or outbound 3PID invite.
	            if (allMembers[0].userId === userId) {
	                var thirdPartyInvites =
	                    room.currentState.getStateEvents("m.room.third_party_invite");
	                if (thirdPartyInvites && thirdPartyInvites.length > 0) {
	                    var name = "Inviting " +
	                               thirdPartyInvites[0].getContent().display_name;
	                    if (thirdPartyInvites.length > 1) {
	                        if (thirdPartyInvites.length == 2) {
	                            name += " and " +
	                                    thirdPartyInvites[1].getContent().display_name;
	                        }
	                        else {
	                            name += " and " +
	                                    thirdPartyInvites.length + " others";
	                        }
	                    }
	                    return name;
	                }
	                else {
	                    return "Empty room";
	                }
	            }
	            else {
	                return allMembers[0].name;
	            }
	        }
	        else {
	            // there really isn't anyone in this room...
	            return "Empty room";
	        }
	    }
	    else if (otherMembers.length === 1) {
	        return otherMembers[0].name;
	    }
	    else if (otherMembers.length === 2) {
	        return (
	            otherMembers[0].name + " and " + otherMembers[1].name
	        );
	    }
	    else {
	        return (
	            otherMembers[0].name + " and " + (otherMembers.length - 1) + " others"
	        );
	    }
	}
	
	// FIXME: copypasted from sync.js
	function reEmit(reEmitEntity, emittableEntity, eventNames) {
	    utils.forEach(eventNames, function(eventName) {
	        // setup a listener on the entity (the Room, User, etc) for this event
	        emittableEntity.on(eventName, function() {
	            // take the args from the listener and reuse them, adding the
	            // event name to the arg list so it works with .emit()
	            // Transformation Example:
	            // listener on "foo" => function(a,b) { ... }
	            // Re-emit on "thing" => thing.emit("foo", a, b)
	            var newArgs = [eventName];
	            for (var i = 0; i < arguments.length; i++) {
	                newArgs.push(arguments[i]);
	            }
	            reEmitEntity.emit.apply(reEmitEntity, newArgs);
	        });
	    });
	}
	
	/**
	 * The Room class.
	 */
	module.exports = Room;
	
	/**
	 * Fires when an event we had previously received is redacted.
	 *
	 * (Note this is *not* fired when the redaction happens before we receive the
	 * event).
	 *
	 * @event module:client~MatrixClient#"Room.redaction"
	 * @param {MatrixEvent} event The matrix event which was redacted
	 * @param {Room} room The room containing the redacted event
	 */
	
	/**
	 * Fires whenever the name of a room is updated.
	 * @event module:client~MatrixClient#"Room.name"
	 * @param {Room} room The room whose Room.name was updated.
	 * @example
	 * matrixClient.on("Room.name", function(room){
	 *   var newName = room.name;
	 * });
	 */
	
	/**
	 * Fires whenever a receipt is received for a room
	 * @event module:client~MatrixClient#"Room.receipt"
	 * @param {event} event The receipt event
	 * @param {Room} room The room whose receipts was updated.
	 * @example
	 * matrixClient.on("Room.receipt", function(event, room){
	 *   var receiptContent = event.getContent();
	 * });
	 */
	
	/**
	 * Fires whenever a room's tags are updated.
	 * @event module:client~MatrixClient#"Room.tags"
	 * @param {event} event The tags event
	 * @param {Room} room The room whose Room.tags was updated.
	 * @example
	 * matrixClient.on("Room.tags", function(event, room){
	 *   var newTags = event.getContent().tags;
	 *   if (newTags["favourite"]) showStar(room);
	 * });
	 */
	
	/**
	 * Fires whenever a room's account_data is updated.
	 * @event module:client~MatrixClient#"Room.accountData"
	 * @param {event} event The account_data event
	 * @param {Room} room The room whose account_data was updated.
	 * @example
	 * matrixClient.on("Room.accountData", function(event, room){
	 *   if (event.getType() === "m.room.colorscheme") {
	 *       applyColorScheme(event.getContents());
	 *   }
	 * });
	 */
	
	/**
	 * Fires when the status of a transmitted event is updated.
	 *
	 * <p>When an event is first transmitted, a temporary copy of the event is
	 * inserted into the timeline, with a temporary event id, and a status of
	 * 'SENDING'.
	 *
	 * <p>Once the echo comes back from the server, the content of the event
	 * (MatrixEvent.event) is replaced by the complete event from the homeserver,
	 * thus updating its event id, as well as server-generated fields such as the
	 * timestamp. Its status is set to null.
	 *
	 * <p>Once the /send request completes, if the remote echo has not already
	 * arrived, the event is updated with a new event id and the status is set to
	 * 'SENT'. The server-generated fields are of course not updated yet.
	 *
	 * <p>If the /send fails, In this case, the event's status is set to
	 * 'NOT_SENT'. If it is later resent, the process starts again, setting the
	 * status to 'SENDING'. Alternatively, the message may be cancelled, which
	 * removes the event from the room, and sets the status to 'CANCELLED'.
	 *
	 * <p>This event is raised to reflect each of the transitions above.
	 *
	 * @event module:client~MatrixClient#"Room.localEchoUpdated"
	 *
	 * @param {MatrixEvent} event The matrix event which has been updated
	 *
	 * @param {Room} room The room containing the redacted event
	 *
	 * @param {string} oldEventId The previous event id (the temporary event id,
	 *    except when updating a successfully-sent event when its echo arrives)
	 *
	 * @param {EventStatus} oldStatus The previous event status.
	 */


/***/ },
/* 190 */
/***/ function(module, exports) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module models/room-summary
	 */
	
	/**
	 * Construct a new Room Summary. A summary can be used for display on a recent
	 * list, without having to load the entire room list into memory.
	 * @constructor
	 * @param {string} roomId Required. The ID of this room.
	 * @param {Object} info Optional. The summary info. Additional keys are supported.
	 * @param {string} info.title The title of the room (e.g. <code>m.room.name</code>)
	 * @param {string} info.desc The description of the room (e.g.
	 * <code>m.room.topic</code>)
	 * @param {Number} info.numMembers The number of joined users.
	 * @param {string[]} info.aliases The list of aliases for this room.
	 * @param {Number} info.timestamp The timestamp for this room.
	 */
	function RoomSummary(roomId, info) {
	    this.roomId = roomId;
	    this.info = info;
	}
	
	/**
	 * The RoomSummary class.
	 */
	module.exports = RoomSummary;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	/**
	 * @module content-repo
	 */
	var utils = __webpack_require__(185);
	
	/** Content Repo utility functions */
	module.exports = {
	    /**
	     * Get the HTTP URL for an MXC URI.
	     * @param {string} baseUrl The base homeserver url which has a content repo.
	     * @param {string} mxc The mxc:// URI.
	     * @param {Number} width The desired width of the thumbnail.
	     * @param {Number} height The desired height of the thumbnail.
	     * @param {string} resizeMethod The thumbnail resize method to use, either
	     * "crop" or "scale".
	     * @param {Boolean} allowDirectLinks If true, return any non-mxc URLs
	     * directly. Fetching such URLs will leak information about the user to
	     * anyone they share a room with. If false, will return the emptry string
	     * for such URLs.
	     * @return {string} The complete URL to the content.
	     */
	    getHttpUriForMxc: function(baseUrl, mxc, width, height,
	                               resizeMethod, allowDirectLinks) {
	        if (typeof mxc !== "string" || !mxc) {
	            return '';
	        }
	        if (mxc.indexOf("mxc://") !== 0) {
	            if (allowDirectLinks) {
	                return mxc;
	            } else {
	                return '';
	            }
	        }
	        var serverAndMediaId = mxc.slice(6); // strips mxc://
	        var prefix = "/_matrix/media/v1/download/";
	        var params = {};
	
	        if (width) {
	            params.width = width;
	        }
	        if (height) {
	            params.height = height;
	        }
	        if (resizeMethod) {
	            params.method = resizeMethod;
	        }
	        if (utils.keys(params).length > 0) {
	            // these are thumbnailing params so they probably want the
	            // thumbnailing API...
	            prefix = "/_matrix/media/v1/thumbnail/";
	        }
	
	        var fragmentOffset = serverAndMediaId.indexOf("#"),
	            fragment = "";
	        if (fragmentOffset >= 0) {
	            fragment = serverAndMediaId.substr(fragmentOffset);
	            serverAndMediaId = serverAndMediaId.substr(0, fragmentOffset);
	        }
	        return baseUrl + prefix + serverAndMediaId +
	            (utils.keys(params).length === 0 ? "" :
	            ("?" + utils.encodeParams(params))) + fragment;
	    },
	
	    /**
	     * Get an identicon URL from an arbitrary string.
	     * @param {string} baseUrl The base homeserver url which has a content repo.
	     * @param {string} identiconString The string to create an identicon for.
	     * @param {Number} width The desired width of the image in pixels. Default: 96.
	     * @param {Number} height The desired height of the image in pixels. Default: 96.
	     * @return {string} The complete URL to the identicon.
	     */
	    getIdenticonUri: function(baseUrl, identiconString, width, height) {
	        if (!identiconString) {
	            return null;
	        }
	        if (!width) { width = 96; }
	        if (!height) { height = 96; }
	        var params = {
	            width: width,
	            height: height
	        };
	
	        var path = utils.encodeUri("/_matrix/media/v1/identicon/$ident", {
	            $ident: identiconString
	        });
	        return baseUrl + path +
	            (utils.keys(params).length === 0 ? "" :
	                ("?" + utils.encodeParams(params)));
	    }
	};


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * @module models/event-timeline
	 */
	
	var RoomState = __webpack_require__(193);
	var utils = __webpack_require__(185);
	var MatrixEvent = __webpack_require__(183).MatrixEvent;
	
	/**
	 * Construct a new EventTimeline
	 *
	 * <p>An EventTimeline represents a contiguous sequence of events in a room.
	 *
	 * <p>As well as keeping track of the events themselves, it stores the state of
	 * the room at the beginning and end of the timeline, and pagination tokens for
	 * going backwards and forwards in the timeline.
	 *
	 * <p>In order that clients can meaningfully maintain an index into a timeline,
	 * the EventTimeline object tracks a 'baseIndex'. This starts at zero, but is
	 * incremented when events are prepended to the timeline. The index of an event
	 * relative to baseIndex therefore remains constant.
	 *
	 * <p>Once a timeline joins up with its neighbour, they are linked together into a
	 * doubly-linked list.
	 *
	 * @param {EventTimelineSet} eventTimelineSet the set of timelines this is part of
	 * @constructor
	 */
	function EventTimeline(eventTimelineSet) {
	    this._eventTimelineSet = eventTimelineSet;
	    this._roomId = eventTimelineSet.room ? eventTimelineSet.room.roomId : null;
	    this._events = [];
	    this._baseIndex = 0;
	    this._startState = new RoomState(this._roomId);
	    this._startState.paginationToken = null;
	    this._endState = new RoomState(this._roomId);
	    this._endState.paginationToken = null;
	
	    this._prevTimeline = null;
	    this._nextTimeline = null;
	
	    // this is used by client.js
	    this._paginationRequests = {'b': null, 'f': null};
	
	    this._name = this._roomId + ":" + new Date().toISOString();
	}
	
	/**
	 * Symbolic constant for methods which take a 'direction' argument:
	 * refers to the start of the timeline, or backwards in time.
	 */
	EventTimeline.BACKWARDS = "b";
	
	/**
	 * Symbolic constant for methods which take a 'direction' argument:
	 * refers to the end of the timeline, or forwards in time.
	 */
	EventTimeline.FORWARDS = "f";
	
	/**
	 * Initialise the start and end state with the given events
	 *
	 * <p>This can only be called before any events are added.
	 *
	 * @param {MatrixEvent[]} stateEvents list of state events to initialise the
	 * state with.
	 * @throws {Error} if an attempt is made to call this after addEvent is called.
	 */
	EventTimeline.prototype.initialiseState = function(stateEvents) {
	    if (this._events.length > 0) {
	        throw new Error("Cannot initialise state after events are added");
	    }
	
	    // we deep-copy the events here, in case they get changed later - we don't
	    // want changes to the start state leaking through to the end state.
	    var oldStateEvents = utils.map(
	        utils.deepCopy(
	            stateEvents.map(function(mxEvent) { return mxEvent.event; })
	        ), function(ev) { return new MatrixEvent(ev); });
	
	    this._startState.setStateEvents(oldStateEvents);
	    this._endState.setStateEvents(stateEvents);
	};
	
	/**
	 * Get the ID of the room for this timeline
	 * @return {string} room ID
	 */
	EventTimeline.prototype.getRoomId = function() {
	    return this._roomId;
	};
	
	/**
	 * Get the filter for this timeline's timelineSet (if any)
	 * @return {Filter} filter
	 */
	EventTimeline.prototype.getFilter = function() {
	    return this._eventTimelineSet.getFilter();
	};
	
	/**
	 * Get the timelineSet for this timeline
	 * @return {EventTimelineSet} timelineSet
	 */
	EventTimeline.prototype.getTimelineSet = function() {
	    return this._eventTimelineSet;
	};
	
	/**
	 * Get the base index.
	 *
	 * <p>This is an index which is incremented when events are prepended to the
	 * timeline. An individual event therefore stays at the same index in the array
	 * relative to the base index (although note that a given event's index may
	 * well be less than the base index, thus giving that event a negative relative
	 * index).
	 *
	 * @return {number}
	 */
	EventTimeline.prototype.getBaseIndex = function() {
	    return this._baseIndex;
	};
	
	/**
	 * Get the list of events in this context
	 *
	 * @return {MatrixEvent[]} An array of MatrixEvents
	 */
	EventTimeline.prototype.getEvents = function() {
	    return this._events;
	};
	
	/**
	 * Get the room state at the start/end of the timeline
	 *
	 * @param {string} direction   EventTimeline.BACKWARDS to get the state at the
	 *   start of the timeline; EventTimeline.FORWARDS to get the state at the end
	 *   of the timeline.
	 *
	 * @return {RoomState} state at the start/end of the timeline
	 */
	EventTimeline.prototype.getState = function(direction) {
	    if (direction == EventTimeline.BACKWARDS) {
	        return this._startState;
	    } else if (direction == EventTimeline.FORWARDS) {
	        return this._endState;
	    } else {
	        throw new Error("Invalid direction '" + direction + "'");
	    }
	};
	
	/**
	 * Get a pagination token
	 *
	 * @param {string} direction   EventTimeline.BACKWARDS to get the pagination
	 *   token for going backwards in time; EventTimeline.FORWARDS to get the
	 *   pagination token for going forwards in time.
	 *
	 * @return {?string} pagination token
	 */
	EventTimeline.prototype.getPaginationToken = function(direction) {
	    return this.getState(direction).paginationToken;
	};
	
	/**
	 * Set a pagination token
	 *
	 * @param {?string} token       pagination token
	 *
	 * @param {string} direction    EventTimeline.BACKWARDS to set the pagination
	 *   token for going backwards in time; EventTimeline.FORWARDS to set the
	 *   pagination token for going forwards in time.
	 */
	EventTimeline.prototype.setPaginationToken = function(token, direction) {
	    this.getState(direction).paginationToken = token;
	};
	
	/**
	 * Get the next timeline in the series
	 *
	 * @param {string} direction EventTimeline.BACKWARDS to get the previous
	 *   timeline; EventTimeline.FORWARDS to get the next timeline.
	 *
	 * @return {?EventTimeline} previous or following timeline, if they have been
	 * joined up.
	 */
	EventTimeline.prototype.getNeighbouringTimeline = function(direction) {
	    if (direction == EventTimeline.BACKWARDS) {
	        return this._prevTimeline;
	    } else if (direction == EventTimeline.FORWARDS) {
	        return this._nextTimeline;
	    } else {
	        throw new Error("Invalid direction '" + direction + "'");
	    }
	};
	
	/**
	 * Set the next timeline in the series
	 *
	 * @param {EventTimeline} neighbour previous/following timeline
	 *
	 * @param {string} direction EventTimeline.BACKWARDS to set the previous
	 *   timeline; EventTimeline.FORWARDS to set the next timeline.
	 *
	 * @throws {Error} if an attempt is made to set the neighbouring timeline when
	 * it is already set.
	 */
	EventTimeline.prototype.setNeighbouringTimeline = function(neighbour, direction) {
	    if (this.getNeighbouringTimeline(direction)) {
	        throw new Error("timeline already has a neighbouring timeline - " +
	                        "cannot reset neighbour");
	    }
	
	    if (direction == EventTimeline.BACKWARDS) {
	        this._prevTimeline = neighbour;
	    } else if (direction == EventTimeline.FORWARDS) {
	        this._nextTimeline = neighbour;
	    } else {
	        throw new Error("Invalid direction '" + direction + "'");
	    }
	
	    // make sure we don't try to paginate this timeline
	    this.setPaginationToken(null, direction);
	};
	
	/**
	 * Add a new event to the timeline, and update the state
	 *
	 * @param {MatrixEvent} event   new event
	 * @param {boolean}  atStart     true to insert new event at the start
	 */
	EventTimeline.prototype.addEvent = function(event, atStart) {
	    var stateContext = atStart ? this._startState : this._endState;
	
	    // only call setEventMetadata on the unfiltered timelineSets
	    var timelineSet = this.getTimelineSet();
	    if (timelineSet.room &&
	        timelineSet.room.getUnfilteredTimelineSet() === timelineSet)
	    {
	        EventTimeline.setEventMetadata(event, stateContext, atStart);
	
	        // modify state
	        if (event.isState()) {
	            stateContext.setStateEvents([event]);
	            // it is possible that the act of setting the state event means we
	            // can set more metadata (specifically sender/target props), so try
	            // it again if the prop wasn't previously set. It may also mean that
	            // the sender/target is updated (if the event set was a room member event)
	            // so we want to use the *updated* member (new avatar/name) instead.
	            //
	            // However, we do NOT want to do this on member events if we're going
	            // back in time, else we'll set the .sender value for BEFORE the given
	            // member event, whereas we want to set the .sender value for the ACTUAL
	            // member event itself.
	            if (!event.sender || (event.getType() === "m.room.member" && !atStart)) {
	                EventTimeline.setEventMetadata(event, stateContext, atStart);
	            }
	        }
	    }
	
	    var insertIndex;
	
	    if (atStart) {
	        insertIndex = 0;
	    } else {
	        insertIndex = this._events.length;
	    }
	
	    this._events.splice(insertIndex, 0, event); // insert element
	    if (atStart) {
	        this._baseIndex++;
	    }
	};
	
	/**
	 * Static helper method to set sender and target properties
	 *
	 * @param {MatrixEvent} event   the event whose metadata is to be set
	 * @param {RoomState} stateContext  the room state to be queried
	 * @param {bool} toStartOfTimeline  if true the event's forwardLooking flag is set false
	 */
	EventTimeline.setEventMetadata = function(event, stateContext, toStartOfTimeline) {
	    // set sender and target properties
	    event.sender = stateContext.getSentinelMember(
	        event.getSender()
	    );
	    if (event.getType() === "m.room.member") {
	        event.target = stateContext.getSentinelMember(
	            event.getStateKey()
	        );
	    }
	    if (event.isState()) {
	        // room state has no concept of 'old' or 'current', but we want the
	        // room state to regress back to previous values if toStartOfTimeline
	        // is set, which means inspecting prev_content if it exists. This
	        // is done by toggling the forwardLooking flag.
	        if (toStartOfTimeline) {
	            event.forwardLooking = false;
	        }
	    }
	};
	
	/**
	 * Remove an event from the timeline
	 *
	 * @param {string} eventId  ID of event to be removed
	 * @return {?MatrixEvent} removed event, or null if not found
	 */
	EventTimeline.prototype.removeEvent = function(eventId) {
	    for (var i = this._events.length - 1; i >= 0; i--) {
	        var ev = this._events[i];
	        if (ev.getId() == eventId) {
	            this._events.splice(i, 1);
	            if (i < this._baseIndex) {
	                this._baseIndex--;
	            }
	            return ev;
	        }
	    }
	    return null;
	};
	
	/**
	 * Return a string to identify this timeline, for debugging
	 *
	 * @return {string} name for this timeline
	 */
	EventTimeline.prototype.toString = function() {
	    return this._name;
	};
	
	
	/**
	 * The EventTimeline class
	 */
	module.exports = EventTimeline;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module models/room-state
	 */
	var EventEmitter = __webpack_require__(187).EventEmitter;
	
	var utils = __webpack_require__(185);
	var RoomMember = __webpack_require__(194);
	
	/**
	 * Construct room state.
	 * @constructor
	 * @param {?string} roomId Optional. The ID of the room which has this state.
	 * If none is specified it just tracks paginationTokens, useful for notifTimelineSet
	 * @prop {Object.<string, RoomMember>} members The room member dictionary, keyed
	 * on the user's ID.
	 * @prop {Object.<string, Object.<string, MatrixEvent>>} events The state
	 * events dictionary, keyed on the event type and then the state_key value.
	 * @prop {string} paginationToken The pagination token for this state.
	 */
	function RoomState(roomId) {
	    this.roomId = roomId;
	    this.members = {
	        // userId: RoomMember
	    };
	    this.events = {
	        // eventType: { stateKey: MatrixEvent }
	    };
	    this.paginationToken = null;
	
	    this._sentinels = {
	        // userId: RoomMember
	    };
	    this._updateModifiedTime();
	    this._displayNameToUserIds = {};
	    this._userIdsToDisplayNames = {};
	    this._tokenToInvite = {}; // 3pid invite state_key to m.room.member invite
	}
	utils.inherits(RoomState, EventEmitter);
	
	/**
	 * Get all RoomMembers in this room.
	 * @return {Array<RoomMember>} A list of RoomMembers.
	 */
	RoomState.prototype.getMembers = function() {
	    return utils.values(this.members);
	};
	
	/**
	 * Get a room member by their user ID.
	 * @param {string} userId The room member's user ID.
	 * @return {RoomMember} The member or null if they do not exist.
	 */
	RoomState.prototype.getMember = function(userId) {
	    return this.members[userId] || null;
	};
	
	/**
	 * Get a room member whose properties will not change with this room state. You
	 * typically want this if you want to attach a RoomMember to a MatrixEvent which
	 * may no longer be represented correctly by Room.currentState or Room.oldState.
	 * The term 'sentinel' refers to the fact that this RoomMember is an unchanging
	 * guardian for state at this particular point in time.
	 * @param {string} userId The room member's user ID.
	 * @return {RoomMember} The member or null if they do not exist.
	 */
	RoomState.prototype.getSentinelMember = function(userId) {
	    return this._sentinels[userId] || null;
	};
	
	/**
	 * Get state events from the state of the room.
	 * @param {string} eventType The event type of the state event.
	 * @param {string} stateKey Optional. The state_key of the state event. If
	 * this is <code>undefined</code> then all matching state events will be
	 * returned.
	 * @return {MatrixEvent[]|MatrixEvent} A list of events if state_key was
	 * <code>undefined</code>, else a single event (or null if no match found).
	 */
	RoomState.prototype.getStateEvents = function(eventType, stateKey) {
	    if (!this.events[eventType]) {
	        // no match
	        return stateKey === undefined ? [] : null;
	    }
	    if (stateKey === undefined) { // return all values
	        return utils.values(this.events[eventType]);
	    }
	    var event = this.events[eventType][stateKey];
	    return event ? event : null;
	};
	
	/**
	 * Add an array of one or more state MatrixEvents, overwriting
	 * any existing state with the same {type, stateKey} tuple. Will fire
	 * "RoomState.events" for every event added. May fire "RoomState.members"
	 * if there are <code>m.room.member</code> events.
	 * @param {MatrixEvent[]} stateEvents a list of state events for this room.
	 * @fires module:client~MatrixClient#event:"RoomState.members"
	 * @fires module:client~MatrixClient#event:"RoomState.newMember"
	 * @fires module:client~MatrixClient#event:"RoomState.events"
	 */
	RoomState.prototype.setStateEvents = function(stateEvents) {
	    var self = this;
	    this._updateModifiedTime();
	
	    // update the core event dict
	    utils.forEach(stateEvents, function(event) {
	        if (event.getRoomId() !== self.roomId) { return; }
	        if (!event.isState()) { return; }
	
	        if (self.events[event.getType()] === undefined) {
	            self.events[event.getType()] = {};
	        }
	        self.events[event.getType()][event.getStateKey()] = event;
	        if (event.getType() === "m.room.member") {
	            _updateDisplayNameCache(
	                self, event.getStateKey(), event.getContent().displayname
	            );
	            _updateThirdPartyTokenCache(self, event);
	        }
	        self.emit("RoomState.events", event, self);
	    });
	
	    // update higher level data structures. This needs to be done AFTER the
	    // core event dict as these structures may depend on other state events in
	    // the given array (e.g. disambiguating display names in one go to do both
	    // clashing names rather than progressively which only catches 1 of them).
	    utils.forEach(stateEvents, function(event) {
	        if (event.getRoomId() !== self.roomId) { return; }
	        if (!event.isState()) { return; }
	
	        if (event.getType() === "m.room.member") {
	            var userId = event.getStateKey();
	
	            // leave events apparently elide the displayname or avatar_url,
	            // so let's fake one up so that we don't leak user ids
	            // into the timeline
	            if (event.getContent().membership === "leave" ||
	                event.getContent().membership === "ban")
	            {
	                event.getContent().avatar_url =
	                    event.getContent().avatar_url ||
	                    event.getPrevContent().avatar_url;
	                event.getContent().displayname =
	                    event.getContent().displayname ||
	                    event.getPrevContent().displayname;
	            }
	
	            var member = self.members[userId];
	            if (!member) {
	                member = new RoomMember(event.getRoomId(), userId);
	                self.emit("RoomState.newMember", event, self, member);
	            }
	            // Add a new sentinel for this change. We apply the same
	            // operations to both sentinel and member rather than deep copying
	            // so we don't make assumptions about the properties of RoomMember
	            // (e.g. and manage to break it because deep copying doesn't do
	            // everything).
	            var sentinel = new RoomMember(event.getRoomId(), userId);
	            utils.forEach([member, sentinel], function(roomMember) {
	                roomMember.setMembershipEvent(event, self);
	                // this member may have a power level already, so set it.
	                var pwrLvlEvent = self.getStateEvents("m.room.power_levels", "");
	                if (pwrLvlEvent) {
	                    roomMember.setPowerLevelEvent(pwrLvlEvent);
	                }
	            });
	
	            self._sentinels[userId] = sentinel;
	            self.members[userId] = member;
	            self.emit("RoomState.members", event, self, member);
	        }
	        else if (event.getType() === "m.room.power_levels") {
	            var members = utils.values(self.members);
	            utils.forEach(members, function(member) {
	                member.setPowerLevelEvent(event);
	                self.emit("RoomState.members", event, self, member);
	            });
	        }
	    });
	};
	
	/**
	 * Set the current typing event for this room.
	 * @param {MatrixEvent} event The typing event
	 */
	RoomState.prototype.setTypingEvent = function(event) {
	    utils.forEach(utils.values(this.members), function(member) {
	        member.setTypingEvent(event);
	    });
	};
	
	/**
	 * Get the m.room.member event which has the given third party invite token.
	 *
	 * @param {string} token The token
	 * @return {?MatrixEvent} The m.room.member event or null
	 */
	RoomState.prototype.getInviteForThreePidToken = function(token) {
	    return this._tokenToInvite[token] || null;
	};
	
	/**
	 * Update the last modified time to the current time.
	 */
	RoomState.prototype._updateModifiedTime = function() {
	    this._modified = Date.now();
	};
	
	/**
	 * Get the timestamp when this room state was last updated. This timestamp is
	 * updated when this object has received new state events.
	 * @return {number} The timestamp
	 */
	RoomState.prototype.getLastModifiedTime = function() {
	    return this._modified;
	};
	
	/**
	 * Get user IDs with the specified display name.
	 * @param {string} displayName The display name to get user IDs from.
	 * @return {string[]} An array of user IDs or an empty array.
	 */
	RoomState.prototype.getUserIdsWithDisplayName = function(displayName) {
	    return this._displayNameToUserIds[displayName] || [];
	};
	
	/**
	 * Short-form for maySendEvent('m.room.message', userId)
	 * @param {string} userId The user ID of the user to test permission for
	 * @return {boolean} true if the given user ID should be permitted to send
	 *                   message events into the given room.
	 */
	RoomState.prototype.maySendMessage = function(userId) {
	    return this._maySendEventOfType('m.room.message', userId, false);
	};
	
	/**
	 * Returns true if the given user ID has permission to send a normal
	 * event of type `eventType` into this room.
	 * @param {string} type The type of event to test
	 * @param {string} userId The user ID of the user to test permission for
	 * @return {boolean} true if the given user ID should be permitted to send
	 *                        the given type of event into this room,
	 *                        according to the room's state.
	 */
	RoomState.prototype.maySendEvent = function(eventType, userId) {
	    return this._maySendEventOfType(eventType, userId, false);
	};
	
	
	/**
	 * Returns true if the given MatrixClient has permission to send a state
	 * event of type `stateEventType` into this room.
	 * @param {string} type The type of state events to test
	 * @param {MatrixClient}  The client to test permission for
	 * @return {boolean} true if the given client should be permitted to send
	 *                        the given type of state event into this room,
	 *                        according to the room's state.
	 */
	RoomState.prototype.mayClientSendStateEvent = function(stateEventType, cli) {
	    if (cli.isGuest()) {
	        return false;
	    }
	    return this.maySendStateEvent(stateEventType, cli.credentials.userId);
	};
	
	/**
	 * Returns true if the given user ID has permission to send a state
	 * event of type `stateEventType` into this room.
	 * @param {string} type The type of state events to test
	 * @param {string} userId The user ID of the user to test permission for
	 * @return {boolean} true if the given user ID should be permitted to send
	 *                        the given type of state event into this room,
	 *                        according to the room's state.
	 */
	RoomState.prototype.maySendStateEvent = function(stateEventType, userId) {
	    return this._maySendEventOfType(stateEventType, userId, true);
	};
	
	/**
	 * Returns true if the given user ID has permission to send a normal or state
	 * event of type `eventType` into this room.
	 * @param {string} type The type of event to test
	 * @param {string} userId The user ID of the user to test permission for
	 * @param {boolean} state If true, tests if the user may send a state
	                          event of this type. Otherwise tests whether
	                          they may send a regular event.
	 * @return {boolean} true if the given user ID should be permitted to send
	 *                        the given type of event into this room,
	 *                        according to the room's state.
	 */
	RoomState.prototype._maySendEventOfType = function(eventType, userId, state) {
	    var member = this.getMember(userId);
	    if (!member || member.membership == 'leave') { return false; }
	
	    var power_levels_event = this.getStateEvents('m.room.power_levels', '');
	
	    var power_levels;
	    var events_levels = {};
	
	    var default_user_level = 0;
	    var user_levels = [];
	
	    var state_default = 0;
	    var events_default = 0;
	    if (power_levels_event) {
	        power_levels = power_levels_event.getContent();
	        events_levels = power_levels.events || {};
	
	        default_user_level = parseInt(power_levels.users_default || 0);
	        user_levels = power_levels.users || {};
	
	        if (power_levels.state_default !== undefined) {
	            state_default = power_levels.state_default;
	        } else {
	            state_default = 50;
	        }
	        if (power_levels.events_default !== undefined) {
	            events_default = power_levels.events_default;
	        }
	    }
	
	    var required_level = state ? state_default : events_default;
	    if (events_levels[eventType] !== undefined) {
	        required_level = events_levels[eventType];
	    }
	    return member.powerLevel >= required_level;
	};
	
	/**
	 * The RoomState class.
	 */
	module.exports = RoomState;
	
	
	function _updateThirdPartyTokenCache(roomState, memberEvent) {
	    if (!memberEvent.getContent().third_party_invite) {
	        return;
	    }
	    var token = (memberEvent.getContent().third_party_invite.signed || {}).token;
	    if (!token) {
	        return;
	    }
	    var threePidInvite = roomState.getStateEvents(
	        "m.room.third_party_invite", token
	    );
	    if (!threePidInvite) {
	        return;
	    }
	    roomState._tokenToInvite[token] = memberEvent;
	}
	
	function _updateDisplayNameCache(roomState, userId, displayName) {
	    var oldName = roomState._userIdsToDisplayNames[userId];
	    delete roomState._userIdsToDisplayNames[userId];
	    if (oldName) {
	        // Remove the old name from the cache.
	        // We clobber the user_id > name lookup but the name -> [user_id] lookup
	        // means we need to remove that user ID from that array rather than nuking
	        // the lot.
	        var existingUserIds = roomState._displayNameToUserIds[oldName] || [];
	        for (var i = 0; i < existingUserIds.length; i++) {
	            if (existingUserIds[i] === userId) {
	                // remove this user ID from this array
	                existingUserIds.splice(i, 1);
	                i--;
	            }
	        }
	        roomState._displayNameToUserIds[oldName] = existingUserIds;
	    }
	
	    roomState._userIdsToDisplayNames[userId] = displayName;
	    if (!roomState._displayNameToUserIds[displayName]) {
	        roomState._displayNameToUserIds[displayName] = [];
	    }
	    roomState._displayNameToUserIds[displayName].push(userId);
	}
	
	/**
	 * Fires whenever the event dictionary in room state is updated.
	 * @event module:client~MatrixClient#"RoomState.events"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {RoomState} state The room state whose RoomState.events dictionary
	 * was updated.
	 * @example
	 * matrixClient.on("RoomState.events", function(event, state){
	 *   var newStateEvent = event;
	 * });
	 */
	
	/**
	 * Fires whenever a member in the members dictionary is updated in any way.
	 * @event module:client~MatrixClient#"RoomState.members"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {RoomState} state The room state whose RoomState.members dictionary
	 * was updated.
	 * @param {RoomMember} member The room member that was updated.
	 * @example
	 * matrixClient.on("RoomState.members", function(event, state, member){
	 *   var newMembershipState = member.membership;
	 * });
	 */
	
	 /**
	 * Fires whenever a member is added to the members dictionary. The RoomMember
	 * will not be fully populated yet (e.g. no membership state).
	 * @event module:client~MatrixClient#"RoomState.newMember"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {RoomState} state The room state whose RoomState.members dictionary
	 * was updated with a new entry.
	 * @param {RoomMember} member The room member that was added.
	 * @example
	 * matrixClient.on("RoomState.newMember", function(event, state, member){
	 *   // add event listeners on 'member'
	 * });
	 */


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module models/room-member
	 */
	var EventEmitter = __webpack_require__(187).EventEmitter;
	var ContentRepo = __webpack_require__(191);
	
	var utils = __webpack_require__(185);
	
	/**
	 * Construct a new room member.
	 *
	 * @constructor
	 * @alias module:models/room-member
	 *
	 * @param {string} roomId The room ID of the member.
	 * @param {string} userId The user ID of the member.
	 * @prop {string} roomId The room ID for this member.
	 * @prop {string} userId The user ID of this member.
	 * @prop {boolean} typing True if the room member is currently typing.
	 * @prop {string} name The human-readable name for this room member.
	 * @prop {Number} powerLevel The power level for this room member.
	 * @prop {Number} powerLevelNorm The normalised power level (0-100) for this
	 * room member.
	 * @prop {User} user The User object for this room member, if one exists.
	 * @prop {string} membership The membership state for this room member e.g. 'join'.
	 * @prop {Object} events The events describing this RoomMember.
	 * @prop {MatrixEvent} events.member The m.room.member event for this RoomMember.
	 */
	function RoomMember(roomId, userId) {
	    this.roomId = roomId;
	    this.userId = userId;
	    this.typing = false;
	    this.name = userId;
	    this.powerLevel = 0;
	    this.powerLevelNorm = 0;
	    this.user = null;
	    this.membership = null;
	    this.events = {
	        member: null
	    };
	    this._updateModifiedTime();
	}
	utils.inherits(RoomMember, EventEmitter);
	
	/**
	 * Update this room member's membership event. May fire "RoomMember.name" if
	 * this event updates this member's name.
	 * @param {MatrixEvent} event The <code>m.room.member</code> event
	 * @param {RoomState} roomState Optional. The room state to take into account
	 * when calculating (e.g. for disambiguating users with the same name).
	 * @fires module:client~MatrixClient#event:"RoomMember.name"
	 * @fires module:client~MatrixClient#event:"RoomMember.membership"
	 */
	RoomMember.prototype.setMembershipEvent = function(event, roomState) {
	    if (event.getType() !== "m.room.member") {
	        return;
	    }
	    this.events.member = event;
	
	    var oldMembership = this.membership;
	    this.membership = event.getDirectionalContent().membership;
	
	    var oldName = this.name;
	    this.name = calculateDisplayName(this, event, roomState);
	    if (oldMembership !== this.membership) {
	        this._updateModifiedTime();
	        this.emit("RoomMember.membership", event, this, oldMembership);
	    }
	    if (oldName !== this.name) {
	        this._updateModifiedTime();
	        this.emit("RoomMember.name", event, this, oldName);
	    }
	};
	
	/**
	 * Update this room member's power level event. May fire
	 * "RoomMember.powerLevel" if this event updates this member's power levels.
	 * @param {MatrixEvent} powerLevelEvent The <code>m.room.power_levels</code>
	 * event
	 * @fires module:client~MatrixClient#event:"RoomMember.powerLevel"
	 */
	RoomMember.prototype.setPowerLevelEvent = function(powerLevelEvent) {
	    if (powerLevelEvent.getType() !== "m.room.power_levels") {
	        return;
	    }
	    var maxLevel = powerLevelEvent.getContent().users_default || 0;
	    utils.forEach(utils.values(powerLevelEvent.getContent().users), function(lvl) {
	        maxLevel = Math.max(maxLevel, lvl);
	    });
	    var oldPowerLevel = this.powerLevel;
	    var oldPowerLevelNorm = this.powerLevelNorm;
	
	    if (powerLevelEvent.getContent().users[this.userId] !== undefined) {
	        this.powerLevel = powerLevelEvent.getContent().users[this.userId];
	    } else if (powerLevelEvent.getContent().users_default !== undefined) {
	        this.powerLevel = powerLevelEvent.getContent().users_default;
	    } else {
	        this.powerLevel = 0;
	    }
	    this.powerLevelNorm = 0;
	    if (maxLevel > 0) {
	        this.powerLevelNorm = (this.powerLevel * 100) / maxLevel;
	    }
	
	    // emit for changes in powerLevelNorm as well (since the app will need to
	    // redraw everyone's level if the max has changed)
	    if (oldPowerLevel !== this.powerLevel || oldPowerLevelNorm !== this.powerLevelNorm) {
	        this._updateModifiedTime();
	        this.emit("RoomMember.powerLevel", powerLevelEvent, this);
	    }
	};
	
	/**
	 * Update this room member's typing event. May fire "RoomMember.typing" if
	 * this event changes this member's typing state.
	 * @param {MatrixEvent} event The typing event
	 * @fires module:client~MatrixClient#event:"RoomMember.typing"
	 */
	RoomMember.prototype.setTypingEvent = function(event) {
	    if (event.getType() !== "m.typing") {
	        return;
	    }
	    var oldTyping = this.typing;
	    this.typing = false;
	    var typingList = event.getContent().user_ids;
	    if (!utils.isArray(typingList)) {
	        // malformed event :/ bail early. TODO: whine?
	        return;
	    }
	    if (typingList.indexOf(this.userId) !== -1) {
	        this.typing = true;
	    }
	    if (oldTyping !== this.typing) {
	        this._updateModifiedTime();
	        this.emit("RoomMember.typing", event, this);
	    }
	};
	
	/**
	 * Update the last modified time to the current time.
	 */
	RoomMember.prototype._updateModifiedTime = function() {
	    this._modified = Date.now();
	};
	
	/**
	 * Get the timestamp when this RoomMember was last updated. This timestamp is
	 * updated when properties on this RoomMember are updated.
	 * It is updated <i>before</i> firing events.
	 * @return {number} The timestamp
	 */
	RoomMember.prototype.getLastModifiedTime = function() {
	    return this._modified;
	};
	
	/**
	 * Get the avatar URL for a room member.
	 * @param {string} baseUrl The base homeserver URL See
	 * {@link module:client~MatrixClient#getHomeserverUrl}.
	 * @param {Number} width The desired width of the thumbnail.
	 * @param {Number} height The desired height of the thumbnail.
	 * @param {string} resizeMethod The thumbnail resize method to use, either
	 * "crop" or "scale".
	 * @param {Boolean} allowDefault (optional) Passing false causes this method to
	 * return null if the user has no avatar image. Otherwise, a default image URL
	 * will be returned. Default: true.
	 * @param {Boolean} allowDirectLinks (optional) If true, the avatar URL will be
	 * returned even if it is a direct hyperlink rather than a matrix content URL.
	 * If false, any non-matrix content URLs will be ignored. Setting this option to
	 * true will expose URLs that, if fetched, will leak information about the user
	 * to anyone who they share a room with.
	 * @return {?string} the avatar URL or null.
	 */
	RoomMember.prototype.getAvatarUrl =
	        function(baseUrl, width, height, resizeMethod, allowDefault, allowDirectLinks) {
	    if (allowDefault === undefined) { allowDefault = true; }
	    if (!this.events.member && !allowDefault) {
	        return null;
	    }
	    var rawUrl = this.events.member ? this.events.member.getContent().avatar_url : null;
	    var httpUrl = ContentRepo.getHttpUriForMxc(
	        baseUrl, rawUrl, width, height, resizeMethod, allowDirectLinks
	    );
	    if (httpUrl) {
	        return httpUrl;
	    }
	    else if (allowDefault) {
	        return ContentRepo.getIdenticonUri(
	            baseUrl, this.userId, width, height
	        );
	    }
	    return null;
	};
	
	function calculateDisplayName(member, event, roomState) {
	    var displayName = event.getDirectionalContent().displayname;
	    var selfUserId = member.userId;
	
	    if (!displayName) {
	        return selfUserId;
	    }
	
	    if (!roomState) {
	        return displayName;
	    }
	
	    var userIds = roomState.getUserIdsWithDisplayName(displayName);
	    var otherUsers = userIds.filter(function(u) {
	        return u !== selfUserId;
	    });
	    if (otherUsers.length > 0) {
	        return displayName + " (" + selfUserId + ")";
	    }
	    return displayName;
	}
	
	/**
	 * The RoomMember class.
	 */
	module.exports = RoomMember;
	
	/**
	 * Fires whenever any room member's name changes.
	 * @event module:client~MatrixClient#"RoomMember.name"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {RoomMember} member The member whose RoomMember.name changed.
	 * @param {string?} oldName The previous name. Null if the member didn't have a
	 *    name previously.
	 * @example
	 * matrixClient.on("RoomMember.name", function(event, member){
	 *   var newName = member.name;
	 * });
	 */
	
	/**
	 * Fires whenever any room member's membership state changes.
	 * @event module:client~MatrixClient#"RoomMember.membership"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {RoomMember} member The member whose RoomMember.membership changed.
	 * @param {string?} oldMembership The previous membership state. Null if it's a
	 *    new member.
	 * @example
	 * matrixClient.on("RoomMember.membership", function(event, member, oldMembership){
	 *   var newState = member.membership;
	 * });
	 */
	
	/**
	 * Fires whenever any room member's typing state changes.
	 * @event module:client~MatrixClient#"RoomMember.typing"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {RoomMember} member The member whose RoomMember.typing changed.
	 * @example
	 * matrixClient.on("RoomMember.typing", function(event, member){
	 *   var isTyping = member.typing;
	 * });
	 */
	
	/**
	 * Fires whenever any room member's power level changes.
	 * @event module:client~MatrixClient#"RoomMember.powerLevel"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {RoomMember} member The member whose RoomMember.powerLevel changed.
	 * @example
	 * matrixClient.on("RoomMember.powerLevel", function(event, member){
	 *   var newPowerLevel = member.powerLevel;
	 *   var newNormPowerLevel = member.powerLevelNorm;
	 * });
	 */


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module models/event-timeline-set
	 */
	var EventEmitter = __webpack_require__(187).EventEmitter;
	var utils = __webpack_require__(185);
	var EventTimeline = __webpack_require__(192);
	
	// var DEBUG = false;
	var DEBUG = true;
	
	if (DEBUG) {
	    // using bind means that we get to keep useful line numbers in the console
	    var debuglog = console.log.bind(console);
	} else {
	    var debuglog = function() {};
	}
	
	/**
	 * Construct a set of EventTimeline objects, typically on behalf of a given
	 * room.  A room may have multiple EventTimelineSets for different levels
	 * of filtering.  The global notification list is also an EventTimelineSet, but
	 * lacks a room.
	 *
	 * <p>This is an ordered sequence of timelines, which may or may not
	 * be continuous. Each timeline lists a series of events, as well as tracking
	 * the room state at the start and the end of the timeline (if appropriate).
	 * It also tracks forward and backward pagination tokens, as well as containing
	 * links to the next timeline in the sequence.
	 *
	 * <p>There is one special timeline - the 'live' timeline, which represents the
	 * timeline to which events are being added in real-time as they are received
	 * from the /sync API. Note that you should not retain references to this
	 * timeline - even if it is the current timeline right now, it may not remain
	 * so if the server gives us a timeline gap in /sync.
	 *
	 * <p>In order that we can find events from their ids later, we also maintain a
	 * map from event_id to timeline and index.
	 *
	 * @constructor
	 * @param {?Room} room      the optional room for this timelineSet
	 * @param {Object} opts     hash of options inherited from Room.
	 *      opts.timelineSupport gives whether timeline support is enabled
	 *      opts.filter is the filter object, if any, for this timelineSet.
	 */
	function EventTimelineSet(room, opts) {
	    this.room = room;
	
	    this._timelineSupport = Boolean(opts.timelineSupport);
	    this._liveTimeline = new EventTimeline(this);
	
	    // just a list - *not* ordered.
	    this._timelines = [this._liveTimeline];
	    this._eventIdToTimeline = {};
	
	    this._filter = opts.filter || null;
	}
	utils.inherits(EventTimelineSet, EventEmitter);
	
	/**
	 * Get the filter object this timeline set is filtered on, if any
	 * @return {?Filter} the optional filter for this timelineSet
	 */
	EventTimelineSet.prototype.getFilter = function() {
	    return this._filter;
	};
	
	/**
	 * Set the filter object this timeline set is filtered on
	 * (passed to the server when paginating via /messages).
	 * @param {Filter} filter the filter for this timelineSet
	 */
	EventTimelineSet.prototype.setFilter = function(filter) {
	    this._filter = filter;
	};
	
	/**
	 * Get the list of pending sent events for this timelineSet's room, filtered
	 * by the timelineSet's filter if appropriate.
	 *
	 * @return {module:models/event.MatrixEvent[]} A list of the sent events
	 * waiting for remote echo.
	 *
	 * @throws If <code>opts.pendingEventOrdering</code> was not 'detached'
	 */
	EventTimelineSet.prototype.getPendingEvents = function() {
	    if (!this.room) {
	        return [];
	    }
	
	    if (this._filter) {
	        return this._filter.filterRoomTimeline(this.room.getPendingEvents());
	    }
	    else {
	        return this.room.getPendingEvents();
	    }
	};
	
	/**
	 * Get the live timeline for this room.
	 *
	 * @return {module:models/event-timeline~EventTimeline} live timeline
	 */
	EventTimelineSet.prototype.getLiveTimeline = function() {
	    return this._liveTimeline;
	};
	
	/**
	 * Return the timeline (if any) this event is in.
	 * @param {String} eventId the eventId being sought
	 * @return {module:models/event-timeline~EventTimeline} timeline
	 */
	EventTimelineSet.prototype.eventIdToTimeline = function(eventId) {
	    return this._eventIdToTimeline[eventId];
	};
	
	/**
	 * Track a new event as if it were in the same timeline as an old event,
	 * replacing it.
	 * @param {String} oldEventId  event ID of the original event
	 * @param {String} newEventId  event ID of the replacement event
	 */
	EventTimelineSet.prototype.replaceEventId = function(oldEventId, newEventId) {
	    var existingTimeline = this._eventIdToTimeline[oldEventId];
	    if (existingTimeline) {
	        delete this._eventIdToTimeline[oldEventId];
	        this._eventIdToTimeline[newEventId] = existingTimeline;
	    }
	};
	
	/**
	 * Reset the live timeline, and start a new one.
	 *
	 * <p>This is used when /sync returns a 'limited' timeline.
	 *
	 * @param {string=} backPaginationToken   token for back-paginating the new timeline
	 * @param {?bool} flush  Whether to flush the non-live timelines too.
	 *
	 * @fires module:client~MatrixClient#event:"Room.timelineReset"
	 */
	EventTimelineSet.prototype.resetLiveTimeline = function(backPaginationToken, flush) {
	    var newTimeline;
	
	    if (!this._timelineSupport || flush) {
	        // if timeline support is disabled, forget about the old timelines
	        newTimeline = new EventTimeline(this);
	        this._timelines = [newTimeline];
	        this._eventIdToTimeline = {};
	    } else {
	        newTimeline = this.addTimeline();
	    }
	
	    // initialise the state in the new timeline from our last known state
	    var evMap = this._liveTimeline.getState(EventTimeline.FORWARDS).events;
	    var events = [];
	    for (var evtype in evMap) {
	        if (!evMap.hasOwnProperty(evtype)) { continue; }
	        for (var stateKey in evMap[evtype]) {
	            if (!evMap[evtype].hasOwnProperty(stateKey)) { continue; }
	            events.push(evMap[evtype][stateKey]);
	        }
	    }
	    newTimeline.initialiseState(events);
	
	    // make sure we set the pagination token before firing timelineReset,
	    // otherwise clients which start back-paginating will fail, and then get
	    // stuck without realising that they *can* back-paginate.
	    newTimeline.setPaginationToken(backPaginationToken, EventTimeline.BACKWARDS);
	
	    this._liveTimeline = newTimeline;
	    this.emit("Room.timelineReset", this.room, this);
	};
	
	/**
	 * Get the timeline which contains the given event, if any
	 *
	 * @param {string} eventId  event ID to look for
	 * @return {?module:models/event-timeline~EventTimeline} timeline containing
	 * the given event, or null if unknown
	 */
	EventTimelineSet.prototype.getTimelineForEvent = function(eventId) {
	    var res = this._eventIdToTimeline[eventId];
	    return (res === undefined) ? null : res;
	};
	
	/**
	 * Get an event which is stored in our timelines
	 *
	 * @param {string} eventId  event ID to look for
	 * @return {?module:models/event~MatrixEvent} the given event, or undefined if unknown
	 */
	EventTimelineSet.prototype.findEventById = function(eventId) {
	    var tl = this.getTimelineForEvent(eventId);
	    if (!tl) {
	        return undefined;
	    }
	    return utils.findElement(tl.getEvents(),
	                             function(ev) { return ev.getId() == eventId; });
	};
	
	/**
	 * Add a new timeline to this timeline list
	 *
	 * @return {module:models/event-timeline~EventTimeline} newly-created timeline
	 */
	EventTimelineSet.prototype.addTimeline = function() {
	    if (!this._timelineSupport) {
	        throw new Error("timeline support is disabled. Set the 'timelineSupport'" +
	                        " parameter to true when creating MatrixClient to enable" +
	                        " it.");
	    }
	
	    var timeline = new EventTimeline(this);
	    this._timelines.push(timeline);
	    return timeline;
	};
	
	
	/**
	 * Add events to a timeline
	 *
	 * <p>Will fire "Room.timeline" for each event added.
	 *
	 * @param {MatrixEvent[]} events A list of events to add.
	 *
	 * @param {boolean} toStartOfTimeline   True to add these events to the start
	 * (oldest) instead of the end (newest) of the timeline. If true, the oldest
	 * event will be the <b>last</b> element of 'events'.
	 *
	 * @param {module:models/event-timeline~EventTimeline} timeline   timeline to
	 *    add events to.
	 *
	 * @param {string=} paginationToken   token for the next batch of events
	 *
	 * @fires module:client~MatrixClient#event:"Room.timeline"
	 *
	 */
	EventTimelineSet.prototype.addEventsToTimeline = function(events, toStartOfTimeline,
	                                              timeline, paginationToken) {
	    if (!timeline) {
	        throw new Error(
	            "'timeline' not specified for EventTimelineSet.addEventsToTimeline"
	        );
	    }
	
	    if (!toStartOfTimeline && timeline == this._liveTimeline) {
	        throw new Error(
	            "EventTimelineSet.addEventsToTimeline cannot be used for adding events to " +
	            "the live timeline - use Room.addLiveEvents instead"
	        );
	    }
	
	    if (this._filter) {
	        events = this._filter.filterRoomTimeline(events);
	        if (!events.length) {
	            return;
	        }
	    }
	
	    var direction = toStartOfTimeline ? EventTimeline.BACKWARDS :
	        EventTimeline.FORWARDS;
	    var inverseDirection = toStartOfTimeline ? EventTimeline.FORWARDS :
	        EventTimeline.BACKWARDS;
	
	    // Adding events to timelines can be quite complicated. The following
	    // illustrates some of the corner-cases.
	    //
	    // Let's say we start by knowing about four timelines. timeline3 and
	    // timeline4 are neighbours:
	    //
	    //    timeline1    timeline2    timeline3    timeline4
	    //      [M]          [P]          [S] <------> [T]
	    //
	    // Now we paginate timeline1, and get the following events from the server:
	    // [M, N, P, R, S, T, U].
	    //
	    // 1. First, we ignore event M, since we already know about it.
	    //
	    // 2. Next, we append N to timeline 1.
	    //
	    // 3. Next, we don't add event P, since we already know about it,
	    //    but we do link together the timelines. We now have:
	    //
	    //    timeline1    timeline2    timeline3    timeline4
	    //      [M, N] <---> [P]          [S] <------> [T]
	    //
	    // 4. Now we add event R to timeline2:
	    //
	    //    timeline1    timeline2    timeline3    timeline4
	    //      [M, N] <---> [P, R]       [S] <------> [T]
	    //
	    //    Note that we have switched the timeline we are working on from
	    //    timeline1 to timeline2.
	    //
	    // 5. We ignore event S, but again join the timelines:
	    //
	    //    timeline1    timeline2    timeline3    timeline4
	    //      [M, N] <---> [P, R] <---> [S] <------> [T]
	    //
	    // 6. We ignore event T, and the timelines are already joined, so there
	    //    is nothing to do.
	    //
	    // 7. Finally, we add event U to timeline4:
	    //
	    //    timeline1    timeline2    timeline3    timeline4
	    //      [M, N] <---> [P, R] <---> [S] <------> [T, U]
	    //
	    // The important thing to note in the above is what happened when we
	    // already knew about a given event:
	    //
	    //   - if it was appropriate, we joined up the timelines (steps 3, 5).
	    //   - in any case, we started adding further events to the timeline which
	    //       contained the event we knew about (steps 3, 5, 6).
	    //
	    //
	    // So much for adding events to the timeline. But what do we want to do
	    // with the pagination token?
	    //
	    // In the case above, we will be given a pagination token which tells us how to
	    // get events beyond 'U' - in this case, it makes sense to store this
	    // against timeline4. But what if timeline4 already had 'U' and beyond? in
	    // that case, our best bet is to throw away the pagination token we were
	    // given and stick with whatever token timeline4 had previously. In short,
	    // we want to only store the pagination token if the last event we receive
	    // is one we didn't previously know about.
	    //
	    // We make an exception for this if it turns out that we already knew about
	    // *all* of the events, and we weren't able to join up any timelines. When
	    // that happens, it means our existing pagination token is faulty, since it
	    // is only telling us what we already know. Rather than repeatedly
	    // paginating with the same token, we might as well use the new pagination
	    // token in the hope that we eventually work our way out of the mess.
	
	    var didUpdate = false;
	    var lastEventWasNew = false;
	    for (var i = 0; i < events.length; i++) {
	        var event = events[i];
	        var eventId = event.getId();
	
	        var existingTimeline = this._eventIdToTimeline[eventId];
	
	        if (!existingTimeline) {
	            // we don't know about this event yet. Just add it to the timeline.
	            this.addEventToTimeline(event, timeline, toStartOfTimeline);
	            lastEventWasNew = true;
	            didUpdate = true;
	            continue;
	        }
	
	        lastEventWasNew = false;
	
	        if (existingTimeline == timeline) {
	            debuglog("Event " + eventId + " already in timeline " + timeline);
	            continue;
	        }
	
	        var neighbour = timeline.getNeighbouringTimeline(direction);
	        if (neighbour) {
	            // this timeline already has a neighbour in the relevant direction;
	            // let's assume the timelines are already correctly linked up, and
	            // skip over to it.
	            //
	            // there's probably some edge-case here where we end up with an
	            // event which is in a timeline a way down the chain, and there is
	            // a break in the chain somewhere. But I can't really imagine how
	            // that would happen, so I'm going to ignore it for now.
	            //
	            if (existingTimeline == neighbour) {
	                debuglog("Event " + eventId + " in neighbouring timeline - " +
	                            "switching to " + existingTimeline);
	            } else {
	                debuglog("Event " + eventId + " already in a different " +
	                            "timeline " + existingTimeline);
	            }
	            timeline = existingTimeline;
	            continue;
	        }
	
	        // time to join the timelines.
	        console.info("Already have timeline for " + eventId +
	                     " - joining timeline " + timeline + " to " +
	                     existingTimeline);
	        timeline.setNeighbouringTimeline(existingTimeline, direction);
	        existingTimeline.setNeighbouringTimeline(timeline, inverseDirection);
	        timeline = existingTimeline;
	        didUpdate = true;
	    }
	
	    // see above - if the last event was new to us, or if we didn't find any
	    // new information, we update the pagination token for whatever
	    // timeline we ended up on.
	    if (lastEventWasNew || !didUpdate) {
	        timeline.setPaginationToken(paginationToken, direction);
	    }
	};
	
	/**
	 * Add an event to the end of this live timeline.
	 *
	 * @param {MatrixEvent} event Event to be added
	 * @param {string?} duplicateStrategy 'ignore' or 'replace'
	 */
	EventTimelineSet.prototype.addLiveEvent = function(event, duplicateStrategy) {
	    if (this._filter) {
	        var events = this._filter.filterRoomTimeline([event]);
	        if (!events.length) {
	            return;
	        }
	    }
	
	    var timeline = this._eventIdToTimeline[event.getId()];
	    if (timeline) {
	        if (duplicateStrategy === "replace") {
	            debuglog("EventTimelineSet.addLiveEvent: replacing duplicate event " +
	                     event.getId());
	            var tlEvents = timeline.getEvents();
	            for (var j = 0; j < tlEvents.length; j++) {
	                if (tlEvents[j].getId() === event.getId()) {
	                    // still need to set the right metadata on this event
	                    EventTimeline.setEventMetadata(
	                        event,
	                        timeline.getState(EventTimeline.FORWARDS),
	                        false
	                    );
	
	                    if (!tlEvents[j].encryptedType) {
	                        tlEvents[j] = event;
	                    }
	
	                    // XXX: we need to fire an event when this happens.
	                    break;
	                }
	            }
	        } else {
	            debuglog("EventTimelineSet.addLiveEvent: ignoring duplicate event " +
	                     event.getId());
	        }
	        return;
	    }
	
	    this.addEventToTimeline(event, this._liveTimeline, false);
	};
	
	/**
	 * Add event to the given timeline, and emit Room.timeline. Assumes
	 * we have already checked we don't know about this event.
	 *
	 * Will fire "Room.timeline" for each event added.
	 *
	 * @param {MatrixEvent} event
	 * @param {EventTimeline} timeline
	 * @param {boolean} toStartOfTimeline
	 *
	 * @fires module:client~MatrixClient#event:"Room.timeline"
	 */
	EventTimelineSet.prototype.addEventToTimeline = function(event, timeline,
	                                                         toStartOfTimeline) {
	    var eventId = event.getId();
	    timeline.addEvent(event, toStartOfTimeline);
	    this._eventIdToTimeline[eventId] = timeline;
	
	    var data = {
	        timeline: timeline,
	        liveEvent: !toStartOfTimeline && timeline == this._liveTimeline,
	    };
	    this.emit("Room.timeline", event, this.room,
	              Boolean(toStartOfTimeline), false, data);
	};
	
	/**
	 * Replaces event with ID oldEventId with one with newEventId, if oldEventId is
	 * recognised.  Otherwise, add to the live timeline.  Used to handle remote echos.
	 *
	 * @param {MatrixEvent} localEvent     the new event to be added to the timeline
	 * @param {String} oldEventId          the ID of the original event
	 * @param {boolean} newEventId         the ID of the replacement event
	 *
	 * @fires module:client~MatrixClient#event:"Room.timeline"
	 */
	EventTimelineSet.prototype.handleRemoteEcho = function(localEvent, oldEventId,
	                                                        newEventId) {
	    // XXX: why don't we infer newEventId from localEvent?
	    var existingTimeline = this._eventIdToTimeline[oldEventId];
	    if (existingTimeline) {
	        delete this._eventIdToTimeline[oldEventId];
	        this._eventIdToTimeline[newEventId] = existingTimeline;
	    } else {
	        if (this._filter) {
	            if (this._filter.filterRoomTimeline([localEvent]).length) {
	                this.addEventToTimeline(localEvent, this._liveTimeline, false);
	            }
	        }
	        else {
	            this.addEventToTimeline(localEvent, this._liveTimeline, false);
	        }
	    }
	};
	
	/**
	 * Removes a single event from this room.
	 *
	 * @param {String} eventId  The id of the event to remove
	 *
	 * @return {?MatrixEvent} the removed event, or null if the event was not found
	 * in this room.
	 */
	EventTimelineSet.prototype.removeEvent = function(eventId) {
	    var timeline = this._eventIdToTimeline[eventId];
	    if (!timeline) {
	        return null;
	    }
	
	    var removed = timeline.removeEvent(eventId);
	    if (removed) {
	        delete this._eventIdToTimeline[eventId];
	        var data = {
	            timeline: timeline,
	        };
	        this.emit("Room.timeline", removed, this.room, undefined, true, data);
	    }
	    return removed;
	};
	
	/**
	 * Determine where two events appear in the timeline relative to one another
	 *
	 * @param {string} eventId1   The id of the first event
	 * @param {string} eventId2   The id of the second event
	
	 * @return {?number} a number less than zero if eventId1 precedes eventId2, and
	 *    greater than zero if eventId1 succeeds eventId2. zero if they are the
	 *    same event; null if we can't tell (either because we don't know about one
	 *    of the events, or because they are in separate timelines which don't join
	 *    up).
	 */
	EventTimelineSet.prototype.compareEventOrdering = function(eventId1, eventId2) {
	    if (eventId1 == eventId2) {
	        // optimise this case
	        return 0;
	    }
	
	    var timeline1 = this._eventIdToTimeline[eventId1];
	    var timeline2 = this._eventIdToTimeline[eventId2];
	
	    if (timeline1 === undefined) {
	        return null;
	    }
	    if (timeline2 === undefined) {
	        return null;
	    }
	
	    if (timeline1 === timeline2) {
	        // both events are in the same timeline - figure out their
	        // relative indices
	        var idx1, idx2;
	        var events = timeline1.getEvents();
	        for (var idx = 0; idx < events.length &&
	             (idx1 === undefined || idx2 === undefined); idx++) {
	            var evId = events[idx].getId();
	            if (evId == eventId1) {
	                idx1 = idx;
	            }
	            if (evId == eventId2) {
	                idx2 = idx;
	            }
	        }
	        return idx1 - idx2;
	    }
	
	    // the events are in different timelines. Iterate through the
	    // linkedlist to see which comes first.
	
	    // first work forwards from timeline1
	    var tl = timeline1;
	    while (tl) {
	        if (tl === timeline2) {
	            // timeline1 is before timeline2
	            return -1;
	        }
	        tl = tl.getNeighbouringTimeline(EventTimeline.FORWARDS);
	    }
	
	    // now try backwards from timeline1
	    tl = timeline1;
	    while (tl) {
	        if (tl === timeline2) {
	            // timeline2 is before timeline1
	            return 1;
	        }
	        tl = tl.getNeighbouringTimeline(EventTimeline.BACKWARDS);
	    }
	
	    // the timelines are not contiguous.
	    return null;
	};
	
	/**
	 * The EventTimelineSet class.
	 */
	module.exports = EventTimelineSet;
	
	/**
	 * Fires whenever the timeline in a room is updated.
	 * @event module:client~MatrixClient#"Room.timeline"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @param {?Room} room The room, if any, whose timeline was updated.
	 * @param {boolean} toStartOfTimeline True if this event was added to the start
	 * @param {boolean} removed True if this event has just been removed from the timeline
	 * (beginning; oldest) of the timeline e.g. due to pagination.
	 *
	 * @param {object} data  more data about the event
	 *
	 * @param {module:event-timeline.EventTimeline} data.timeline the timeline the
	 * event was added to/removed from
	 *
	 * @param {boolean} data.liveEvent true if the event was a real-time event
	 * added to the end of the live timeline
	 *
	 * @example
	 * matrixClient.on("Room.timeline",
	 *                 function(event, room, toStartOfTimeline, removed, data) {
	 *   if (!toStartOfTimeline && data.liveEvent) {
	 *     var messageToAppend = room.timeline.[room.timeline.length - 1];
	 *   }
	 * });
	 */
	
	/**
	 * Fires whenever the live timeline in a room is reset.
	 *
	 * When we get a 'limited' sync (for example, after a network outage), we reset
	 * the live timeline to be empty before adding the recent events to the new
	 * timeline. This event is fired after the timeline is reset, and before the
	 * new events are added.
	 *
	 * @event module:client~MatrixClient#"Room.timelineReset"
	 * @param {Room} room The room whose live timeline was reset, if any
	 * @param {EventTimelineSet} timelineSet timelineSet room whose live timeline was reset
	 */


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * This is an internal module. See {@link MatrixHttpApi} for the public class.
	 * @module http-api
	 */
	var q = __webpack_require__(197);
	var utils = __webpack_require__(185);
	
	// we use our own implementation of setTimeout, so that if we get suspended in
	// the middle of a /sync, we cancel the sync as soon as we awake, rather than
	// waiting for the delay to elapse.
	var callbacks = __webpack_require__(199);
	
	/*
	TODO:
	- CS: complete register function (doing stages)
	- Identity server: linkEmail, authEmail, bindEmail, lookup3pid
	*/
	
	/**
	 * A constant representing the URI path for release 0 of the Client-Server HTTP API.
	 */
	module.exports.PREFIX_R0 = "/_matrix/client/r0";
	
	/**
	 * A constant representing the URI path for as-yet unspecified Client-Server HTTP APIs.
	 */
	module.exports.PREFIX_UNSTABLE = "/_matrix/client/unstable";
	
	/**
	 * URI path for the identity API
	 */
	module.exports.PREFIX_IDENTITY_V1 = "/_matrix/identity/api/v1";
	
	/**
	 * URI path for the media repo API
	 */
	module.exports.PREFIX_MEDIA_R0 = "/_matrix/media/r0";
	
	/**
	 * Construct a MatrixHttpApi.
	 * @constructor
	 * @param {EventEmitter} event_emitter The event emitter to use for emitting events
	 * @param {Object} opts The options to use for this HTTP API.
	 * @param {string} opts.baseUrl Required. The base client-server URL e.g.
	 * 'http://localhost:8008'.
	 * @param {Function} opts.request Required. The function to call for HTTP
	 * requests. This function must look like function(opts, callback){ ... }.
	 * @param {string} opts.prefix Required. The matrix client prefix to use, e.g.
	 * '/_matrix/client/r0'. See PREFIX_R0 and PREFIX_UNSTABLE for constants.
	 * @param {bool} opts.onlyData True to return only the 'data' component of the
	 * response (e.g. the parsed HTTP body). If false, requests will return status
	 * codes and headers in addition to data. Default: false.
	 * @param {string} opts.accessToken The access_token to send with requests. Can be
	 * null to not send an access token.
	 * @param {Object} opts.extraParams Optional. Extra query parameters to send on
	 * requests.
	 */
	module.exports.MatrixHttpApi = function MatrixHttpApi(event_emitter, opts) {
	    utils.checkObjectHasKeys(opts, ["baseUrl", "request", "prefix"]);
	    opts.onlyData = opts.onlyData || false;
	    this.event_emitter = event_emitter;
	    this.opts = opts;
	    this.uploads = [];
	};
	
	module.exports.MatrixHttpApi.prototype = {
	
	    /**
	     * Get the content repository url with query parameters.
	     * @return {Object} An object with a 'base', 'path' and 'params' for base URL,
	     *          path and query parameters respectively.
	     */
	    getContentUri: function() {
	        var params = {
	            access_token: this.opts.accessToken
	        };
	        return {
	            base: this.opts.baseUrl,
	            path: "/_matrix/media/v1/upload",
	            params: params
	        };
	    },
	
	    /**
	     * Upload content to the Home Server
	     * @param {File} file A File object (in a browser) or in Node,
	                                 an object with properties:
	                                 name: The file's name
	                                 stream: A read stream
	     * @param {Function} callback Optional. The callback to invoke on
	     * success/failure. See the promise return values for more information.
	     * @return {module:client.Promise} Resolves to <code>{data: {Object},
	     */
	    uploadContent: function(file, callback) {
	        if (callback !== undefined && !utils.isFunction(callback)) {
	            throw Error(
	                "Expected callback to be a function but got " + typeof callback
	            );
	        }
	        // browser-request doesn't support File objects because it deep-copies
	        // the options using JSON.parse(JSON.stringify(options)). Instead of
	        // loading the whole file into memory as a string and letting
	        // browser-request base64 encode and then decode it again, we just
	        // use XMLHttpRequest directly.
	        // (browser-request doesn't support progress either, which is also kind
	        // of important here)
	
	        var upload = { loaded: 0, total: 0 };
	        var promise;
	        if (global.XMLHttpRequest) {
	            var defer = q.defer();
	            var xhr = new global.XMLHttpRequest();
	            upload.xhr = xhr;
	            var cb = requestCallback(defer, callback, this.opts.onlyData);
	
	            var timeout_fn = function() {
	                xhr.abort();
	                cb(new Error('Timeout'));
	            };
	
	            xhr.timeout_timer = callbacks.setTimeout(timeout_fn, 30000);
	
	            xhr.onreadystatechange = function() {
	                switch (xhr.readyState) {
	                    case global.XMLHttpRequest.DONE:
	                        callbacks.clearTimeout(xhr.timeout_timer);
	                        var err;
	                        if (!xhr.responseText) {
	                            err = new Error('No response body.');
	                            err.http_status = xhr.status;
	                            cb(err);
	                            return;
	                        }
	
	                        var resp = JSON.parse(xhr.responseText);
	                        if (resp.content_uri === undefined) {
	                            err = Error('Bad response');
	                            err.http_status = xhr.status;
	                            cb(err);
	                            return;
	                        }
	
	                        cb(undefined, xhr, resp.content_uri);
	                        break;
	                }
	            };
	            xhr.upload.addEventListener("progress", function(ev) {
	                callbacks.clearTimeout(xhr.timeout_timer);
	                upload.loaded = ev.loaded;
	                upload.total = ev.total;
	                xhr.timeout_timer = callbacks.setTimeout(timeout_fn, 30000);
	                defer.notify(ev);
	            });
	            var url = this.opts.baseUrl + "/_matrix/media/v1/upload";
	            url += "?access_token=" + encodeURIComponent(this.opts.accessToken);
	            url += "&filename=" + encodeURIComponent(file.name);
	
	            xhr.open("POST", url);
	            if (file.type) {
	                xhr.setRequestHeader("Content-Type", file.type);
	            } else {
	                // if the file doesn't have a mime type, use a default since
	                // the HS errors if we don't supply one.
	                xhr.setRequestHeader("Content-Type", 'application/octet-stream');
	            }
	            xhr.send(file);
	            promise = defer.promise;
	
	            // dirty hack (as per _request) to allow the upload to be cancelled.
	            promise.abort = xhr.abort.bind(xhr);
	        } else {
	            var queryParams = {
	                filename: file.name,
	            };
	            promise = this.authedRequest(
	                callback, "POST", "/upload", queryParams, file.stream, {
	                    prefix: "/_matrix/media/v1",
	                    localTimeoutMs: 30000,
	                    headers: {"Content-Type": file.type},
	                }
	            );
	        }
	
	        var self = this;
	
	        // remove the upload from the list on completion
	        var promise0 = promise.finally(function() {
	            for (var i = 0; i < self.uploads.length; ++i) {
	                if (self.uploads[i] === upload) {
	                    self.uploads.splice(i, 1);
	                    return;
	                }
	            }
	        });
	
	        // copy our dirty abort() method to the new promise
	        promise0.abort = promise.abort;
	
	        upload.promise = promise0;
	        this.uploads.push(upload);
	
	        return promise0;
	    },
	
	    cancelUpload: function(promise) {
	        if (promise.abort) {
	            promise.abort();
	            return true;
	        }
	        return false;
	    },
	
	    getCurrentUploads: function() {
	        return this.uploads;
	    },
	
	    idServerRequest: function(callback, method, path, params, prefix) {
	        var fullUri = this.opts.idBaseUrl + prefix + path;
	
	        if (callback !== undefined && !utils.isFunction(callback)) {
	            throw Error(
	                "Expected callback to be a function but got " + typeof callback
	            );
	        }
	
	        var opts = {
	            uri: fullUri,
	            method: method,
	            withCredentials: false,
	            json: false,
	            _matrix_opts: this.opts
	        };
	        if (method == 'GET') {
	            opts.qs = params;
	        } else {
	            opts.form = params;
	        }
	
	        var defer = q.defer();
	        this.opts.request(
	            opts,
	            requestCallback(defer, callback, this.opts.onlyData)
	        );
	        // ID server does not always take JSON, so we can't use requests' 'json'
	        // option as we do with the home server, but it does return JSON, so
	        // parse it manually
	        return defer.promise.then(function(response) {
	            return JSON.parse(response);
	        });
	    },
	
	    /**
	     * Perform an authorised request to the homeserver.
	     * @param {Function} callback Optional. The callback to invoke on
	     * success/failure. See the promise return values for more information.
	     * @param {string} method The HTTP method e.g. "GET".
	     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
	     * "/createRoom".
	     *
	     * @param {Object=} queryParams A dict of query params (these will NOT be
	     * urlencoded). If unspecified, there will be no query params.
	     *
	     * @param {Object} data The HTTP JSON body.
	     *
	     * @param {Object=} opts additional options
	     *
	     * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before
	     * timing out the request. If not specified, there is no timeout.
	     *
	     * @param {sting=} opts.prefix The full prefix to use e.g.
	     * "/_matrix/client/v2_alpha". If not specified, uses this.opts.prefix.
	     *
	     * @param {Object=} opts.headers map of additional request headers
	     *
	     * @return {module:client.Promise} Resolves to <code>{data: {Object},
	     * headers: {Object}, code: {Number}}</code>.
	     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
	     * object only.
	     * @return {module:http-api.MatrixError} Rejects with an error if a problem
	     * occurred. This includes network problems and Matrix-specific error JSON.
	     */
	    authedRequest: function(callback, method, path, queryParams, data, opts) {
	        if (!queryParams) {
	            queryParams = {};
	        }
	        if (!queryParams.access_token) {
	            queryParams.access_token = this.opts.accessToken;
	        }
	
	        var request_promise = this.request(
	            callback, method, path, queryParams, data, opts
	        );
	
	        var self = this;
	        request_promise.catch(function(err) {
	            if (err.errcode == 'M_UNKNOWN_TOKEN') {
	                self.event_emitter.emit("Session.logged_out");
	            }
	        });
	
	        // return the original promise, otherwise tests break due to it having to
	        // go around the event loop one more time to process the result of the request
	        return request_promise;
	    },
	
	    /**
	     * Perform a request to the homeserver without any credentials.
	     * @param {Function} callback Optional. The callback to invoke on
	     * success/failure. See the promise return values for more information.
	     * @param {string} method The HTTP method e.g. "GET".
	     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
	     * "/createRoom".
	     *
	     * @param {Object=} queryParams A dict of query params (these will NOT be
	     * urlencoded). If unspecified, there will be no query params.
	     *
	     * @param {Object} data The HTTP JSON body.
	     *
	     * @param {Object=} opts additional options
	     *
	     * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before
	     * timing out the request. If not specified, there is no timeout.
	     *
	     * @param {sting=} opts.prefix The full prefix to use e.g.
	     * "/_matrix/client/v2_alpha". If not specified, uses this.opts.prefix.
	     *
	     * @param {Object=} opts.headers map of additional request headers
	     *
	     * @return {module:client.Promise} Resolves to <code>{data: {Object},
	     * headers: {Object}, code: {Number}}</code>.
	     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
	     * object only.
	     * @return {module:http-api.MatrixError} Rejects with an error if a problem
	     * occurred. This includes network problems and Matrix-specific error JSON.
	     */
	    request: function(callback, method, path, queryParams, data, opts) {
	        opts = opts || {};
	        var prefix = opts.prefix || this.opts.prefix;
	        var fullUri = this.opts.baseUrl + prefix + path;
	
	        return this.requestOtherUrl(
	            callback, method, fullUri, queryParams, data, opts
	        );
	    },
	
	    /**
	     * Perform an authorised request to the homeserver with a specific path
	     * prefix which overrides the default for this call only. Useful for hitting
	     * different Matrix Client-Server versions.
	     * @param {Function} callback Optional. The callback to invoke on
	     * success/failure. See the promise return values for more information.
	     * @param {string} method The HTTP method e.g. "GET".
	     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
	     * "/createRoom".
	     * @param {Object} queryParams A dict of query params (these will NOT be
	     * urlencoded).
	     * @param {Object} data The HTTP JSON body.
	     * @param {string} prefix The full prefix to use e.g.
	     * "/_matrix/client/v2_alpha".
	     * @param {Number=} localTimeoutMs The maximum amount of time to wait before
	     * timing out the request. If not specified, there is no timeout.
	     * @return {module:client.Promise} Resolves to <code>{data: {Object},
	     * headers: {Object}, code: {Number}}</code>.
	     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
	     * object only.
	     * @return {module:http-api.MatrixError} Rejects with an error if a problem
	     * occurred. This includes network problems and Matrix-specific error JSON.
	     *
	     * @deprecated prefer authedRequest with opts.prefix
	     */
	    authedRequestWithPrefix: function(callback, method, path, queryParams, data,
	                                      prefix, localTimeoutMs) {
	        return this.authedRequest(
	            callback, method, path, queryParams, data, {
	                localTimeoutMs: localTimeoutMs,
	                prefix: prefix,
	            }
	        );
	    },
	
	    /**
	     * Perform a request to the homeserver without any credentials but with a
	     * specific path prefix which overrides the default for this call only.
	     * Useful for hitting different Matrix Client-Server versions.
	     * @param {Function} callback Optional. The callback to invoke on
	     * success/failure. See the promise return values for more information.
	     * @param {string} method The HTTP method e.g. "GET".
	     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
	     * "/createRoom".
	     * @param {Object} queryParams A dict of query params (these will NOT be
	     * urlencoded).
	     * @param {Object} data The HTTP JSON body.
	     * @param {string} prefix The full prefix to use e.g.
	     * "/_matrix/client/v2_alpha".
	     * @param {Number=} localTimeoutMs The maximum amount of time to wait before
	     * timing out the request. If not specified, there is no timeout.
	     * @return {module:client.Promise} Resolves to <code>{data: {Object},
	     * headers: {Object}, code: {Number}}</code>.
	     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
	     * object only.
	     * @return {module:http-api.MatrixError} Rejects with an error if a problem
	     * occurred. This includes network problems and Matrix-specific error JSON.
	     *
	     * @deprecated prefer request with opts.prefix
	     */
	    requestWithPrefix: function(callback, method, path, queryParams, data, prefix,
	                                localTimeoutMs) {
	        return this.request(
	            callback, method, path, queryParams, data, {
	                localTimeoutMs: localTimeoutMs,
	                prefix: prefix,
	            }
	        );
	    },
	
	    /**
	     * Perform a request to an arbitrary URL.
	     * @param {Function} callback Optional. The callback to invoke on
	     * success/failure. See the promise return values for more information.
	     * @param {string} method The HTTP method e.g. "GET".
	     * @param {string} uri The HTTP URI
	     *
	     * @param {Object=} queryParams A dict of query params (these will NOT be
	     * urlencoded). If unspecified, there will be no query params.
	     *
	     * @param {Object} data The HTTP JSON body.
	     *
	     * @param {Object=} opts additional options
	     *
	     * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before
	     * timing out the request. If not specified, there is no timeout.
	     *
	     * @param {sting=} opts.prefix The full prefix to use e.g.
	     * "/_matrix/client/v2_alpha". If not specified, uses this.opts.prefix.
	     *
	     * @param {Object=} opts.headers map of additional request headers
	     *
	     * @return {module:client.Promise} Resolves to <code>{data: {Object},
	     * headers: {Object}, code: {Number}}</code>.
	     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
	     * object only.
	     * @return {module:http-api.MatrixError} Rejects with an error if a problem
	     * occurred. This includes network problems and Matrix-specific error JSON.
	     */
	    requestOtherUrl: function(callback, method, uri, queryParams, data,
	                              opts) {
	        if (opts === undefined || opts === null) {
	            opts = {};
	        } else if (isFinite(opts)) {
	            // opts used to be localTimeoutMs
	            opts = {
	                localTimeoutMs: opts
	            };
	        }
	
	        return this._request(
	            callback, method, uri, queryParams, data, opts
	        );
	    },
	
	    /**
	     * Form and return a homeserver request URL based on the given path
	     * params and prefix.
	     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
	     * "/createRoom".
	     * @param {Object} queryParams A dict of query params (these will NOT be
	     * urlencoded).
	     * @param {string} prefix The full prefix to use e.g.
	     * "/_matrix/client/v2_alpha".
	     * @return {string} URL
	     */
	    getUrl: function(path, queryParams, prefix) {
	        var queryString = "";
	        if (queryParams) {
	            queryString = "?" + utils.encodeParams(queryParams);
	        }
	        return this.opts.baseUrl + prefix + path + queryString;
	    },
	
	    _request: function(callback, method, uri, queryParams, data, opts) {
	        if (callback !== undefined && !utils.isFunction(callback)) {
	            throw Error(
	                "Expected callback to be a function but got " + typeof callback
	            );
	        }
	        opts = opts || {};
	
	        var self = this;
	        if (this.opts.extraParams) {
	            for (var key in this.opts.extraParams) {
	                if (!this.opts.extraParams.hasOwnProperty(key)) { continue; }
	                queryParams[key] = this.opts.extraParams[key];
	            }
	        }
	        var defer = q.defer();
	
	        var timeoutId;
	        var timedOut = false;
	        var req;
	        var localTimeoutMs = opts.localTimeoutMs;
	        if (localTimeoutMs) {
	            timeoutId = callbacks.setTimeout(function() {
	                timedOut = true;
	                if (req && req.abort) {
	                    req.abort();
	                }
	                defer.reject(new module.exports.MatrixError({
	                    error: "Locally timed out waiting for a response",
	                    errcode: "ORG.MATRIX.JSSDK_TIMEOUT",
	                    timeout: localTimeoutMs
	                }));
	            }, localTimeoutMs);
	        }
	
	        var reqPromise = defer.promise;
	
	        try {
	            req = this.opts.request(
	                {
	                    uri: uri,
	                    method: method,
	                    withCredentials: false,
	                    qs: queryParams,
	                    body: data,
	                    json: true,
	                    timeout: localTimeoutMs,
	                    headers: opts.headers || {},
	                    _matrix_opts: this.opts
	                },
	                function(err, response, body) {
	                    if (localTimeoutMs) {
	                        callbacks.clearTimeout(timeoutId);
	                        if (timedOut) {
	                            return; // already rejected promise
	                        }
	                    }
	                    var handlerFn = requestCallback(defer, callback, self.opts.onlyData);
	                    handlerFn(err, response, body);
	                }
	            );
	            if (req && req.abort) {
	                // FIXME: This is EVIL, but I can't think of a better way to expose
	                // abort() operations on underlying HTTP requests :(
	                reqPromise.abort = req.abort.bind(req);
	            }
	        }
	        catch (ex) {
	            defer.reject(ex);
	            if (callback) {
	                callback(ex);
	            }
	        }
	        return reqPromise;
	    }
	};
	
	/*
	 * Returns a callback that can be invoked by an HTTP request on completion,
	 * that will either resolve or reject the given defer as well as invoke the
	 * given userDefinedCallback (if any).
	 *
	 * If onlyData is true, the defer/callback is invoked with the body of the
	 * response, otherwise the result code.
	 */
	var requestCallback = function(defer, userDefinedCallback, onlyData) {
	    userDefinedCallback = userDefinedCallback || function() {};
	
	    return function(err, response, body) {
	        if (!err && response.statusCode >= 400) {
	            err = new module.exports.MatrixError(body);
	            err.httpStatus = response.statusCode;
	        }
	
	        if (err) {
	            defer.reject(err);
	            userDefinedCallback(err);
	        }
	        else {
	            var res = {
	                code: response.statusCode,
	                headers: response.headers,
	                data: body
	            };
	            defer.resolve(onlyData ? body : res);
	            userDefinedCallback(null, onlyData ? body : res);
	        }
	    };
	};
	
	/**
	 * Construct a Matrix error. This is a JavaScript Error with additional
	 * information specific to the standard Matrix error response.
	 * @constructor
	 * @param {Object} errorJson The Matrix error JSON returned from the homeserver.
	 * @prop {string} errcode The Matrix 'errcode' value, e.g. "M_FORBIDDEN".
	 * @prop {string} name Same as MatrixError.errcode but with a default unknown string.
	 * @prop {string} message The Matrix 'error' value, e.g. "Missing token."
	 * @prop {Object} data The raw Matrix error JSON used to construct this object.
	 * @prop {integer} httpStatus The numeric HTTP status code given
	 */
	module.exports.MatrixError = function MatrixError(errorJson) {
	    errorJson = errorJson || {};
	    this.errcode = errorJson.errcode;
	    this.name = errorJson.errcode || "Unknown error code";
	    this.message = errorJson.error || "Unknown message";
	    this.data = errorJson;
	};
	module.exports.MatrixError.prototype = Object.create(Error.prototype);
	/** */
	module.exports.MatrixError.prototype.constructor = module.exports.MatrixError;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// vim:ts=4:sts=4:sw=4:
	/*!
	 *
	 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * With parts by Tyler Close
	 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
	 * at http://www.opensource.org/licenses/mit-license.html
	 * Forked at ref_send.js version: 2009-05-11
	 *
	 * With parts by Mark Miller
	 * Copyright (C) 2011 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	
	(function (definition) {
	    "use strict";
	
	    // This file will function properly as a <script> tag, or a module
	    // using CommonJS and NodeJS or RequireJS module formats.  In
	    // Common/Node/RequireJS, the module exports the Q API and when
	    // executed as a simple <script>, it creates a Q global instead.
	
	    // Montage Require
	    if (typeof bootstrap === "function") {
	        bootstrap("promise", definition);
	
	    // CommonJS
	    } else if (true) {
	        module.exports = definition();
	
	    // RequireJS
	    } else if (typeof define === "function" && define.amd) {
	        define(definition);
	
	    // SES (Secure EcmaScript)
	    } else if (typeof ses !== "undefined") {
	        if (!ses.ok()) {
	            return;
	        } else {
	            ses.makeQ = definition;
	        }
	
	    // <script>
	    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
	        // Prefer window over self for add-on scripts. Use self for
	        // non-windowed contexts.
	        var global = typeof window !== "undefined" ? window : self;
	
	        // Get the `window` object, save the previous Q global
	        // and initialize Q as a global.
	        var previousQ = global.Q;
	        global.Q = definition();
	
	        // Add a noConflict function so Q can be removed from the
	        // global namespace.
	        global.Q.noConflict = function () {
	            global.Q = previousQ;
	            return this;
	        };
	
	    } else {
	        throw new Error("This environment was not anticipated by Q. Please file a bug.");
	    }
	
	})(function () {
	"use strict";
	
	var hasStacks = false;
	try {
	    throw new Error();
	} catch (e) {
	    hasStacks = !!e.stack;
	}
	
	// All code after this point will be filtered from stack traces reported
	// by Q.
	var qStartingLine = captureLine();
	var qFileName;
	
	// shims
	
	// used for fallback in "allResolved"
	var noop = function () {};
	
	// Use the fastest possible means to execute a task in a future turn
	// of the event loop.
	var nextTick =(function () {
	    // linked list of tasks (single, with head node)
	    var head = {task: void 0, next: null};
	    var tail = head;
	    var flushing = false;
	    var requestTick = void 0;
	    var isNodeJS = false;
	    // queue for late tasks, used by unhandled rejection tracking
	    var laterQueue = [];
	
	    function flush() {
	        /* jshint loopfunc: true */
	        var task, domain;
	
	        while (head.next) {
	            head = head.next;
	            task = head.task;
	            head.task = void 0;
	            domain = head.domain;
	
	            if (domain) {
	                head.domain = void 0;
	                domain.enter();
	            }
	            runSingle(task, domain);
	
	        }
	        while (laterQueue.length) {
	            task = laterQueue.pop();
	            runSingle(task);
	        }
	        flushing = false;
	    }
	    // runs a single function in the async queue
	    function runSingle(task, domain) {
	        try {
	            task();
	
	        } catch (e) {
	            if (isNodeJS) {
	                // In node, uncaught exceptions are considered fatal errors.
	                // Re-throw them synchronously to interrupt flushing!
	
	                // Ensure continuation if the uncaught exception is suppressed
	                // listening "uncaughtException" events (as domains does).
	                // Continue in next event to avoid tick recursion.
	                if (domain) {
	                    domain.exit();
	                }
	                setTimeout(flush, 0);
	                if (domain) {
	                    domain.enter();
	                }
	
	                throw e;
	
	            } else {
	                // In browsers, uncaught exceptions are not fatal.
	                // Re-throw them asynchronously to avoid slow-downs.
	                setTimeout(function () {
	                    throw e;
	                }, 0);
	            }
	        }
	
	        if (domain) {
	            domain.exit();
	        }
	    }
	
	    nextTick = function (task) {
	        tail = tail.next = {
	            task: task,
	            domain: isNodeJS && process.domain,
	            next: null
	        };
	
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	
	    if (typeof process === "object" &&
	        process.toString() === "[object process]" && process.nextTick) {
	        // Ensure Q is in a real Node environment, with a `process.nextTick`.
	        // To see through fake Node environments:
	        // * Mocha test runner - exposes a `process` global without a `nextTick`
	        // * Browserify - exposes a `process.nexTick` function that uses
	        //   `setTimeout`. In this case `setImmediate` is preferred because
	        //    it is faster. Browserify's `process.toString()` yields
	        //   "[object Object]", while in a real Node environment
	        //   `process.nextTick()` yields "[object process]".
	        isNodeJS = true;
	
	        requestTick = function () {
	            process.nextTick(flush);
	        };
	
	    } else if (typeof setImmediate === "function") {
	        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
	        if (typeof window !== "undefined") {
	            requestTick = setImmediate.bind(window, flush);
	        } else {
	            requestTick = function () {
	                setImmediate(flush);
	            };
	        }
	
	    } else if (typeof MessageChannel !== "undefined") {
	        // modern browsers
	        // http://www.nonblocking.io/2011/06/windownexttick.html
	        var channel = new MessageChannel();
	        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
	        // working message ports the first time a page loads.
	        channel.port1.onmessage = function () {
	            requestTick = requestPortTick;
	            channel.port1.onmessage = flush;
	            flush();
	        };
	        var requestPortTick = function () {
	            // Opera requires us to provide a message payload, regardless of
	            // whether we use it.
	            channel.port2.postMessage(0);
	        };
	        requestTick = function () {
	            setTimeout(flush, 0);
	            requestPortTick();
	        };
	
	    } else {
	        // old browsers
	        requestTick = function () {
	            setTimeout(flush, 0);
	        };
	    }
	    // runs a task after all other tasks have been run
	    // this is useful for unhandled rejection tracking that needs to happen
	    // after all `then`d tasks have been run.
	    nextTick.runAfter = function (task) {
	        laterQueue.push(task);
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	    return nextTick;
	})();
	
	// Attempt to make generics safe in the face of downstream
	// modifications.
	// There is no situation where this is necessary.
	// If you need a security guarantee, these primordials need to be
	// deeply frozen anyway, and if you don’t need a security guarantee,
	// this is just plain paranoid.
	// However, this **might** have the nice side-effect of reducing the size of
	// the minified code by reducing x.call() to merely x()
	// See Mark Miller’s explanation of what this does.
	// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
	var call = Function.call;
	function uncurryThis(f) {
	    return function () {
	        return call.apply(f, arguments);
	    };
	}
	// This is equivalent, but slower:
	// uncurryThis = Function_bind.bind(Function_bind.call);
	// http://jsperf.com/uncurrythis
	
	var array_slice = uncurryThis(Array.prototype.slice);
	
	var array_reduce = uncurryThis(
	    Array.prototype.reduce || function (callback, basis) {
	        var index = 0,
	            length = this.length;
	        // concerning the initial value, if one is not provided
	        if (arguments.length === 1) {
	            // seek to the first value in the array, accounting
	            // for the possibility that is is a sparse array
	            do {
	                if (index in this) {
	                    basis = this[index++];
	                    break;
	                }
	                if (++index >= length) {
	                    throw new TypeError();
	                }
	            } while (1);
	        }
	        // reduce
	        for (; index < length; index++) {
	            // account for the possibility that the array is sparse
	            if (index in this) {
	                basis = callback(basis, this[index], index);
	            }
	        }
	        return basis;
	    }
	);
	
	var array_indexOf = uncurryThis(
	    Array.prototype.indexOf || function (value) {
	        // not a very good shim, but good enough for our one use of it
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] === value) {
	                return i;
	            }
	        }
	        return -1;
	    }
	);
	
	var array_map = uncurryThis(
	    Array.prototype.map || function (callback, thisp) {
	        var self = this;
	        var collect = [];
	        array_reduce(self, function (undefined, value, index) {
	            collect.push(callback.call(thisp, value, index, self));
	        }, void 0);
	        return collect;
	    }
	);
	
	var object_create = Object.create || function (prototype) {
	    function Type() { }
	    Type.prototype = prototype;
	    return new Type();
	};
	
	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
	
	var object_keys = Object.keys || function (object) {
	    var keys = [];
	    for (var key in object) {
	        if (object_hasOwnProperty(object, key)) {
	            keys.push(key);
	        }
	    }
	    return keys;
	};
	
	var object_toString = uncurryThis(Object.prototype.toString);
	
	function isObject(value) {
	    return value === Object(value);
	}
	
	// generator related shims
	
	// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
	function isStopIteration(exception) {
	    return (
	        object_toString(exception) === "[object StopIteration]" ||
	        exception instanceof QReturnValue
	    );
	}
	
	// FIXME: Remove this helper and Q.return once ES6 generators are in
	// SpiderMonkey.
	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
	    QReturnValue = ReturnValue;
	} else {
	    QReturnValue = function (value) {
	        this.value = value;
	    };
	}
	
	// long stack traces
	
	var STACK_JUMP_SEPARATOR = "From previous event:";
	
	function makeStackTraceLong(error, promise) {
	    // If possible, transform the error stack trace by removing Node and Q
	    // cruft, then concatenating with the stack trace of `promise`. See #57.
	    if (hasStacks &&
	        promise.stack &&
	        typeof error === "object" &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	        var stacks = [];
	        for (var p = promise; !!p; p = p.source) {
	            if (p.stack) {
	                stacks.unshift(p.stack);
	            }
	        }
	        stacks.unshift(error.stack);
	
	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	}
	
	function filterStackString(stackString) {
	    var lines = stackString.split("\n");
	    var desiredLines = [];
	    for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];
	
	        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	            desiredLines.push(line);
	        }
	    }
	    return desiredLines.join("\n");
	}
	
	function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	           stackLine.indexOf("(node.js:") !== -1;
	}
	
	function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    // In IE10 function name can have spaces ("Anonymous function") O_o
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	        return [attempt1[1], Number(attempt1[2])];
	    }
	
	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	        return [attempt2[1], Number(attempt2[2])];
	    }
	
	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	        return [attempt3[1], Number(attempt3[2])];
	    }
	}
	
	function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	
	    if (!fileNameAndLineNumber) {
	        return false;
	    }
	
	    var fileName = fileNameAndLineNumber[0];
	    var lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === qFileName &&
	        lineNumber >= qStartingLine &&
	        lineNumber <= qEndingLine;
	}
	
	// discover own file name and line number range for filtering stack
	// traces
	function captureLine() {
	    if (!hasStacks) {
	        return;
	    }
	
	    try {
	        throw new Error();
	    } catch (e) {
	        var lines = e.stack.split("\n");
	        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	        if (!fileNameAndLineNumber) {
	            return;
	        }
	
	        qFileName = fileNameAndLineNumber[0];
	        return fileNameAndLineNumber[1];
	    }
	}
	
	function deprecate(callback, name, alternative) {
	    return function () {
	        if (typeof console !== "undefined" &&
	            typeof console.warn === "function") {
	            console.warn(name + " is deprecated, use " + alternative +
	                         " instead.", new Error("").stack);
	        }
	        return callback.apply(callback, arguments);
	    };
	}
	
	// end of shims
	// beginning of real work
	
	/**
	 * Constructs a promise for an immediate reference, passes promises through, or
	 * coerces promises from different systems.
	 * @param value immediate reference or promise
	 */
	function Q(value) {
	    // If the object is already a Promise, return it directly.  This enables
	    // the resolve function to both be used to created references from objects,
	    // but to tolerably coerce non-promises to promises.
	    if (value instanceof Promise) {
	        return value;
	    }
	
	    // assimilate thenables
	    if (isPromiseAlike(value)) {
	        return coerce(value);
	    } else {
	        return fulfill(value);
	    }
	}
	Q.resolve = Q;
	
	/**
	 * Performs a task in a future turn of the event loop.
	 * @param {Function} task
	 */
	Q.nextTick = nextTick;
	
	/**
	 * Controls whether or not long stack traces will be on
	 */
	Q.longStackSupport = false;
	
	// enable long stacks if Q_DEBUG is set
	if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
	    Q.longStackSupport = true;
	}
	
	/**
	 * Constructs a {promise, resolve, reject} object.
	 *
	 * `resolve` is a callback to invoke with a more resolved value for the
	 * promise. To fulfill the promise, invoke `resolve` with any value that is
	 * not a thenable. To reject the promise, invoke `resolve` with a rejected
	 * thenable, or invoke `reject` with the reason directly. To resolve the
	 * promise to another thenable, thus putting it in the same state, invoke
	 * `resolve` with that other thenable.
	 */
	Q.defer = defer;
	function defer() {
	    // if "messages" is an "Array", that indicates that the promise has not yet
	    // been resolved.  If it is "undefined", it has been resolved.  Each
	    // element of the messages array is itself an array of complete arguments to
	    // forward to the resolved promise.  We coerce the resolution value to a
	    // promise using the `resolve` function because it handles both fully
	    // non-thenable values and other thenables gracefully.
	    var messages = [], progressListeners = [], resolvedPromise;
	
	    var deferred = object_create(defer.prototype);
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, operands) {
	        var args = array_slice(arguments);
	        if (messages) {
	            messages.push(args);
	            if (op === "when" && operands[1]) { // progress operand
	                progressListeners.push(operands[1]);
	            }
	        } else {
	            Q.nextTick(function () {
	                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
	            });
	        }
	    };
	
	    // XXX deprecated
	    promise.valueOf = function () {
	        if (messages) {
	            return promise;
	        }
	        var nearerValue = nearer(resolvedPromise);
	        if (isPromise(nearerValue)) {
	            resolvedPromise = nearerValue; // shorten chain
	        }
	        return nearerValue;
	    };
	
	    promise.inspect = function () {
	        if (!resolvedPromise) {
	            return { state: "pending" };
	        }
	        return resolvedPromise.inspect();
	    };
	
	    if (Q.longStackSupport && hasStacks) {
	        try {
	            throw new Error();
	        } catch (e) {
	            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
	            // accessor around; that causes memory leaks as per GH-111. Just
	            // reify the stack trace as a string ASAP.
	            //
	            // At the same time, cut off the first line; it's always just
	            // "[object Promise]\n", as per the `toString`.
	            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	    }
	
	    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
	    // consolidating them into `become`, since otherwise we'd create new
	    // promises with the lines `become(whatever(value))`. See e.g. GH-252.
	
	    function become(newPromise) {
	        resolvedPromise = newPromise;
	        promise.source = newPromise;
	
	        array_reduce(messages, function (undefined, message) {
	            Q.nextTick(function () {
	                newPromise.promiseDispatch.apply(newPromise, message);
	            });
	        }, void 0);
	
	        messages = void 0;
	        progressListeners = void 0;
	    }
	
	    deferred.promise = promise;
	    deferred.resolve = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(Q(value));
	    };
	
	    deferred.fulfill = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(fulfill(value));
	    };
	    deferred.reject = function (reason) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(reject(reason));
	    };
	    deferred.notify = function (progress) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        array_reduce(progressListeners, function (undefined, progressListener) {
	            Q.nextTick(function () {
	                progressListener(progress);
	            });
	        }, void 0);
	    };
	
	    return deferred;
	}
	
	/**
	 * Creates a Node-style callback that will resolve or reject the deferred
	 * promise.
	 * @returns a nodeback
	 */
	defer.prototype.makeNodeResolver = function () {
	    var self = this;
	    return function (error, value) {
	        if (error) {
	            self.reject(error);
	        } else if (arguments.length > 2) {
	            self.resolve(array_slice(arguments, 1));
	        } else {
	            self.resolve(value);
	        }
	    };
	};
	
	/**
	 * @param resolver {Function} a function that returns nothing and accepts
	 * the resolve, reject, and notify functions for a deferred.
	 * @returns a promise that may be resolved with the given resolve and reject
	 * functions, or rejected by a thrown exception in resolver
	 */
	Q.Promise = promise; // ES6
	Q.promise = promise;
	function promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("resolver must be a function.");
	    }
	    var deferred = defer();
	    try {
	        resolver(deferred.resolve, deferred.reject, deferred.notify);
	    } catch (reason) {
	        deferred.reject(reason);
	    }
	    return deferred.promise;
	}
	
	promise.race = race; // ES6
	promise.all = all; // ES6
	promise.reject = reject; // ES6
	promise.resolve = Q; // ES6
	
	// XXX experimental.  This method is a way to denote that a local value is
	// serializable and should be immediately dispatched to a remote upon request,
	// instead of passing a reference.
	Q.passByCopy = function (object) {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return object;
	};
	
	Promise.prototype.passByCopy = function () {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return this;
	};
	
	/**
	 * If two promises eventually fulfill to the same value, promises that value,
	 * but otherwise rejects.
	 * @param x {Any*}
	 * @param y {Any*}
	 * @returns {Any*} a promise for x and y if they are the same, but a rejection
	 * otherwise.
	 *
	 */
	Q.join = function (x, y) {
	    return Q(x).join(y);
	};
	
	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};
	
	/**
	 * Returns a promise for the first of an array of promises to become settled.
	 * @param answers {Array[Any*]} promises to race
	 * @returns {Any*} the first promise to be settled
	 */
	Q.race = race;
	function race(answerPs) {
	    return promise(function (resolve, reject) {
	        // Switch to this once we can assume at least ES5
	        // answerPs.forEach(function (answerP) {
	        //     Q(answerP).then(resolve, reject);
	        // });
	        // Use this in the meantime
	        for (var i = 0, len = answerPs.length; i < len; i++) {
	            Q(answerPs[i]).then(resolve, reject);
	        }
	    });
	}
	
	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};
	
	/**
	 * Constructs a Promise with a promise descriptor object and optional fallback
	 * function.  The descriptor contains methods like when(rejected), get(name),
	 * set(name, value), post(name, args), and delete(name), which all
	 * return either a value, a promise for a value, or a rejection.  The fallback
	 * accepts the operation name, a resolver, and any further arguments that would
	 * have been forwarded to the appropriate method above had a method been
	 * provided with the proper name.  The API makes no guarantees about the nature
	 * of the returned object, apart from that it is usable whereever promises are
	 * bought and sold.
	 */
	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
	    if (fallback === void 0) {
	        fallback = function (op) {
	            return reject(new Error(
	                "Promise does not support operation: " + op
	            ));
	        };
	    }
	    if (inspect === void 0) {
	        inspect = function () {
	            return {state: "unknown"};
	        };
	    }
	
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, args) {
	        var result;
	        try {
	            if (descriptor[op]) {
	                result = descriptor[op].apply(promise, args);
	            } else {
	                result = fallback.call(promise, op, args);
	            }
	        } catch (exception) {
	            result = reject(exception);
	        }
	        if (resolve) {
	            resolve(result);
	        }
	    };
	
	    promise.inspect = inspect;
	
	    // XXX deprecated `valueOf` and `exception` support
	    if (inspect) {
	        var inspected = inspect();
	        if (inspected.state === "rejected") {
	            promise.exception = inspected.reason;
	        }
	
	        promise.valueOf = function () {
	            var inspected = inspect();
	            if (inspected.state === "pending" ||
	                inspected.state === "rejected") {
	                return promise;
	            }
	            return inspected.value;
	        };
	    }
	
	    return promise;
	}
	
	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};
	
	Promise.prototype.then = function (fulfilled, rejected, progressed) {
	    var self = this;
	    var deferred = defer();
	    var done = false;   // ensure the untrusted promise makes at most a
	                        // single call to one of the callbacks
	
	    function _fulfilled(value) {
	        try {
	            return typeof fulfilled === "function" ? fulfilled(value) : value;
	        } catch (exception) {
	            return reject(exception);
	        }
	    }
	
	    function _rejected(exception) {
	        if (typeof rejected === "function") {
	            makeStackTraceLong(exception, self);
	            try {
	                return rejected(exception);
	            } catch (newException) {
	                return reject(newException);
	            }
	        }
	        return reject(exception);
	    }
	
	    function _progressed(value) {
	        return typeof progressed === "function" ? progressed(value) : value;
	    }
	
	    Q.nextTick(function () {
	        self.promiseDispatch(function (value) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_fulfilled(value));
	        }, "when", [function (exception) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_rejected(exception));
	        }]);
	    });
	
	    // Progress propagator need to be attached in the current tick.
	    self.promiseDispatch(void 0, "when", [void 0, function (value) {
	        var newValue;
	        var threw = false;
	        try {
	            newValue = _progressed(value);
	        } catch (e) {
	            threw = true;
	            if (Q.onerror) {
	                Q.onerror(e);
	            } else {
	                throw e;
	            }
	        }
	
	        if (!threw) {
	            deferred.notify(newValue);
	        }
	    }]);
	
	    return deferred.promise;
	};
	
	Q.tap = function (promise, callback) {
	    return Q(promise).tap(callback);
	};
	
	/**
	 * Works almost like "finally", but not called for rejections.
	 * Original resolution value is passed through callback unaffected.
	 * Callback may return a promise that will be awaited for.
	 * @param {Function} callback
	 * @returns {Q.Promise}
	 * @example
	 * doSomething()
	 *   .then(...)
	 *   .tap(console.log)
	 *   .then(...);
	 */
	Promise.prototype.tap = function (callback) {
	    callback = Q(callback);
	
	    return this.then(function (value) {
	        return callback.fcall(value).thenResolve(value);
	    });
	};
	
	/**
	 * Registers an observer on a promise.
	 *
	 * Guarantees:
	 *
	 * 1. that fulfilled and rejected will be called only once.
	 * 2. that either the fulfilled callback or the rejected callback will be
	 *    called, but not both.
	 * 3. that fulfilled and rejected will not be called in this turn.
	 *
	 * @param value      promise or immediate reference to observe
	 * @param fulfilled  function to be called with the fulfilled value
	 * @param rejected   function to be called with the rejection exception
	 * @param progressed function to be called on any progress notifications
	 * @return promise for the return value from the invoked callback
	 */
	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
	    return Q(value).then(fulfilled, rejected, progressed);
	}
	
	Promise.prototype.thenResolve = function (value) {
	    return this.then(function () { return value; });
	};
	
	Q.thenResolve = function (promise, value) {
	    return Q(promise).thenResolve(value);
	};
	
	Promise.prototype.thenReject = function (reason) {
	    return this.then(function () { throw reason; });
	};
	
	Q.thenReject = function (promise, reason) {
	    return Q(promise).thenReject(reason);
	};
	
	/**
	 * If an object is not a promise, it is as "near" as possible.
	 * If a promise is rejected, it is as "near" as possible too.
	 * If it’s a fulfilled promise, the fulfillment value is nearer.
	 * If it’s a deferred promise and the deferred has been resolved, the
	 * resolution is "nearer".
	 * @param object
	 * @returns most resolved (nearest) form of the object
	 */
	
	// XXX should we re-do this?
	Q.nearer = nearer;
	function nearer(value) {
	    if (isPromise(value)) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	}
	
	/**
	 * @returns whether the given object is a promise.
	 * Otherwise it is a fulfilled value.
	 */
	Q.isPromise = isPromise;
	function isPromise(object) {
	    return object instanceof Promise;
	}
	
	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
	    return isObject(object) && typeof object.then === "function";
	}
	
	/**
	 * @returns whether the given object is a pending promise, meaning not
	 * fulfilled or rejected.
	 */
	Q.isPending = isPending;
	function isPending(object) {
	    return isPromise(object) && object.inspect().state === "pending";
	}
	
	Promise.prototype.isPending = function () {
	    return this.inspect().state === "pending";
	};
	
	/**
	 * @returns whether the given object is a value or fulfilled
	 * promise.
	 */
	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
	    return !isPromise(object) || object.inspect().state === "fulfilled";
	}
	
	Promise.prototype.isFulfilled = function () {
	    return this.inspect().state === "fulfilled";
	};
	
	/**
	 * @returns whether the given object is a rejected promise.
	 */
	Q.isRejected = isRejected;
	function isRejected(object) {
	    return isPromise(object) && object.inspect().state === "rejected";
	}
	
	Promise.prototype.isRejected = function () {
	    return this.inspect().state === "rejected";
	};
	
	//// BEGIN UNHANDLED REJECTION TRACKING
	
	// This promise library consumes exceptions thrown in handlers so they can be
	// handled by a subsequent promise.  The exceptions get added to this array when
	// they are created, and removed when they are handled.  Note that in ES6 or
	// shimmed environments, this would naturally be a `Set`.
	var unhandledReasons = [];
	var unhandledRejections = [];
	var reportedUnhandledRejections = [];
	var trackUnhandledRejections = true;
	
	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;
	
	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	    }
	}
	
	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	    if (typeof process === "object" && typeof process.emit === "function") {
	        Q.nextTick.runAfter(function () {
	            if (array_indexOf(unhandledRejections, promise) !== -1) {
	                process.emit("unhandledRejection", reason, promise);
	                reportedUnhandledRejections.push(promise);
	            }
	        });
	    }
	
	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	}
	
	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    var at = array_indexOf(unhandledRejections, promise);
	    if (at !== -1) {
	        if (typeof process === "object" && typeof process.emit === "function") {
	            Q.nextTick.runAfter(function () {
	                var atReport = array_indexOf(reportedUnhandledRejections, promise);
	                if (atReport !== -1) {
	                    process.emit("rejectionHandled", unhandledReasons[at], promise);
	                    reportedUnhandledRejections.splice(atReport, 1);
	                }
	            });
	        }
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}
	
	Q.resetUnhandledRejections = resetUnhandledRejections;
	
	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};
	
	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    trackUnhandledRejections = false;
	};
	
	resetUnhandledRejections();
	
	//// END UNHANDLED REJECTION TRACKING
	
	/**
	 * Constructs a rejected promise.
	 * @param reason value describing the failure
	 */
	Q.reject = reject;
	function reject(reason) {
	    var rejection = Promise({
	        "when": function (rejected) {
	            // note that the error has been handled
	            if (rejected) {
	                untrackRejection(this);
	            }
	            return rejected ? rejected(reason) : this;
	        }
	    }, function fallback() {
	        return this;
	    }, function inspect() {
	        return { state: "rejected", reason: reason };
	    });
	
	    // Note that the reason has not been handled.
	    trackRejection(rejection, reason);
	
	    return rejection;
	}
	
	/**
	 * Constructs a fulfilled promise for an immediate reference.
	 * @param value immediate reference
	 */
	Q.fulfill = fulfill;
	function fulfill(value) {
	    return Promise({
	        "when": function () {
	            return value;
	        },
	        "get": function (name) {
	            return value[name];
	        },
	        "set": function (name, rhs) {
	            value[name] = rhs;
	        },
	        "delete": function (name) {
	            delete value[name];
	        },
	        "post": function (name, args) {
	            // Mark Miller proposes that post with no name should apply a
	            // promised function.
	            if (name === null || name === void 0) {
	                return value.apply(void 0, args);
	            } else {
	                return value[name].apply(value, args);
	            }
	        },
	        "apply": function (thisp, args) {
	            return value.apply(thisp, args);
	        },
	        "keys": function () {
	            return object_keys(value);
	        }
	    }, void 0, function inspect() {
	        return { state: "fulfilled", value: value };
	    });
	}
	
	/**
	 * Converts thenables to Q promises.
	 * @param promise thenable promise
	 * @returns a Q promise
	 */
	function coerce(promise) {
	    var deferred = defer();
	    Q.nextTick(function () {
	        try {
	            promise.then(deferred.resolve, deferred.reject, deferred.notify);
	        } catch (exception) {
	            deferred.reject(exception);
	        }
	    });
	    return deferred.promise;
	}
	
	/**
	 * Annotates an object such that it will never be
	 * transferred away from this process over any promise
	 * communication channel.
	 * @param object
	 * @returns promise a wrapping of that object that
	 * additionally responds to the "isDef" message
	 * without a rejection.
	 */
	Q.master = master;
	function master(object) {
	    return Promise({
	        "isDef": function () {}
	    }, function fallback(op, args) {
	        return dispatch(object, op, args);
	    }, function () {
	        return Q(object).inspect();
	    });
	}
	
	/**
	 * Spreads the values of a promised array of arguments into the
	 * fulfillment callback.
	 * @param fulfilled callback that receives variadic arguments from the
	 * promised array
	 * @param rejected callback that receives the exception if the promise
	 * is rejected.
	 * @returns a promise for the return value or thrown exception of
	 * either callback.
	 */
	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
	    return Q(value).spread(fulfilled, rejected);
	}
	
	Promise.prototype.spread = function (fulfilled, rejected) {
	    return this.all().then(function (array) {
	        return fulfilled.apply(void 0, array);
	    }, rejected);
	};
	
	/**
	 * The async function is a decorator for generator functions, turning
	 * them into asynchronous generators.  Although generators are only part
	 * of the newest ECMAScript 6 drafts, this code does not cause syntax
	 * errors in older engines.  This code should continue to work and will
	 * in fact improve over time as the language improves.
	 *
	 * ES6 generators are currently part of V8 version 3.19 with the
	 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
	 * for longer, but under an older Python-inspired form.  This function
	 * works on both kinds of generators.
	 *
	 * Decorates a generator function such that:
	 *  - it may yield promises
	 *  - execution will continue when that promise is fulfilled
	 *  - the value of the yield expression will be the fulfilled value
	 *  - it returns a promise for the return value (when the generator
	 *    stops iterating)
	 *  - the decorated function returns a promise for the return value
	 *    of the generator or the first rejected promise among those
	 *    yielded.
	 *  - if an error is thrown in the generator, it propagates through
	 *    every following yield until it is caught, or until it escapes
	 *    the generator function altogether, and is translated into a
	 *    rejection for the promise returned by the decorated generator.
	 */
	Q.async = async;
	function async(makeGenerator) {
	    return function () {
	        // when verb is "send", arg is a value
	        // when verb is "throw", arg is an exception
	        function continuer(verb, arg) {
	            var result;
	
	            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
	            // engine that has a deployed base of browsers that support generators.
	            // However, SM's generators use the Python-inspired semantics of
	            // outdated ES6 drafts.  We would like to support ES6, but we'd also
	            // like to make it possible to use generators in deployed browsers, so
	            // we also support Python-style generators.  At some point we can remove
	            // this block.
	
	            if (typeof StopIteration === "undefined") {
	                // ES6 Generators
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    return reject(exception);
	                }
	                if (result.done) {
	                    return Q(result.value);
	                } else {
	                    return when(result.value, callback, errback);
	                }
	            } else {
	                // SpiderMonkey Generators
	                // FIXME: Remove this case when SM does ES6 generators.
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    if (isStopIteration(exception)) {
	                        return Q(exception.value);
	                    } else {
	                        return reject(exception);
	                    }
	                }
	                return when(result, callback, errback);
	            }
	        }
	        var generator = makeGenerator.apply(this, arguments);
	        var callback = continuer.bind(continuer, "next");
	        var errback = continuer.bind(continuer, "throw");
	        return callback();
	    };
	}
	
	/**
	 * The spawn function is a small wrapper around async that immediately
	 * calls the generator and also ends the promise chain, so that any
	 * unhandled errors are thrown instead of forwarded to the error
	 * handler. This is useful because it's extremely common to run
	 * generators at the top-level to work with libraries.
	 */
	Q.spawn = spawn;
	function spawn(makeGenerator) {
	    Q.done(Q.async(makeGenerator)());
	}
	
	// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
	/**
	 * Throws a ReturnValue exception to stop an asynchronous generator.
	 *
	 * This interface is a stop-gap measure to support generator return
	 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
	 * generators like Chromium 29, just use "return" in your generator
	 * functions.
	 *
	 * @param value the return value for the surrounding generator
	 * @throws ReturnValue exception with the value.
	 * @example
	 * // ES6 style
	 * Q.async(function* () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      return foo + bar;
	 * })
	 * // Older SpiderMonkey style
	 * Q.async(function () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      Q.return(foo + bar);
	 * })
	 */
	Q["return"] = _return;
	function _return(value) {
	    throw new QReturnValue(value);
	}
	
	/**
	 * The promised function decorator ensures that any promise arguments
	 * are settled and passed as values (`this` is also settled and passed
	 * as a value).  It will also ensure that the result of a function is
	 * always a promise.
	 *
	 * @example
	 * var add = Q.promised(function (a, b) {
	 *     return a + b;
	 * });
	 * add(Q(a), Q(B));
	 *
	 * @param {function} callback The function to decorate
	 * @returns {function} a function that has been decorated.
	 */
	Q.promised = promised;
	function promised(callback) {
	    return function () {
	        return spread([this, all(arguments)], function (self, args) {
	            return callback.apply(self, args);
	        });
	    };
	}
	
	/**
	 * sends a message to a value in a future turn
	 * @param object* the recipient
	 * @param op the name of the message operation, e.g., "when",
	 * @param args further arguments to be forwarded to the operation
	 * @returns result {Promise} a promise for the result of the operation
	 */
	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
	    return Q(object).dispatch(op, args);
	}
	
	Promise.prototype.dispatch = function (op, args) {
	    var self = this;
	    var deferred = defer();
	    Q.nextTick(function () {
	        self.promiseDispatch(deferred.resolve, op, args);
	    });
	    return deferred.promise;
	};
	
	/**
	 * Gets the value of a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to get
	 * @return promise for the property value
	 */
	Q.get = function (object, key) {
	    return Q(object).dispatch("get", [key]);
	};
	
	Promise.prototype.get = function (key) {
	    return this.dispatch("get", [key]);
	};
	
	/**
	 * Sets the value of a property in a future turn.
	 * @param object    promise or immediate reference for object object
	 * @param name      name of property to set
	 * @param value     new value of property
	 * @return promise for the return value
	 */
	Q.set = function (object, key, value) {
	    return Q(object).dispatch("set", [key, value]);
	};
	
	Promise.prototype.set = function (key, value) {
	    return this.dispatch("set", [key, value]);
	};
	
	/**
	 * Deletes a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to delete
	 * @return promise for the return value
	 */
	Q.del = // XXX legacy
	Q["delete"] = function (object, key) {
	    return Q(object).dispatch("delete", [key]);
	};
	
	Promise.prototype.del = // XXX legacy
	Promise.prototype["delete"] = function (key) {
	    return this.dispatch("delete", [key]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param value     a value to post, typically an array of
	 *                  invocation arguments for promises that
	 *                  are ultimately backed with `resolve` values,
	 *                  as opposed to those backed with URLs
	 *                  wherein the posted value can be any
	 *                  JSON serializable object.
	 * @return promise for the return value
	 */
	// bound locally because it is used by other methods
	Q.mapply = // XXX As proposed by "Redsandro"
	Q.post = function (object, name, args) {
	    return Q(object).dispatch("post", [name, args]);
	};
	
	Promise.prototype.mapply = // XXX As proposed by "Redsandro"
	Promise.prototype.post = function (name, args) {
	    return this.dispatch("post", [name, args]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param ...args   array of invocation arguments
	 * @return promise for the return value
	 */
	Q.send = // XXX Mark Miller's proposed parlance
	Q.mcall = // XXX As proposed by "Redsandro"
	Q.invoke = function (object, name /*...args*/) {
	    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
	};
	
	Promise.prototype.send = // XXX Mark Miller's proposed parlance
	Promise.prototype.mcall = // XXX As proposed by "Redsandro"
	Promise.prototype.invoke = function (name /*...args*/) {
	    return this.dispatch("post", [name, array_slice(arguments, 1)]);
	};
	
	/**
	 * Applies the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param args      array of application arguments
	 */
	Q.fapply = function (object, args) {
	    return Q(object).dispatch("apply", [void 0, args]);
	};
	
	Promise.prototype.fapply = function (args) {
	    return this.dispatch("apply", [void 0, args]);
	};
	
	/**
	 * Calls the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q["try"] =
	Q.fcall = function (object /* ...args*/) {
	    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
	};
	
	Promise.prototype.fcall = function (/*...args*/) {
	    return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};
	
	/**
	 * Binds the promised function, transforming return values into a fulfilled
	 * promise and thrown errors into a rejected one.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q.fbind = function (object /*...args*/) {
	    var promise = Q(object);
	    var args = array_slice(arguments, 1);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	Promise.prototype.fbind = function (/*...args*/) {
	    var promise = this;
	    var args = array_slice(arguments);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	
	/**
	 * Requests the names of the owned properties of a promised
	 * object in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @return promise for the keys of the eventually settled object
	 */
	Q.keys = function (object) {
	    return Q(object).dispatch("keys", []);
	};
	
	Promise.prototype.keys = function () {
	    return this.dispatch("keys", []);
	};
	
	/**
	 * Turns an array of promises into a promise for an array.  If any of
	 * the promises gets rejected, the whole array is rejected immediately.
	 * @param {Array*} an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns a promise for an array of the corresponding values
	 */
	// By Mark Miller
	// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
	Q.all = all;
	function all(promises) {
	    return when(promises, function (promises) {
	        var pendingCount = 0;
	        var deferred = defer();
	        array_reduce(promises, function (undefined, promise, index) {
	            var snapshot;
	            if (
	                isPromise(promise) &&
	                (snapshot = promise.inspect()).state === "fulfilled"
	            ) {
	                promises[index] = snapshot.value;
	            } else {
	                ++pendingCount;
	                when(
	                    promise,
	                    function (value) {
	                        promises[index] = value;
	                        if (--pendingCount === 0) {
	                            deferred.resolve(promises);
	                        }
	                    },
	                    deferred.reject,
	                    function (progress) {
	                        deferred.notify({ index: index, value: progress });
	                    }
	                );
	            }
	        }, void 0);
	        if (pendingCount === 0) {
	            deferred.resolve(promises);
	        }
	        return deferred.promise;
	    });
	}
	
	Promise.prototype.all = function () {
	    return all(this);
	};
	
	/**
	 * Returns the first resolved promise of an array. Prior rejected promises are
	 * ignored.  Rejects only if all promises are rejected.
	 * @param {Array*} an array containing values or promises for values
	 * @returns a promise fulfilled with the value of the first resolved promise,
	 * or a rejected promise if all promises are rejected.
	 */
	Q.any = any;
	
	function any(promises) {
	    if (promises.length === 0) {
	        return Q.resolve();
	    }
	
	    var deferred = Q.defer();
	    var pendingCount = 0;
	    array_reduce(promises, function (prev, current, index) {
	        var promise = promises[index];
	
	        pendingCount++;
	
	        when(promise, onFulfilled, onRejected, onProgress);
	        function onFulfilled(result) {
	            deferred.resolve(result);
	        }
	        function onRejected() {
	            pendingCount--;
	            if (pendingCount === 0) {
	                deferred.reject(new Error(
	                    "Can't get fulfillment value from any promise, all " +
	                    "promises were rejected."
	                ));
	            }
	        }
	        function onProgress(progress) {
	            deferred.notify({
	                index: index,
	                value: progress
	            });
	        }
	    }, undefined);
	
	    return deferred.promise;
	}
	
	Promise.prototype.any = function () {
	    return any(this);
	};
	
	/**
	 * Waits for all promises to be settled, either fulfilled or
	 * rejected.  This is distinct from `all` since that would stop
	 * waiting at the first rejection.  The promise returned by
	 * `allResolved` will never be rejected.
	 * @param promises a promise for an array (or an array) of promises
	 * (or values)
	 * @return a promise for an array of promises
	 */
	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
	    return when(promises, function (promises) {
	        promises = array_map(promises, Q);
	        return when(all(array_map(promises, function (promise) {
	            return when(promise, noop, noop);
	        })), function () {
	            return promises;
	        });
	    });
	}
	
	Promise.prototype.allResolved = function () {
	    return allResolved(this);
	};
	
	/**
	 * @see Promise#allSettled
	 */
	Q.allSettled = allSettled;
	function allSettled(promises) {
	    return Q(promises).allSettled();
	}
	
	/**
	 * Turns an array of promises into a promise for an array of their states (as
	 * returned by `inspect`) when they have all settled.
	 * @param {Array[Any*]} values an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns {Array[State]} an array of states for the respective values.
	 */
	Promise.prototype.allSettled = function () {
	    return this.then(function (promises) {
	        return all(array_map(promises, function (promise) {
	            promise = Q(promise);
	            function regardless() {
	                return promise.inspect();
	            }
	            return promise.then(regardless, regardless);
	        }));
	    });
	};
	
	/**
	 * Captures the failure of a promise, giving an oportunity to recover
	 * with a callback.  If the given promise is fulfilled, the returned
	 * promise is fulfilled.
	 * @param {Any*} promise for something
	 * @param {Function} callback to fulfill the returned promise if the
	 * given promise is rejected
	 * @returns a promise for the return value of the callback
	 */
	Q.fail = // XXX legacy
	Q["catch"] = function (object, rejected) {
	    return Q(object).then(void 0, rejected);
	};
	
	Promise.prototype.fail = // XXX legacy
	Promise.prototype["catch"] = function (rejected) {
	    return this.then(void 0, rejected);
	};
	
	/**
	 * Attaches a listener that can respond to progress notifications from a
	 * promise's originating deferred. This listener receives the exact arguments
	 * passed to ``deferred.notify``.
	 * @param {Any*} promise for something
	 * @param {Function} callback to receive any progress notifications
	 * @returns the given promise, unchanged
	 */
	Q.progress = progress;
	function progress(object, progressed) {
	    return Q(object).then(void 0, void 0, progressed);
	}
	
	Promise.prototype.progress = function (progressed) {
	    return this.then(void 0, void 0, progressed);
	};
	
	/**
	 * Provides an opportunity to observe the settling of a promise,
	 * regardless of whether the promise is fulfilled or rejected.  Forwards
	 * the resolution to the returned promise when the callback is done.
	 * The callback can return a promise to defer completion.
	 * @param {Any*} promise
	 * @param {Function} callback to observe the resolution of the given
	 * promise, takes no arguments.
	 * @returns a promise for the resolution of the given promise when
	 * ``fin`` is done.
	 */
	Q.fin = // XXX legacy
	Q["finally"] = function (object, callback) {
	    return Q(object)["finally"](callback);
	};
	
	Promise.prototype.fin = // XXX legacy
	Promise.prototype["finally"] = function (callback) {
	    callback = Q(callback);
	    return this.then(function (value) {
	        return callback.fcall().then(function () {
	            return value;
	        });
	    }, function (reason) {
	        // TODO attempt to recycle the rejection with "this".
	        return callback.fcall().then(function () {
	            throw reason;
	        });
	    });
	};
	
	/**
	 * Terminates a chain of promises, forcing rejections to be
	 * thrown as exceptions.
	 * @param {Any*} promise at the end of a chain of promises
	 * @returns nothing
	 */
	Q.done = function (object, fulfilled, rejected, progress) {
	    return Q(object).done(fulfilled, rejected, progress);
	};
	
	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        Q.nextTick(function () {
	            makeStackTraceLong(error, promise);
	            if (Q.onerror) {
	                Q.onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };
	
	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;
	
	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }
	
	    promise.then(void 0, onUnhandledError);
	};
	
	/**
	 * Causes a promise to be rejected if it does not get fulfilled before
	 * some milliseconds time out.
	 * @param {Any*} promise
	 * @param {Number} milliseconds timeout
	 * @param {Any*} custom error message or Error object (optional)
	 * @returns a promise for the resolution of the given promise if it is
	 * fulfilled before the timeout, otherwise rejected.
	 */
	Q.timeout = function (object, ms, error) {
	    return Q(object).timeout(ms, error);
	};
	
	Promise.prototype.timeout = function (ms, error) {
	    var deferred = defer();
	    var timeoutId = setTimeout(function () {
	        if (!error || "string" === typeof error) {
	            error = new Error(error || "Timed out after " + ms + " ms");
	            error.code = "ETIMEDOUT";
	        }
	        deferred.reject(error);
	    }, ms);
	
	    this.then(function (value) {
	        clearTimeout(timeoutId);
	        deferred.resolve(value);
	    }, function (exception) {
	        clearTimeout(timeoutId);
	        deferred.reject(exception);
	    }, deferred.notify);
	
	    return deferred.promise;
	};
	
	/**
	 * Returns a promise for the given value (or promised value), some
	 * milliseconds after it resolved. Passes rejections immediately.
	 * @param {Any*} promise
	 * @param {Number} milliseconds
	 * @returns a promise for the resolution of the given promise after milliseconds
	 * time has elapsed since the resolution of the given promise.
	 * If the given promise rejects, that is passed immediately.
	 */
	Q.delay = function (object, timeout) {
	    if (timeout === void 0) {
	        timeout = object;
	        object = void 0;
	    }
	    return Q(object).delay(timeout);
	};
	
	Promise.prototype.delay = function (timeout) {
	    return this.then(function (value) {
	        var deferred = defer();
	        setTimeout(function () {
	            deferred.resolve(value);
	        }, timeout);
	        return deferred.promise;
	    });
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided as an array, and returns a promise.
	 *
	 *      Q.nfapply(FS.readFile, [__filename])
	 *      .then(function (content) {
	 *      })
	 *
	 */
	Q.nfapply = function (callback, args) {
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfapply = function (args) {
	    var deferred = defer();
	    var nodeArgs = array_slice(args);
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided individually, and returns a promise.
	 * @example
	 * Q.nfcall(FS.readFile, __filename)
	 * .then(function (content) {
	 * })
	 *
	 */
	Q.nfcall = function (callback /*...args*/) {
	    var args = array_slice(arguments, 1);
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfcall = function (/*...args*/) {
	    var nodeArgs = array_slice(arguments);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Wraps a NodeJS continuation passing function and returns an equivalent
	 * version that returns a promise.
	 * @example
	 * Q.nfbind(FS.readFile, __filename)("utf-8")
	 * .then(console.log)
	 * .done()
	 */
	Q.nfbind =
	Q.denodeify = function (callback /*...args*/) {
	    var baseArgs = array_slice(arguments, 1);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        Q(callback).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nfbind =
	Promise.prototype.denodeify = function (/*...args*/) {
	    var args = array_slice(arguments);
	    args.unshift(this);
	    return Q.denodeify.apply(void 0, args);
	};
	
	Q.nbind = function (callback, thisp /*...args*/) {
	    var baseArgs = array_slice(arguments, 2);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        function bound() {
	            return callback.apply(thisp, arguments);
	        }
	        Q(bound).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nbind = function (/*thisp, ...args*/) {
	    var args = array_slice(arguments, 0);
	    args.unshift(this);
	    return Q.nbind.apply(void 0, args);
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback with a given array of arguments, plus a provided callback.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param {Array} args arguments to pass to the method; the callback
	 * will be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nmapply = // XXX As proposed by "Redsandro"
	Q.npost = function (object, name, args) {
	    return Q(object).npost(name, args);
	};
	
	Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
	Promise.prototype.npost = function (name, args) {
	    var nodeArgs = array_slice(args || []);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback, forwarding the given variadic arguments, plus a provided
	 * callback argument.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param ...args arguments to pass to the method; the callback will
	 * be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nsend = // XXX Based on Mark Miller's proposed "send"
	Q.nmcall = // XXX Based on "Redsandro's" proposal
	Q.ninvoke = function (object, name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 2);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
	Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
	Promise.prototype.ninvoke = function (name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 1);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * If a function would like to support both Node continuation-passing-style and
	 * promise-returning-style, it can end its internal promise chain with
	 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
	 * elects to use a nodeback, the result will be sent there.  If they do not
	 * pass a nodeback, they will receive the result promise.
	 * @param object a result (or a promise for a result)
	 * @param {Function} nodeback a Node.js-style callback
	 * @returns either the promise or nothing
	 */
	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
	    return Q(object).nodeify(nodeback);
	}
	
	Promise.prototype.nodeify = function (nodeback) {
	    if (nodeback) {
	        this.then(function (value) {
	            Q.nextTick(function () {
	                nodeback(null, value);
	            });
	        }, function (error) {
	            Q.nextTick(function () {
	                nodeback(error);
	            });
	        });
	    } else {
	        return this;
	    }
	};
	
	Q.noConflict = function() {
	    throw new Error("Q.noConflict only works when Q is used as a global");
	};
	
	// All code before this point will be filtered from stack traces.
	var qEndingLine = captureLine();
	
	return Q;
	
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(198).setImmediate))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(2).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(198).setImmediate, __webpack_require__(198).clearImmediate))

/***/ },
/* 199 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	
	/* A re-implementation of the javascript callback functions (setTimeout,
	 * clearTimeout; setInterval and clearInterval are not yet implemented) which
	 * try to improve handling of large clock jumps (as seen when
	 * suspending/resuming the system).
	 *
	 * In particular, if a timeout would have fired while the system was suspended,
	 * it will instead fire as soon as possible after resume.
	 */
	
	"use strict";
	
	// we schedule a callback at least this often, to check if we've missed out on
	// some wall-clock time due to being suspended.
	var TIMER_CHECK_PERIOD_MS = 1000;
	
	// counter, for making up ids to return from setTimeout
	var _count = 0;
	
	// the key for our callback with the real global.setTimeout
	var _realCallbackKey;
	
	// a sorted list of the callbacks to be run.
	// each is an object with keys [runAt, func, params, key].
	var _callbackList = [];
	
	// var debuglog = console.log.bind(console);
	var debuglog = function() {};
	
	/**
	 * Replace the function used by this module to get the current time.
	 *
	 * Intended for use by the unit tests.
	 *
	 * @param {function} f function which should return a millisecond counter
	 *
	 * @internal
	 */
	module.exports.setNow = function(f) {
	    _now = f || Date.now;
	};
	var _now = Date.now;
	
	/**
	 * reimplementation of window.setTimeout, which will call the callback if
	 * the wallclock time goes past the deadline.
	 *
	 * @param {function} func   callback to be called after a delay
	 * @param {Number} delayMs  number of milliseconds to delay by
	 *
	 * @return {Number} an identifier for this callback, which may be passed into
	 *                   clearTimeout later.
	 */
	module.exports.setTimeout = function(func, delayMs) {
	    delayMs = delayMs || 0;
	    if (delayMs < 0) {
	        delayMs = 0;
	    }
	
	    var params = Array.prototype.slice.call(arguments, 2);
	    var runAt = _now() + delayMs;
	    var key = _count++;
	    debuglog("setTimeout: scheduling cb", key, "at", runAt,
	             "(delay", delayMs, ")");
	    var data = {
	        runAt: runAt,
	        func: func,
	        params: params,
	        key: key,
	    };
	
	    // figure out where it goes in the list
	    var idx = binarySearch(
	        _callbackList, function(el) {
	            return el.runAt - runAt;
	        }
	    );
	
	    _callbackList.splice(idx, 0, data);
	    _scheduleRealCallback();
	
	    return key;
	};
	
	/**
	 * reimplementation of window.clearTimeout, which mirrors setTimeout
	 *
	 * @param {Number} key   result from an earlier setTimeout call
	 */
	module.exports.clearTimeout = function(key) {
	    if (_callbackList.length === 0) {
	        return;
	    }
	
	    // remove the element from the list
	    var i;
	    for (i = 0; i < _callbackList.length; i++) {
	        var cb = _callbackList[i];
	        if (cb.key == key) {
	            _callbackList.splice(i, 1);
	            break;
	        }
	    }
	
	    // iff it was the first one in the list, reschedule our callback.
	    if (i === 0) {
	        _scheduleRealCallback();
	    }
	};
	
	// use the real global.setTimeout to schedule a callback to _runCallbacks.
	function _scheduleRealCallback() {
	    if (_realCallbackKey) {
	        global.clearTimeout(_realCallbackKey);
	    }
	
	    var first = _callbackList[0];
	
	    if (!first) {
	        debuglog("_scheduleRealCallback: no more callbacks, not rescheduling");
	        return;
	    }
	
	    var now = _now();
	    var delayMs = Math.min(first.runAt - now, TIMER_CHECK_PERIOD_MS);
	
	    debuglog("_scheduleRealCallback: now:", now, "delay:", delayMs);
	    _realCallbackKey = global.setTimeout(_runCallbacks, delayMs);
	}
	
	function _runCallbacks() {
	    var cb;
	    var now = _now();
	    debuglog("_runCallbacks: now:", now);
	
	    // get the list of things to call
	    var callbacksToRun = [];
	    while (true) {
	        var first = _callbackList[0];
	        if (!first || first.runAt > now) {
	            break;
	        }
	        cb = _callbackList.shift();
	        debuglog("_runCallbacks: popping", cb.key);
	        callbacksToRun.push(cb);
	    }
	
	    // reschedule the real callback before running our functions, to
	    // keep the codepaths the same whether or not our functions
	    // register their own setTimeouts.
	    _scheduleRealCallback();
	
	    for (var i = 0; i < callbacksToRun.length; i++) {
	        cb = callbacksToRun[i];
	        try {
	            cb.func.apply(null, cb.params);
	        } catch (e) {
	            console.error("Uncaught exception in callback function",
	                          e.stack || e);
	        }
	    }
	}
	
	
	/* search in a sorted array.
	 *
	 * returns the index of the last element for which func returns
	 * greater than zero, or array.length if no such element exists.
	 */
	function binarySearch(array, func) {
	    // min is inclusive, max exclusive.
	    var min = 0,
	        max = array.length;
	
	    while (min < max) {
	        var mid = (min + max) >> 1;
	        var res = func(array[mid]);
	        if (res > 0) {
	            // the element at 'mid' is too big; set it as the new max.
	            max = mid;
	        } else {
	            // the element at 'mid' is too small. 'min' is inclusive, so +1.
	            min = mid + 1;
	        }
	    }
	    // presumably, min==max now.
	    return min;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	var PushProcessor = __webpack_require__(201);
	
	/**
	 * This is an internal module. See {@link MatrixClient} for the public class.
	 * @module client
	 */
	var EventEmitter = __webpack_require__(187).EventEmitter;
	var q = __webpack_require__(197);
	var url = __webpack_require__(202);
	
	var httpApi = __webpack_require__(196);
	var MatrixEvent = __webpack_require__(183).MatrixEvent;
	var EventStatus = __webpack_require__(183).EventStatus;
	var EventTimeline = __webpack_require__(192);
	var SearchResult = __webpack_require__(208);
	var StubStore = __webpack_require__(210);
	var webRtcCall = __webpack_require__(211);
	var utils = __webpack_require__(185);
	var contentRepo = __webpack_require__(191);
	var Filter = __webpack_require__(212);
	var SyncApi = __webpack_require__(214);
	var MatrixBaseApis = __webpack_require__(215);
	var MatrixError = httpApi.MatrixError;
	
	var SCROLLBACK_DELAY_MS = 3000;
	var CRYPTO_ENABLED = false;
	
	try {
	    var Crypto = __webpack_require__(216);
	    CRYPTO_ENABLED = true;
	} catch (e) {
	    console.error("olm load error", e);
	    // Olm not installed.
	}
	
	/**
	 * Construct a Matrix Client. Only directly construct this if you want to use
	 * custom modules. Normally, {@link createClient} should be used
	 * as it specifies 'sensible' defaults for these modules.
	 * @constructor
	 * @extends {external:EventEmitter}
	 * @extends {module:base-apis~MatrixBaseApis}
	 *
	 * @param {Object} opts The configuration options for this client.
	 * @param {string} opts.baseUrl Required. The base URL to the client-server
	 * HTTP API.
	 * @param {string} opts.idBaseUrl Optional. The base identity server URL for
	 * identity server requests.
	 * @param {Function} opts.request Required. The function to invoke for HTTP
	 * requests. The value of this property is typically <code>require("request")
	 * </code> as it returns a function which meets the required interface. See
	 * {@link requestFunction} for more information.
	 *
	 * @param {string} opts.accessToken The access_token for this user.
	 *
	 * @param {string} opts.userId The user ID for this user.
	 *
	 * @param {Object=} opts.store The data store to use. If not specified,
	 * this client will not store any HTTP responses.
	 *
	 * @param {string=} opts.deviceId A unique identifier for this device; used for
	 *    tracking things like crypto keys and access tokens.  If not specified,
	 *    end-to-end crypto will be disabled.
	 *
	 * @param {Object=} opts.sessionStore A store to be used for end-to-end crypto
	 *    session data. This should be a {@link
	 *    module:store/session/webstorage~WebStorageSessionStore|WebStorageSessionStore},
	 *    or an object implementing the same interface. If not specified,
	 *    end-to-end crypto will be disabled.
	 *
	 * @param {Object} opts.scheduler Optional. The scheduler to use. If not
	 * specified, this client will not retry requests on failure. This client
	 * will supply its own processing function to
	 * {@link module:scheduler~MatrixScheduler#setProcessFunction}.
	 *
	 * @param {Object} opts.queryParams Optional. Extra query parameters to append
	 * to all requests with this client. Useful for application services which require
	 * <code>?user_id=</code>.
	 *
	 * @param {boolean} [opts.timelineSupport = false] Set to true to enable
	 * improved timeline support ({@link
	 * module:client~MatrixClient#getEventTimeline getEventTimeline}). It is
	 * disabled by default for compatibility with older clients - in particular to
	 * maintain support for back-paginating the live timeline after a '/sync'
	 * result with a gap.
	 */
	function MatrixClient(opts) {
	    MatrixBaseApis.call(this, opts);
	
	    this.store = opts.store || new StubStore();
	
	    this.deviceId = opts.deviceId || null;
	
	    var userId = (opts.userId || null);
	    this.credentials = {
	        userId: userId,
	    };
	
	    this.scheduler = opts.scheduler;
	    if (this.scheduler) {
	        var self = this;
	        this.scheduler.setProcessFunction(function(eventToSend) {
	            var room = self.getRoom(eventToSend.getRoomId());
	            if (eventToSend.status !== EventStatus.SENDING) {
	                _updatePendingEventStatus(room, eventToSend,
	                                          EventStatus.SENDING);
	            }
	            return _sendEventHttpRequest(self, eventToSend);
	        });
	    }
	    this.clientRunning = false;
	
	    this.callList = {
	        // callId: MatrixCall
	    };
	
	    // try constructing a MatrixCall to see if we are running in an environment
	    // which has WebRTC. If we are, listen for and handle m.call.* events.
	    var call = webRtcCall.createNewMatrixCall(this);
	    this._supportsVoip = false;
	    if (call) {
	        setupCallEventHandler(this);
	        this._supportsVoip = true;
	    }
	    this._syncingRetry = null;
	    this._syncApi = null;
	    this._peekSync = null;
	    this._isGuest = false;
	    this._ongoingScrollbacks = {};
	    this.timelineSupport = Boolean(opts.timelineSupport);
	    this.urlPreviewCache = {};
	    this._notifTimelineSet = null;
	
	    this._crypto = null;
	    if (CRYPTO_ENABLED && opts.sessionStore !== null &&
	            userId !== null && this.deviceId !== null) {
	        this._crypto = new Crypto(
	            this, this,
	            opts.sessionStore,
	            userId, this.deviceId
	        );
	
	        this.olmVersion = Crypto.getOlmVersion();
	    }
	}
	utils.inherits(MatrixClient, EventEmitter);
	utils.extend(MatrixClient.prototype, MatrixBaseApis.prototype);
	
	/**
	 * Get the domain for this client's MXID
	 * @return {?string} Domain of this MXID
	 */
	MatrixClient.prototype.getDomain = function() {
	    if (this.credentials && this.credentials.userId) {
	        return this.credentials.userId.replace(/^.*?:/, '');
	    }
	    return null;
	};
	
	/**
	 * Get the local part of the current user ID e.g. "foo" in "@foo:bar".
	 * @return {?string} The user ID localpart or null.
	 */
	MatrixClient.prototype.getUserIdLocalpart = function() {
	    if (this.credentials && this.credentials.userId) {
	        return this.credentials.userId.split(":")[0].substring(1);
	    }
	    return null;
	};
	
	/**
	 * Get the device ID of this client
	 * @return {?string} device ID
	 */
	MatrixClient.prototype.getDeviceId = function() {
	    return this.deviceId;
	};
	
	
	/**
	 * Check if the runtime environment supports VoIP calling.
	 * @return {boolean} True if VoIP is supported.
	 */
	MatrixClient.prototype.supportsVoip = function() {
	    return this._supportsVoip;
	};
	
	/**
	 * Get the current sync state.
	 * @return {?string} the sync state, which may be null.
	 * @see module:client~MatrixClient#event:"sync"
	 */
	MatrixClient.prototype.getSyncState = function() {
	    if (!this._syncApi) { return null; }
	    return this._syncApi.getSyncState();
	};
	
	/**
	 * Return whether the client is configured for a guest account.
	 * @return {boolean} True if this is a guest access_token (or no token is supplied).
	 */
	MatrixClient.prototype.isGuest = function() {
	    return this._isGuest;
	};
	
	/**
	 * Return the provided scheduler, if any.
	 * @return {?module:scheduler~MatrixScheduler} The scheduler or null
	 */
	MatrixClient.prototype.getScheduler = function() {
	    return this.scheduler;
	};
	
	/**
	 * Set whether this client is a guest account. <b>This method is experimental
	 * and may change without warning.</b>
	 * @param {boolean} isGuest True if this is a guest account.
	 */
	MatrixClient.prototype.setGuest = function(isGuest) {
	    // EXPERIMENTAL:
	    // If the token is a macaroon, it should be encoded in it that it is a 'guest'
	    // access token, which means that the SDK can determine this entirely without
	    // the dev manually flipping this flag.
	    this._isGuest = isGuest;
	};
	
	/**
	 * Retry a backed off syncing request immediately. This should only be used when
	 * the user <b>explicitly</b> attempts to retry their lost connection.
	 * @return {boolean} True if this resulted in a request being retried.
	 */
	MatrixClient.prototype.retryImmediately = function() {
	    return this._syncApi.retryImmediately();
	};
	
	/**
	 * Return the global notification EventTimelineSet, if any
	 *
	 * @return {EventTimelineSet} the globl notification EventTimelineSet
	 */
	MatrixClient.prototype.getNotifTimelineSet = function() {
	    return this._notifTimelineSet;
	};
	
	/**
	 * Set the global notification EventTimelineSet
	 *
	 * @param {EventTimelineSet} notifTimelineSet
	 */
	MatrixClient.prototype.setNotifTimelineSet = function(notifTimelineSet) {
	    this._notifTimelineSet = notifTimelineSet;
	};
	
	// Crypto bits
	// ===========
	
	/**
	 * Is end-to-end crypto enabled for this client.
	 * @return {boolean} True if end-to-end is enabled.
	 */
	MatrixClient.prototype.isCryptoEnabled = function() {
	    return this._crypto !== null;
	};
	
	
	/**
	 * Get the Ed25519 key for this device
	 *
	 * @return {?string} base64-encoded ed25519 key. Null if crypto is
	 *    disabled.
	 */
	MatrixClient.prototype.getDeviceEd25519Key = function() {
	    if (!this._crypto) {
	        return null;
	    }
	    return this._crypto.getDeviceEd25519Key();
	};
	
	/**
	 * Upload the device keys to the homeserver and ensure that the
	 * homeserver has enough one-time keys.
	 * @param {number} maxKeys The maximum number of keys to generate
	 * @return {object} A promise that will resolve when the keys are uploaded.
	 */
	MatrixClient.prototype.uploadKeys = function(maxKeys) {
	    if (this._crypto === null) {
	        throw new Error("End-to-end encryption disabled");
	    }
	
	    return this._crypto.uploadKeys(maxKeys);
	};
	
	/**
	 * Download the keys for a list of users and stores the keys in the session
	 * store.
	 * @param {Array} userIds The users to fetch.
	 * @param {bool} forceDownload Always download the keys even if cached.
	 *
	 * @return {Promise} A promise which resolves to a map userId->deviceId->{@link
	 * module:crypto~DeviceInfo|DeviceInfo}.
	 */
	MatrixClient.prototype.downloadKeys = function(userIds, forceDownload) {
	    if (this._crypto === null) {
	        return q.reject(new Error("End-to-end encryption disabled"));
	    }
	    return this._crypto.downloadKeys(userIds, forceDownload);
	};
	
	/**
	 * List the stored device keys for a user id
	 *
	 * @deprecated prefer {@link module:client#getStoredDevicesForUser}
	 *
	 * @param {string} userId the user to list keys for.
	 *
	 * @return {object[]} list of devices with "id", "verified", "blocked",
	 *    "key", and "display_name" parameters.
	 */
	MatrixClient.prototype.listDeviceKeys = function(userId) {
	    if (this._crypto === null) {
	        throw new Error("End-to-end encryption disabled");
	    }
	    return this._crypto.listDeviceKeys(userId);
	};
	
	/**
	 * Get the stored device keys for a user id
	 *
	 * @param {string} userId the user to list keys for.
	 *
	 * @return {module:crypto-deviceinfo[]} list of devices
	 */
	MatrixClient.prototype.getStoredDevicesForUser = function(userId) {
	    if (this._crypto === null) {
	        throw new Error("End-to-end encryption disabled");
	    }
	    return this._crypto.getStoredDevicesForUser(userId);
	};
	
	
	
	/**
	 * Mark the given device as verified
	 *
	 * @param {string} userId owner of the device
	 * @param {string} deviceId unique identifier for the device
	 *
	 * @param {boolean=} verified whether to mark the device as verified. defaults
	 *   to 'true'.
	 *
	 * @fires module:client~event:MatrixClient"deviceVerificationChanged"
	 */
	MatrixClient.prototype.setDeviceVerified = function(userId, deviceId, verified) {
	    if (verified === undefined) {
	        verified = true;
	    }
	    _setDeviceVerification(this, userId, deviceId, verified, null);
	};
	
	
	/**
	 * Mark the given device as blocked/unblocked
	 *
	 * @param {string} userId owner of the device
	 * @param {string} deviceId unique identifier for the device
	 *
	 * @param {boolean=} blocked whether to mark the device as blocked. defaults
	 *   to 'true'.
	 *
	 * @fires module:client~event:MatrixClient"deviceVerificationChanged"
	 */
	MatrixClient.prototype.setDeviceBlocked = function(userId, deviceId, blocked) {
	    if (blocked === undefined) {
	        blocked = true;
	    }
	    _setDeviceVerification(this, userId, deviceId, null, blocked);
	};
	
	function _setDeviceVerification(client, userId, deviceId, verified, blocked) {
	    if (!client._crypto) {
	        throw new Error("End-to-End encryption disabled");
	    }
	    client._crypto.setDeviceVerification(userId, deviceId, verified, blocked);
	    client.emit("deviceVerificationChanged", userId, deviceId);
	}
	
	/**
	 * Get e2e information on the device that sent an event
	 *
	 * @param {MatrixEvent} event event to be checked
	 *
	 * @return {module:crypto/deviceinfo?}
	 */
	MatrixClient.prototype.getEventSenderDeviceInfo = function(event) {
	    if (!this._crypto) {
	        return null;
	    }
	
	    return this._crypto.getEventSenderDeviceInfo(event);
	};
	
	/**
	 * Check if the sender of an event is verified
	 *
	 * @param {MatrixEvent} event event to be checked
	 *
	 * @return {boolean} true if the sender of this event has been verified using
	 * {@link module:client~MatrixClient#setDeviceVerified|setDeviceVerified}.
	 */
	MatrixClient.prototype.isEventSenderVerified = function(event) {
	    var device = this.getEventSenderDeviceInfo(event);
	    if (!device) {
	        return false;
	    }
	    return device.isVerified();
	};
	
	/**
	 * Enable end-to-end encryption for a room.
	 * @param {string} roomId The room ID to enable encryption in.
	 * @param {object} config The encryption config for the room.
	 * @return {Object} A promise that will resolve when encryption is setup.
	 */
	MatrixClient.prototype.setRoomEncryption = function(roomId, config) {
	    if (!this._crypto) {
	        throw new Error("End-to-End encryption disabled");
	    }
	    this._crypto.setRoomEncryption(roomId, config);
	    return q();
	};
	
	/**
	 * Whether encryption is enabled for a room.
	 * @param {string} roomId the room id to query.
	 * @return {bool} whether encryption is enabled.
	 */
	MatrixClient.prototype.isRoomEncrypted = function(roomId) {
	    if (!this._crypto) {
	        return false;
	    }
	
	    return this._crypto.isRoomEncrypted(roomId);
	};
	
	/**
	 * Decrypt a received event according to the algorithm specified in the event.
	 *
	 * @param {MatrixClient} client
	 * @param {object} raw event
	 *
	 * @return {MatrixEvent}
	 */
	function _decryptEvent(client, event) {
	    if (!client._crypto) {
	        return _badEncryptedMessage(event, "**Encryption not enabled**");
	    }
	
	    var decryptionResult;
	    try {
	        decryptionResult = client._crypto.decryptEvent(event);
	    } catch (e) {
	        if (!(e instanceof Crypto.DecryptionError)) {
	            throw e;
	        }
	        return _badEncryptedMessage(event, "**" + e.message + "**");
	    }
	    return new MatrixEvent(
	        event, decryptionResult.payload,
	        decryptionResult.keysProved,
	        decryptionResult.keysClaimed
	    );
	}
	
	function _badEncryptedMessage(event, reason) {
	    return new MatrixEvent(event, {
	        type: "m.room.message",
	        content: {
	            msgtype: "m.bad.encrypted",
	            body: reason,
	            content: event.content,
	        },
	    });
	}
	
	// Room ops
	// ========
	
	/**
	 * Get the room for the given room ID.
	 * This function will return a valid room for any room for which a Room event
	 * has been emitted. Note in particular that other events, eg. RoomState.members
	 * will be emitted for a room before this function will return the given room.
	 * @param {string} roomId The room ID
	 * @return {Room} The Room or null if it doesn't exist or there is no data store.
	 */
	MatrixClient.prototype.getRoom = function(roomId) {
	    return this.store.getRoom(roomId);
	};
	
	/**
	 * Retrieve all known rooms.
	 * @return {Room[]} A list of rooms, or an empty list if there is no data store.
	 */
	MatrixClient.prototype.getRooms = function() {
	    return this.store.getRooms();
	};
	
	/**
	 * Retrieve a user.
	 * @param {string} userId The user ID to retrieve.
	 * @return {?User} A user or null if there is no data store or the user does
	 * not exist.
	 */
	MatrixClient.prototype.getUser = function(userId) {
	    return this.store.getUser(userId);
	};
	
	/**
	 * Retrieve all known users.
	 * @return {User[]} A list of users, or an empty list if there is no data store.
	 */
	MatrixClient.prototype.getUsers = function() {
	    return this.store.getUsers();
	};
	
	// User Account Data operations
	// ============================
	
	/**
	 * Set account data event for the current user.
	 * @param {string} eventType The event type
	 * @param {Object} content the contents object for the event
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setAccountData = function(eventType, contents, callback) {
	    var path = utils.encodeUri("/user/$userId/account_data/$type", {
	        $userId: this.credentials.userId,
	        $type: eventType,
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, contents
	    );
	};
	
	/**
	 * Get account data event of given type for the current user.
	 * @param {string} eventType The event type
	 * @param {module:client.callback} callback Optional.
	 * @return {?object} The contents of the given account data event
	 */
	MatrixClient.prototype.getAccountData = function(eventType) {
	    return this.store.getAccountData(eventType);
	};
	
	// Room operations
	// ===============
	
	/**
	 * Join a room. If you have already joined the room, this will no-op.
	 * @param {string} roomIdOrAlias The room ID or room alias to join.
	 * @param {Object} opts Options when joining the room.
	 * @param {boolean} opts.syncRoom True to do a room initial sync on the resulting
	 * room. If false, the <strong>returned Room object will have no current state.
	 * </strong> Default: true.
	 * @param {boolean} opts.inviteSignUrl If the caller has a keypair 3pid invite,
	 *                                     the signing URL is passed in this parameter.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: Room object.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.joinRoom = function(roomIdOrAlias, opts, callback) {
	    // to help people when upgrading..
	    if (utils.isFunction(opts)) {
	        throw new Error("Expected 'opts' object, got function.");
	    }
	    opts = opts || {};
	    if (opts.syncRoom === undefined) { opts.syncRoom = true; }
	
	    var room = this.getRoom(roomIdOrAlias);
	    if (room && room.hasMembershipState(this.credentials.userId, "join")) {
	        return q(room);
	    }
	
	    var sign_promise = q();
	
	    if (opts.inviteSignUrl) {
	        sign_promise = this._http.requestOtherUrl(
	            undefined, 'POST',
	            opts.inviteSignUrl, { mxid: this.credentials.userId }
	        );
	    }
	
	    var defer = q.defer();
	
	    var self = this;
	    sign_promise.then(function(signed_invite_object) {
	        var data = {};
	        if (signed_invite_object) {
	            data.third_party_signed = signed_invite_object;
	        }
	
	        var path = utils.encodeUri("/join/$roomid", { $roomid: roomIdOrAlias});
	        return self._http.authedRequest(undefined, "POST", path, undefined, data);
	    }).then(function(res) {
	        var roomId = res.room_id;
	        var syncApi = new SyncApi(self, self._clientOpts);
	        var room = syncApi.createRoom(roomId);
	        if (opts.syncRoom) {
	            // v2 will do this for us
	            // return syncApi.syncRoom(room);
	        }
	        return q(room);
	    }).done(function(room) {
	        _resolve(callback, defer, room);
	    }, function(err) {
	        _reject(callback, defer, err);
	    });
	    return defer.promise;
	};
	
	/**
	 * Resend an event.
	 * @param {MatrixEvent} event The event to resend.
	 * @param {Room} room Optional. The room the event is in. Will update the
	 * timeline entry if provided.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.resendEvent = function(event, room) {
	    _updatePendingEventStatus(room, event, EventStatus.SENDING);
	    return _sendEvent(this, room, event);
	};
	
	/**
	 * Cancel a queued or unsent event.
	 *
	 * @param {MatrixEvent} event   Event to cancel
	 * @throws Error if the event is not in QUEUED or NOT_SENT state
	 */
	MatrixClient.prototype.cancelPendingEvent = function(event) {
	    if ([EventStatus.QUEUED, EventStatus.NOT_SENT].indexOf(event.status) < 0) {
	        throw new Error("cannot cancel an event with status " + event.status);
	    }
	
	    // first tell the scheduler to forget about it, if it's queued
	    if (this.scheduler) {
	        this.scheduler.removeEventFromQueue(event);
	    }
	
	    // then tell the room about the change of state, which will remove it
	    // from the room's list of pending events.
	    var room = this.getRoom(event.getRoomId());
	    _updatePendingEventStatus(room, event, EventStatus.CANCELLED);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} name
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setRoomName = function(roomId, name, callback) {
	    return this.sendStateEvent(roomId, "m.room.name", {name: name},
	                               undefined, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} topic
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setRoomTopic = function(roomId, topic, callback) {
	    return this.sendStateEvent(roomId, "m.room.topic", {topic: topic},
	                               undefined, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} tagName name of room tag to be set
	 * @param {object} metadata associated with that tag to be stored
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setRoomTag = function(roomId, tagName, metadata, callback) {
	    var path = utils.encodeUri("/user/$userId/rooms/$roomId/tags/$tag", {
	        $userId: this.credentials.userId,
	        $roomId: roomId,
	        $tag: tagName,
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, metadata
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} tagName name of room tag to be removed
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.deleteRoomTag = function(roomId, tagName, callback) {
	    var path = utils.encodeUri("/user/$userId/rooms/$roomId/tags/$tag", {
	        $userId: this.credentials.userId,
	        $roomId: roomId,
	        $tag: tagName,
	    });
	    return this._http.authedRequest(
	        callback, "DELETE", path, undefined, undefined
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} eventType event type to be set
	 * @param {object} content event content
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setRoomAccountData = function(roomId, eventType,
	                                                     content, callback) {
	    var path = utils.encodeUri("/user/$userId/rooms/$roomId/account_data/$type", {
	        $userId: this.credentials.userId,
	        $roomId: roomId,
	        $type: eventType,
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, content
	    );
	};
	
	/**
	 * Set a user's power level.
	 * @param {string} roomId
	 * @param {string} userId
	 * @param {Number} powerLevel
	 * @param {MatrixEvent} event
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setPowerLevel = function(roomId, userId, powerLevel,
	                                                event, callback) {
	    var content = {
	        users: {}
	    };
	    if (event && event.getType() === "m.room.power_levels") {
	        // take a copy of the content to ensure we don't corrupt
	        // existing client state with a failed power level change
	        content = utils.deepCopy(event.getContent());
	    }
	    content.users[userId] = powerLevel;
	    var path = utils.encodeUri("/rooms/$roomId/state/m.room.power_levels", {
	        $roomId: roomId
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, content
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} eventType
	 * @param {Object} content
	 * @param {string} txnId Optional.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendEvent = function(roomId, eventType, content, txnId,
	                                            callback) {
	    if (utils.isFunction(txnId)) { callback = txnId; txnId = undefined; }
	
	    if (!txnId) {
	        txnId = this.makeTxnId();
	    }
	
	    // we always construct a MatrixEvent when sending because the store and
	    // scheduler use them. We'll extract the params back out if it turns out
	    // the client has no scheduler or store.
	    var room = this.getRoom(roomId);
	    var localEvent = new MatrixEvent({
	        event_id: "~" + roomId + ":" + txnId,
	        user_id: this.credentials.userId,
	        room_id: roomId,
	        type: eventType,
	        origin_server_ts: new Date().getTime(),
	        content: content
	    });
	    localEvent._txnId = txnId;
	    localEvent.status = EventStatus.SENDING;
	
	    // add this event immediately to the local store as 'sending'.
	    if (room) {
	        room.addPendingEvent(localEvent, txnId);
	    }
	
	    return _sendEvent(this, room, localEvent, callback);
	};
	
	
	// encrypts the event if necessary
	// adds the event to the queue, or sends it
	// marks the event as sent/unsent
	// returns a promise which resolves with the result of the send request
	function _sendEvent(client, room, event, callback) {
	    // Add an extra q() to turn synchronous exceptions into promise rejections,
	    // so that we can handle synchronous and asynchronous exceptions with the
	    // same code path.
	    return q().then(function() {
	        var encryptionPromise = null;
	        if (client._crypto) {
	            encryptionPromise = client._crypto.encryptEventIfNeeded(event, room);
	        }
	        if (encryptionPromise) {
	            _updatePendingEventStatus(room, event, EventStatus.ENCRYPTING);
	            encryptionPromise = encryptionPromise.then(function() {
	                _updatePendingEventStatus(room, event, EventStatus.SENDING);
	            });
	        }
	        return encryptionPromise;
	    }).then(function() {
	        var promise;
	        // this event may be queued
	        if (client.scheduler) {
	            // if this returns a promsie then the scheduler has control now and will
	            // resolve/reject when it is done. Internally, the scheduler will invoke
	            // processFn which is set to this._sendEventHttpRequest so the same code
	            // path is executed regardless.
	            promise = client.scheduler.queueEvent(event);
	            if (promise && client.scheduler.getQueueForEvent(event).length > 1) {
	                // event is processed FIFO so if the length is 2 or more we know
	                // this event is stuck behind an earlier event.
	                _updatePendingEventStatus(room, event, EventStatus.QUEUED);
	            }
	        }
	
	        if (!promise) {
	            promise = _sendEventHttpRequest(client, event);
	        }
	        return promise;
	    }).then(function(res) {  // the request was sent OK
	        if (room) {
	            room.updatePendingEvent(event, EventStatus.SENT, res.event_id);
	        }
	        if (callback) {
	            callback(null, res);
	        }
	        return res;
	    }, function(err) {
	        // the request failed to send.
	        console.error("Error sending event", err.stack || err);
	
	        try {
	            _updatePendingEventStatus(room, event, EventStatus.NOT_SENT);
	
	            if (callback) {
	                callback(err);
	            }
	        } catch (err2) {
	            console.error("Exception in error handler!", err2.stack || err);
	        }
	        throw err;
	    });
	}
	
	function _updatePendingEventStatus(room, event, newStatus) {
	    if (room) {
	        room.updatePendingEvent(event, newStatus);
	    } else {
	        event.status = newStatus;
	    }
	}
	
	function _sendEventHttpRequest(client, event) {
	    var txnId = event._txnId ? event._txnId : client.makeTxnId();
	
	    var pathParams = {
	        $roomId: event.getRoomId(),
	        $eventType: event.getWireType(),
	        $stateKey: event.getStateKey(),
	        $txnId: txnId,
	    };
	
	    var path;
	
	    if (event.isState()) {
	        var pathTemplate = "/rooms/$roomId/state/$eventType";
	        if (event.getStateKey() && event.getStateKey().length > 0) {
	            pathTemplate = "/rooms/$roomId/state/$eventType/$stateKey";
	        }
	        path = utils.encodeUri(pathTemplate, pathParams);
	    }
	    else {
	        path = utils.encodeUri(
	            "/rooms/$roomId/send/$eventType/$txnId", pathParams
	        );
	    }
	
	    return client._http.authedRequest(
	        undefined, "PUT", path, undefined, event.getWireContent()
	    );
	}
	
	/**
	 * @param {string} roomId
	 * @param {Object} content
	 * @param {string} txnId Optional.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendMessage = function(roomId, content, txnId, callback) {
	    if (utils.isFunction(txnId)) { callback = txnId; txnId = undefined; }
	    return this.sendEvent(
	        roomId, "m.room.message", content, txnId, callback
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} body
	 * @param {string} txnId Optional.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendTextMessage = function(roomId, body, txnId, callback) {
	    var content = {
	         msgtype: "m.text",
	         body: body
	    };
	    return this.sendMessage(roomId, content, txnId, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} body
	 * @param {string} txnId Optional.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendNotice = function(roomId, body, txnId, callback) {
	    var content = {
	         msgtype: "m.notice",
	         body: body
	    };
	    return this.sendMessage(roomId, content, txnId, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} body
	 * @param {string} txnId Optional.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendEmoteMessage = function(roomId, body, txnId, callback) {
	    var content = {
	         msgtype: "m.emote",
	         body: body
	    };
	    return this.sendMessage(roomId, content, txnId, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} url
	 * @param {Object} info
	 * @param {string} text
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendImageMessage = function(roomId, url, info, text, callback) {
	    if (utils.isFunction(text)) { callback = text; text = undefined; }
	    if (!text) { text = "Image"; }
	    var content = {
	         msgtype: "m.image",
	         url: url,
	         info: info,
	         body: text
	    };
	    return this.sendMessage(roomId, content, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} body
	 * @param {string} htmlBody
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendHtmlMessage = function(roomId, body, htmlBody, callback) {
	    var content = {
	        msgtype: "m.text",
	        format: "org.matrix.custom.html",
	        body: body,
	        formatted_body: htmlBody
	    };
	    return this.sendMessage(roomId, content, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} body
	 * @param {string} htmlBody
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendHtmlNotice = function(roomId, body, htmlBody, callback) {
	    var content = {
	        msgtype: "m.notice",
	        format: "org.matrix.custom.html",
	        body: body,
	        formatted_body: htmlBody
	    };
	    return this.sendMessage(roomId, content, callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} body
	 * @param {string} htmlBody
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendHtmlEmote = function(roomId, body, htmlBody, callback) {
	    var content = {
	        msgtype: "m.emote",
	        format: "org.matrix.custom.html",
	        body: body,
	        formatted_body: htmlBody
	    };
	    return this.sendMessage(roomId, content, callback);
	};
	
	/**
	 * Send a receipt.
	 * @param {Event} event The event being acknowledged
	 * @param {string} receiptType The kind of receipt e.g. "m.read"
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendReceipt = function(event, receiptType, callback) {
	    if (this.isGuest()) {
	        return q({}); // guests cannot send receipts so don't bother.
	    }
	
	    var path = utils.encodeUri("/rooms/$roomId/receipt/$receiptType/$eventId", {
	        $roomId: event.getRoomId(),
	        $receiptType: receiptType,
	        $eventId: event.getId()
	    });
	    var promise = this._http.authedRequest(
	        callback, "POST", path, undefined, {}
	    );
	
	    var room = this.getRoom(event.getRoomId());
	    if (room) {
	        room._addLocalEchoReceipt(this.credentials.userId, event, receiptType);
	    }
	    return promise;
	};
	
	/**
	 * Send a read receipt.
	 * @param {Event} event The event that has been read.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendReadReceipt = function(event, callback) {
	    return this.sendReceipt(event, "m.read", callback);
	};
	
	
	/**
	 * Get a preview of the given URL as of (roughly) the given point in time,
	 * described as an object with OpenGraph keys and associated values.
	 * Attributes may be synthesized where actual OG metadata is lacking.
	 * Caches results to prevent hammering the server.
	 * @param {string} url The URL to get preview data for
	 * @param {Number} ts The preferred point in time that the preview should
	 * describe (ms since epoch).  The preview returned will either be the most
	 * recent one preceding this timestamp if available, or failing that the next
	 * most recent available preview.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: Object of OG metadata.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 * May return synthesized attributes if the URL lacked OG meta.
	 */
	MatrixClient.prototype.getUrlPreview = function(url, ts, callback) {
	    var key = ts + "_" + url;
	    var og = this.urlPreviewCache[key];
	    if (og) {
	        return q(og);
	    }
	
	    var self = this;
	    return this._http.authedRequestWithPrefix(
	        callback, "GET", "/preview_url", {
	            url: url,
	            ts: ts,
	        }, undefined, httpApi.PREFIX_MEDIA_R0
	    ).then(function(response) {
	        // TODO: expire cache occasionally
	        self.urlPreviewCache[key] = response;
	        return response;
	    });
	};
	
	/**
	 * @param {string} roomId
	 * @param {boolean} isTyping
	 * @param {Number} timeoutMs
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.sendTyping = function(roomId, isTyping, timeoutMs, callback) {
	    if (this.isGuest()) {
	        return q({}); // guests cannot send typing notifications so don't bother.
	    }
	
	    var path = utils.encodeUri("/rooms/$roomId/typing/$userId", {
	        $roomId: roomId,
	        $userId: this.credentials.userId
	    });
	    var data = {
	        typing: isTyping
	    };
	    if (isTyping) {
	        data.timeout = timeoutMs ? timeoutMs : 20000;
	    }
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, data
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} userId
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.invite = function(roomId, userId, callback) {
	    return _membershipChange(this, roomId, userId, "invite", undefined,
	        callback);
	};
	
	/**
	 * Invite a user to a room based on their email address.
	 * @param {string} roomId The room to invite the user to.
	 * @param {string} email The email address to invite.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.inviteByEmail = function(roomId, email, callback) {
	    return this.inviteByThreePid(
	        roomId, "email", email, callback
	    );
	};
	
	/**
	 * Invite a user to a room based on a third-party identifier.
	 * @param {string} roomId The room to invite the user to.
	 * @param {string} medium The medium to invite the user e.g. "email".
	 * @param {string} address The address for the specified medium.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.inviteByThreePid = function(roomId, medium, address, callback) {
	    var path = utils.encodeUri(
	        "/rooms/$roomId/invite",
	        { $roomId: roomId }
	    );
	
	    var identityServerUrl = this.getIdentityServerUrl();
	    if (!identityServerUrl) {
	        return q.reject(new MatrixError({
	            error: "No supplied identity server URL",
	            errcode: "ORG.MATRIX.JSSDK_MISSING_PARAM"
	        }));
	    }
	    if (identityServerUrl.indexOf("http://") === 0 ||
	            identityServerUrl.indexOf("https://") === 0) {
	        // this request must not have the protocol part because reasons
	        identityServerUrl = identityServerUrl.split("://")[1];
	    }
	
	    return this._http.authedRequest(callback, "POST", path, undefined, {
	        id_server: identityServerUrl,
	        medium: medium,
	        address: address
	    });
	};
	
	/**
	 * @param {string} roomId
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.leave = function(roomId, callback) {
	    return _membershipChange(this, roomId, undefined, "leave", undefined,
	        callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} userId
	 * @param {string} reason Optional.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.ban = function(roomId, userId, reason, callback) {
	    return _membershipChange(this, roomId, userId, "ban", reason,
	        callback);
	};
	
	/**
	 * @param {string} roomId
	 * @param {boolean} deleteRoom True to delete the room from the store on success.
	 * Default: true.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.forget = function(roomId, deleteRoom, callback) {
	    if (deleteRoom === undefined) {
	        deleteRoom = true;
	    }
	    var promise = _membershipChange(this, roomId, undefined, "forget", undefined,
	        callback);
	    if (!deleteRoom) {
	        return promise;
	    }
	    var self = this;
	    return promise.then(function(response) {
	        self.store.removeRoom(roomId);
	        self.emit("deleteRoom", roomId);
	        return response;
	    });
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} userId
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.unban = function(roomId, userId, callback) {
	    // unbanning = set their state to leave
	    return _setMembershipState(
	        this, roomId, userId, "leave", undefined, callback
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} userId
	 * @param {string} reason Optional.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.kick = function(roomId, userId, reason, callback) {
	    return _setMembershipState(
	        this, roomId, userId, "leave", reason, callback
	    );
	};
	
	/**
	 * This is an internal method.
	 * @param {MatrixClient} client
	 * @param {string} roomId
	 * @param {string} userId
	 * @param {string} membershipValue
	 * @param {string} reason
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	function _setMembershipState(client, roomId, userId, membershipValue, reason,
	                             callback) {
	    if (utils.isFunction(reason)) { callback = reason; reason = undefined; }
	
	    var path = utils.encodeUri(
	        "/rooms/$roomId/state/m.room.member/$userId",
	        { $roomId: roomId, $userId: userId}
	    );
	
	    return client._http.authedRequest(callback, "PUT", path, undefined, {
	        membership: membershipValue,
	        reason: reason
	    });
	}
	
	/**
	 * This is an internal method.
	 * @param {MatrixClient} client
	 * @param {string} roomId
	 * @param {string} userId
	 * @param {string} membership
	 * @param {string} reason
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	function _membershipChange(client, roomId, userId, membership, reason, callback) {
	    if (utils.isFunction(reason)) { callback = reason; reason = undefined; }
	
	    var path = utils.encodeUri("/rooms/$room_id/$membership", {
	        $room_id: roomId,
	        $membership: membership
	    });
	    return client._http.authedRequest(
	        callback, "POST", path, undefined, {
	            user_id: userId,  // may be undefined e.g. on leave
	            reason: reason
	        }
	    );
	}
	
	/**
	 * Obtain a dict of actions which should be performed for this event according
	 * to the push rules for this user.  Caches the dict on the event.
	 * @param {MatrixEvent} event The event to get push actions for.
	 * @return {module:pushprocessor~PushAction} A dict of actions to perform.
	 */
	MatrixClient.prototype.getPushActionsForEvent = function(event) {
	    if (!event.getPushActions()) {
	        var pushProcessor = new PushProcessor(this);
	        event.setPushActions(pushProcessor.actionsForEvent(event));
	    }
	    return event.getPushActions();
	};
	
	// Profile operations
	// ==================
	
	/**
	 * @param {string} info The kind of info to set (e.g. 'avatar_url')
	 * @param {Object} data The JSON object to set.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setProfileInfo = function(info, data, callback) {
	    var path = utils.encodeUri("/profile/$userId/$info", {
	        $userId: this.credentials.userId,
	        $info: info
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, data
	    );
	};
	
	/**
	 * @param {string} name
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setDisplayName = function(name, callback) {
	    return this.setProfileInfo(
	        "displayname", { displayname: name }, callback
	    );
	};
	
	/**
	 * @param {string} url
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setAvatarUrl = function(url, callback) {
	    return this.setProfileInfo(
	        "avatar_url", { avatar_url: url }, callback
	    );
	};
	
	/**
	 * Turn an MXC URL into an HTTP one. <strong>This method is experimental and
	 * may change.</strong>
	 * @param {string} mxcUrl The MXC URL
	 * @param {Number} width The desired width of the thumbnail.
	 * @param {Number} height The desired height of the thumbnail.
	 * @param {string} resizeMethod The thumbnail resize method to use, either
	 * "crop" or "scale".
	 * @param {Boolean} allowDirectLinks If true, return any non-mxc URLs
	 * directly. Fetching such URLs will leak information about the user to
	 * anyone they share a room with. If false, will return null for such URLs.
	 * @return {?string} the avatar URL or null.
	 */
	MatrixClient.prototype.mxcUrlToHttp =
	        function(mxcUrl, width, height, resizeMethod, allowDirectLinks) {
	    return contentRepo.getHttpUriForMxc(
	        this.baseUrl, mxcUrl, width, height, resizeMethod, allowDirectLinks
	    );
	};
	
	/**
	 * @param {Object} opts Options to apply
	 * @param {string} opts.presence One of "online", "offline" or "unavailable"
	 * @param {string} opts.status_msg The status message to attach.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 * @throws If 'presence' isn't a valid presence enum value.
	 */
	MatrixClient.prototype.setPresence = function(opts, callback) {
	    var path = utils.encodeUri("/presence/$userId/status", {
	        $userId: this.credentials.userId
	    });
	
	    if (typeof opts === "string") {
	      opts = { presence: opts };
	    }
	
	    var validStates = ["offline", "online", "unavailable"];
	    if (validStates.indexOf(opts.presence) == -1) {
	        throw new Error("Bad presence value: " + opts.presence);
	    }
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, opts
	    );
	};
	
	/**
	 * Retrieve older messages from the given room and put them in the timeline.
	 *
	 * If this is called multiple times whilst a request is ongoing, the <i>same</i>
	 * Promise will be returned. If there was a problem requesting scrollback, there
	 * will be a small delay before another request can be made (to prevent tight-looping
	 * when there is no connection).
	 *
	 * @param {Room} room The room to get older messages in.
	 * @param {Integer} limit Optional. The maximum number of previous events to
	 * pull in. Default: 30.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: Room. If you are at the beginning
	 * of the timeline, <code>Room.oldState.paginationToken</code> will be
	 * <code>null</code>.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.scrollback = function(room, limit, callback) {
	    if (utils.isFunction(limit)) { callback = limit; limit = undefined; }
	    limit = limit || 30;
	    var timeToWaitMs = 0;
	
	    var info = this._ongoingScrollbacks[room.roomId] || {};
	    if (info.promise) {
	        return info.promise;
	    }
	    else if (info.errorTs) {
	        var timeWaitedMs = Date.now() - info.errorTs;
	        timeToWaitMs = Math.max(SCROLLBACK_DELAY_MS - timeWaitedMs, 0);
	    }
	
	    if (room.oldState.paginationToken === null) {
	        return q(room); // already at the start.
	    }
	    // attempt to grab more events from the store first
	    var numAdded = this.store.scrollback(room, limit).length;
	    if (numAdded === limit) {
	        // store contained everything we needed.
	        return q(room);
	    }
	    // reduce the required number of events appropriately
	    limit = limit - numAdded;
	
	    var path = utils.encodeUri(
	        "/rooms/$roomId/messages", {$roomId: room.roomId}
	    );
	    var params = {
	        from: room.oldState.paginationToken,
	        limit: limit,
	        dir: 'b'
	    };
	    var defer = q.defer();
	    info = {
	        promise: defer.promise,
	        errorTs: null
	    };
	    var self = this;
	    // wait for a time before doing this request
	    // (which may be 0 in order not to special case the code paths)
	    q.delay(timeToWaitMs).then(function() {
	        return self._http.authedRequest(callback, "GET", path, params);
	    }).done(function(res) {
	        var matrixEvents = utils.map(res.chunk, _PojoToMatrixEventMapper(self));
	        room.addEventsToTimeline(matrixEvents, true, room.getLiveTimeline());
	        room.oldState.paginationToken = res.end;
	        if (res.chunk.length === 0) {
	            room.oldState.paginationToken = null;
	        }
	        self.store.storeEvents(room, matrixEvents, res.end, true);
	        self._ongoingScrollbacks[room.roomId] = null;
	        _resolve(callback, defer, room);
	    }, function(err) {
	        self._ongoingScrollbacks[room.roomId] = {
	            errorTs: Date.now()
	        };
	        _reject(callback, defer, err);
	    });
	    this._ongoingScrollbacks[room.roomId] = info;
	    return defer.promise;
	};
	
	/**
	 * Take an EventContext, and back/forward-fill results.
	 *
	 * @param {module:models/event-context.EventContext} eventContext  context
	 *    object to be updated
	 * @param {Object}  opts
	 * @param {boolean} opts.backwards  true to fill backwards, false to go forwards
	 * @param {boolean} opts.limit      number of events to request
	 *
	 * @return {module:client.Promise} Resolves: updated EventContext object
	 * @return {Error} Rejects: with an error response.
	 */
	MatrixClient.prototype.paginateEventContext = function(eventContext, opts) {
	    // TODO: we should implement a backoff (as per scrollback()) to deal more
	    // nicely with HTTP errors.
	    opts = opts || {};
	    var backwards = opts.backwards || false;
	
	    var token = eventContext.getPaginateToken(backwards);
	    if (!token) {
	        // no more results.
	        return q.reject(new Error("No paginate token"));
	    }
	
	    var dir = backwards ? 'b' : 'f';
	    var pendingRequest = eventContext._paginateRequests[dir];
	
	    if (pendingRequest) {
	        // already a request in progress - return the existing promise
	        return pendingRequest;
	    }
	
	    var path = utils.encodeUri(
	        "/rooms/$roomId/messages", {$roomId: eventContext.getEvent().getRoomId()}
	    );
	    var params = {
	        from: token,
	        limit: ('limit' in opts) ? opts.limit : 30,
	        dir: dir
	    };
	
	    var self = this;
	    var promise =
	        self._http.authedRequest(undefined, "GET", path, params
	    ).then(function(res) {
	        var token = res.end;
	        if (res.chunk.length === 0) {
	            token = null;
	        } else {
	            var matrixEvents = utils.map(res.chunk, self.getEventMapper());
	            if (backwards) {
	                // eventContext expects the events in timeline order, but
	                // back-pagination returns them in reverse order.
	                matrixEvents.reverse();
	            }
	            eventContext.addEvents(matrixEvents, backwards);
	        }
	        eventContext.setPaginateToken(token, backwards);
	        return eventContext;
	    }).finally(function() {
	        eventContext._paginateRequests[dir] = null;
	    });
	    eventContext._paginateRequests[dir] = promise;
	
	    return promise;
	};
	
	/**
	 * Get an EventTimeline for the given event
	 *
	 * <p>If the EventTimelineSet object already has the given event in its store, the
	 * corresponding timeline will be returned. Otherwise, a /context request is
	 * made, and used to construct an EventTimeline.
	 *
	 * @param {EventTimelineSet} timelineSet  The timelineSet to look for the event in
	 * @param {string} eventId  The ID of the event to look for
	 *
	 * @return {module:client.Promise} Resolves:
	 *    {@link module:models/event-timeline~EventTimeline} including the given
	 *    event
	 */
	MatrixClient.prototype.getEventTimeline = function(timelineSet, eventId) {
	    // don't allow any timeline support unless it's been enabled.
	    if (!this.timelineSupport) {
	        throw new Error("timeline support is disabled. Set the 'timelineSupport'" +
	                    " parameter to true when creating MatrixClient to enable" +
	                    " it.");
	    }
	
	    if (timelineSet.getTimelineForEvent(eventId)) {
	        return q(timelineSet.getTimelineForEvent(eventId));
	    }
	
	    var path = utils.encodeUri(
	        "/rooms/$roomId/context/$eventId", {
	            $roomId: timelineSet.room.roomId,
	            $eventId: eventId,
	        }
	    );
	
	    // TODO: we should implement a backoff (as per scrollback()) to deal more
	    // nicely with HTTP errors.
	    var self = this;
	    var promise =
	        self._http.authedRequest(undefined, "GET", path
	    ).then(function(res) {
	        if (!res.event) {
	            throw new Error("'event' not in '/context' result - homeserver too old?");
	        }
	
	        // by the time the request completes, the event might have ended up in
	        // the timeline.
	        if (timelineSet.getTimelineForEvent(eventId)) {
	            return timelineSet.getTimelineForEvent(eventId);
	        }
	
	        // we start with the last event, since that's the point at which we
	        // have known state.
	        // events_after is already backwards; events_before is forwards.
	        res.events_after.reverse();
	        var events = res.events_after
	            .concat([res.event])
	            .concat(res.events_before);
	        var matrixEvents = utils.map(events, self.getEventMapper());
	
	        var timeline = timelineSet.getTimelineForEvent(matrixEvents[0].getId());
	        if (!timeline) {
	            timeline = timelineSet.addTimeline();
	            timeline.initialiseState(utils.map(res.state,
	                                               self.getEventMapper()));
	            timeline.getState(EventTimeline.FORWARDS).paginationToken = res.end;
	        }
	        timelineSet.addEventsToTimeline(matrixEvents, true, timeline, res.start);
	
	        // there is no guarantee that the event ended up in "timeline" (we
	        // might have switched to a neighbouring timeline) - so check the
	        // room's index again. On the other hand, there's no guarantee the
	        // event ended up anywhere, if it was later redacted, so we just
	        // return the timeline we first thought of.
	        var tl = timelineSet.getTimelineForEvent(eventId) || timeline;
	        return tl;
	    });
	    return promise;
	};
	
	
	/**
	 * Take an EventTimeline, and back/forward-fill results.
	 *
	 * @param {module:models/event-timeline~EventTimeline} eventTimeline timeline
	 *    object to be updated
	 * @param {Object}   [opts]
	 * @param {bool}     [opts.backwards = false]  true to fill backwards,
	 *    false to go forwards
	 * @param {number}   [opts.limit = 30]         number of events to request
	 *
	 * @return {module:client.Promise} Resolves to a boolean: false if there are no
	 *    events and we reached either end of the timeline; else true.
	 */
	MatrixClient.prototype.paginateEventTimeline = function(eventTimeline, opts) {
	    var isNotifTimeline = (eventTimeline.getTimelineSet() === this._notifTimelineSet);
	
	    // TODO: we should implement a backoff (as per scrollback()) to deal more
	    // nicely with HTTP errors.
	    opts = opts || {};
	    var backwards = opts.backwards || false;
	
	    if (isNotifTimeline) {
	        if (!backwards) {
	            throw new Error("paginateNotifTimeline can only paginate backwards");
	        }
	    }
	
	    var dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;
	
	    var token = eventTimeline.getPaginationToken(dir);
	    if (!token) {
	        // no token - no results.
	        return q(false);
	    }
	
	    var pendingRequest = eventTimeline._paginationRequests[dir];
	
	    if (pendingRequest) {
	        // already a request in progress - return the existing promise
	        return pendingRequest;
	    }
	
	    var path, params, promise;
	    var self = this;
	
	    if (isNotifTimeline) {
	        path = "/notifications";
	        params = {
	            limit: ('limit' in opts) ? opts.limit : 30,
	            only: 'highlight',
	        };
	
	        if (token && token !== "end") {
	            params.from = token;
	        }
	
	        promise =
	            this._http.authedRequestWithPrefix(undefined, "GET", path, params,
	                undefined, httpApi.PREFIX_UNSTABLE
	        ).then(function(res) {
	            var token = res.next_token;
	            var matrixEvents = [];
	
	            for (var i = 0; i < res.notifications.length; i++) {
	                var notification = res.notifications[i];
	                var event = self.getEventMapper()(notification.event);
	                event.setPushActions(
	                    PushProcessor.actionListToActionsObject(notification.actions)
	                );
	                event.event.room_id = notification.room_id; // XXX: gutwrenching
	                matrixEvents[i] = event;
	            }
	
	            eventTimeline.getTimelineSet()
	                .addEventsToTimeline(matrixEvents, backwards, eventTimeline, token);
	
	            // if we've hit the end of the timeline, we need to stop trying to
	            // paginate. We need to keep the 'forwards' token though, to make sure
	            // we can recover from gappy syncs.
	            if (backwards && !res.next_token) {
	                eventTimeline.setPaginationToken(null, dir);
	            }
	            return res.next_token ? true : false;
	        }).finally(function() {
	            eventTimeline._paginationRequests[dir] = null;
	        });
	        eventTimeline._paginationRequests[dir] = promise;
	    }
	    else {
	        var room = this.getRoom(eventTimeline.getRoomId());
	        if (!room) {
	            throw new Error("Unknown room " + eventTimeline.getRoomId());
	        }
	
	        path = utils.encodeUri(
	            "/rooms/$roomId/messages", {$roomId: eventTimeline.getRoomId()}
	        );
	        params = {
	            from: token,
	            limit: ('limit' in opts) ? opts.limit : 30,
	            dir: dir
	        };
	
	        var filter = eventTimeline.getFilter();
	        if (filter) {
	            // XXX: it's horrific that /messages' filter parameter doesn't match
	            // /sync's one - see https://matrix.org/jira/browse/SPEC-451
	            params.filter = JSON.stringify(filter.getRoomTimelineFilterComponent());
	        }
	
	        promise =
	            this._http.authedRequest(undefined, "GET", path, params
	        ).then(function(res) {
	            var token = res.end;
	            var matrixEvents = utils.map(res.chunk, self.getEventMapper());
	            eventTimeline.getTimelineSet()
	                .addEventsToTimeline(matrixEvents, backwards, eventTimeline, token);
	
	            // if we've hit the end of the timeline, we need to stop trying to
	            // paginate. We need to keep the 'forwards' token though, to make sure
	            // we can recover from gappy syncs.
	            if (backwards && res.end == res.start) {
	                eventTimeline.setPaginationToken(null, dir);
	            }
	            return res.end != res.start;
	        }).finally(function() {
	            eventTimeline._paginationRequests[dir] = null;
	        });
	        eventTimeline._paginationRequests[dir] = promise;
	    }
	
	    return promise;
	};
	
	/**
	 * Reset the notifTimelineSet entirely, paginating in some historical notifs as
	 * a starting point for subsequent pagination.
	 */
	MatrixClient.prototype.resetNotifTimelineSet = function() {
	    if (!this._notifTimelineSet) {
	        return;
	    }
	
	    // FIXME: This thing is a total hack, and results in duplicate events being
	    // added to the timeline both from /sync and /notifications, and lots of
	    // slow and wasteful processing and pagination.  The correct solution is to
	    // extend /messages or /search or something to filter on notifications.
	
	    // use the fictitious token 'end'. in practice we would ideally give it
	    // the oldest backwards pagination token from /sync, but /sync doesn't
	    // know about /notifications, so we have no choice but to start paginating
	    // from the current point in time.  This may well overlap with historical
	    // notifs which are then inserted into the timeline by /sync responses.
	    this._notifTimelineSet.resetLiveTimeline('end', true);
	
	    // we could try to paginate a single event at this point in order to get
	    // a more valid pagination token, but it just ends up with an out of order
	    // timeline. given what a mess this is and given we're going to have duplicate
	    // events anyway, just leave it with the dummy token for now.
	    /*
	    this.paginateNotifTimeline(this._notifTimelineSet.getLiveTimeline(), {
	        backwards: true,
	        limit: 1
	    });
	    */
	};
	
	/**
	 * Peek into a room and receive updates about the room. This only works if the
	 * history visibility for the room is world_readable.
	 * @param {String} roomId The room to attempt to peek into.
	 * @return {module:client.Promise} Resolves: Room object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.peekInRoom = function(roomId) {
	    if (this._peekSync) {
	        this._peekSync.stopPeeking();
	    }
	    this._peekSync = new SyncApi(this, this._clientOpts);
	    return this._peekSync.peek(roomId);
	};
	
	/**
	 * Stop any ongoing room peeking.
	 */
	MatrixClient.prototype.stopPeeking = function() {
	    if (this._peekSync) {
	        this._peekSync.stopPeeking();
	        this._peekSync = null;
	    }
	};
	
	/**
	 * Set r/w flags for guest access in a room.
	 * @param {string} roomId The room to configure guest access in.
	 * @param {Object} opts Options
	 * @param {boolean} opts.allowJoin True to allow guests to join this room. This
	 * implicitly gives guests write access. If false or not given, guests are
	 * explicitly forbidden from joining the room.
	 * @param {boolean} opts.allowRead True to set history visibility to
	 * be world_readable. This gives guests read access *from this point forward*.
	 * If false or not given, history visibility is not modified.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setGuestAccess = function(roomId, opts) {
	    var writePromise = this.sendStateEvent(roomId, "m.room.guest_access", {
	        guest_access: opts.allowJoin ? "can_join" : "forbidden"
	    });
	
	    var readPromise = q();
	    if (opts.allowRead) {
	        readPromise = this.sendStateEvent(roomId, "m.room.history_visibility", {
	            history_visibility: "world_readable"
	        });
	    }
	
	    return q.all(readPromise, writePromise);
	};
	
	// Registration/Login operations
	// =============================
	
	/**
	 * Requests an email verification token for the purposes of registration.
	 * This API proxies the Identity Server /validate/email/requestToken API,
	 * adding registration-specific behaviour. Specifically, if an account with
	 * the given email address already exists, it will either send an email
	 * to the address informing them of this or return M_THREEPID_IN_USE
	 * (which one is up to the Home Server).
	 *
	 * requestEmailToken calls the equivalent API directly on the ID server,
	 * therefore bypassing the registration-specific logic.
	 *
	 * Parameters and return value are as for requestEmailToken
	
	 * @param {string} email As requestEmailToken
	 * @param {string} clientSecret As requestEmailToken
	 * @param {number} sendAttempt As requestEmailToken
	 * @param {string} nextLink As requestEmailToken
	 * @param {module:client.callback} callback Optional. As requestEmailToken
	 * @return {module:client.Promise} Resolves: As requestEmailToken
	 */
	MatrixClient.prototype.requestRegisterEmailToken = function(email, clientSecret,
	                                                    sendAttempt, nextLink, callback) {
	    return this._requestTokenFromEndpoint(
	        "/register/email/requestToken",
	        email, clientSecret, sendAttempt, nextLink, callback
	    );
	};
	
	/**
	 * Requests an email verification token for the purposes of adding a
	 * third party identifier to an account.
	 * This API proxies the Identity Server /validate/email/requestToken API,
	 * adding specific behaviour for the addition of email addresses to an
	 * account. Specifically, if an account with
	 * the given email address already exists, it will either send an email
	 * to the address informing them of this or return M_THREEPID_IN_USE
	 * (which one is up to the Home Server).
	 *
	 * requestEmailToken calls the equivalent API directly on the ID server,
	 * therefore bypassing the email addition specific logic.
	 *
	 * @param {string} email As requestEmailToken
	 * @param {string} clientSecret As requestEmailToken
	 * @param {number} sendAttempt As requestEmailToken
	 * @param {string} nextLink As requestEmailToken
	 * @param {module:client.callback} callback Optional. As requestEmailToken
	 * @return {module:client.Promise} Resolves: As requestEmailToken
	 */
	MatrixClient.prototype.requestAdd3pidEmailToken = function(email, clientSecret,
	                                                    sendAttempt, nextLink, callback) {
	    return this._requestTokenFromEndpoint(
	        "/account/3pid/email/requestToken",
	        email, clientSecret, sendAttempt, nextLink, callback
	    );
	};
	
	/**
	 * Requests an email verification token for the purposes of resetting
	 * the password on an account.
	 * This API proxies the Identity Server /validate/email/requestToken API,
	 * adding specific behaviour for the password resetting. Specifically,
	 * if no account with the given email address exists, it may either
	 * return M_THREEPID_NOT_FOUND or send an email
	 * to the address informing them of this (which one is up to the Home Server).
	 *
	 * requestEmailToken calls the equivalent API directly on the ID server,
	 * therefore bypassing the password reset specific logic.
	 *
	 * @param {string} email As requestEmailToken
	 * @param {string} clientSecret As requestEmailToken
	 * @param {number} sendAttempt As requestEmailToken
	 * @param {string} nextLink As requestEmailToken
	 * @param {module:client.callback} callback Optional. As requestEmailToken
	 * @return {module:client.Promise} Resolves: As requestEmailToken
	 */
	MatrixClient.prototype.requestPasswordEmailToken = function(email, clientSecret,
	                                                    sendAttempt, nextLink, callback) {
	    return this._requestTokenFromEndpoint(
	        "/account/password/email/requestToken",
	        email, clientSecret, sendAttempt, nextLink, callback
	    );
	};
	
	/**
	 * Internal utility function for requesting validation tokens from usage-specific
	 * requestToken endpoints.
	 *
	 * @param {string} endpoint The endpoint to send the request to
	 * @param {string} email As requestEmailToken
	 * @param {string} clientSecret As requestEmailToken
	 * @param {number} sendAttempt As requestEmailToken
	 * @param {string} nextLink As requestEmailToken
	 * @param {module:client.callback} callback Optional. As requestEmailToken
	 * @return {module:client.Promise} Resolves: As requestEmailToken
	 */
	MatrixClient.prototype._requestTokenFromEndpoint = function(endpoint,
	                                                    email, clientSecret,
	                                                    sendAttempt, nextLink, callback) {
	    var id_server_url = url.parse(this.idBaseUrl);
	    if (id_server_url.host === null) {
	        throw new Error("Invalid ID server URL: " + this.idBaseUrl);
	    }
	
	    var params = {
	        client_secret: clientSecret,
	        email: email,
	        send_attempt: sendAttempt,
	        next_link: nextLink,
	        id_server: id_server_url.host,
	    };
	    return this._http.request(
	        callback, "POST", endpoint, undefined,
	        params
	    );
	};
	
	
	// Push operations
	// ===============
	
	/**
	 * Get the room-kind push rule associated with a room.
	 * @param {string} scope "global" or device-specific.
	 * @param {string} roomId the id of the room.
	 * @return {object} the rule or undefined.
	 */
	MatrixClient.prototype.getRoomPushRule = function(scope, roomId) {
	    // There can be only room-kind push rule per room
	    // and its id is the room id.
	    if (this.pushRules) {
	        for (var i = 0; i < this.pushRules[scope].room.length; i++) {
	            var rule = this.pushRules[scope].room[i];
	            if (rule.rule_id === roomId) {
	                return rule;
	            }
	        }
	    }
	    else {
	        throw new Error(
	            "SyncApi.sync() must be done before accessing to push rules."
	        );
	    }
	};
	
	/**
	 * Set a room-kind muting push rule in a room.
	 * The operation also updates MatrixClient.pushRules at the end.
	 * @param {string} scope "global" or device-specific.
	 * @param {string} roomId the id of the room.
	 * @param {string} mute the mute state.
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.setRoomMutePushRule = function(scope, roomId, mute) {
	    var self = this;
	    var deferred, hasDontNotifyRule;
	
	    // Get the existing room-kind push rule if any
	    var roomPushRule = this.getRoomPushRule(scope, roomId);
	    if (roomPushRule) {
	        if (0 <= roomPushRule.actions.indexOf("dont_notify")) {
	            hasDontNotifyRule = true;
	        }
	    }
	
	    if (!mute) {
	        // Remove the rule only if it is a muting rule
	        if (hasDontNotifyRule) {
	            deferred = this.deletePushRule(scope, "room", roomPushRule.rule_id);
	        }
	    }
	    else {
	        if (!roomPushRule) {
	            deferred = this.addPushRule(scope, "room", roomId, {
	                actions: ["dont_notify"]
	            });
	        }
	        else if (!hasDontNotifyRule) {
	            // Remove the existing one before setting the mute push rule
	            // This is a workaround to SYN-590 (Push rule update fails)
	            deferred = q.defer();
	            this.deletePushRule(scope, "room", roomPushRule.rule_id)
	            .done(function() {
	                self.addPushRule(scope, "room", roomId, {
	                    actions: ["dont_notify"]
	                }).done(function() {
	                    deferred.resolve();
	                }, function(err) {
	                    deferred.reject(err);
	                });
	            }, function(err) {
	                deferred.reject(err);
	            });
	
	            deferred = deferred.promise;
	        }
	    }
	
	    if (deferred) {
	        // Update this.pushRules when the operation completes
	        var ruleRefreshDeferred = q.defer();
	        deferred.done(function() {
	            self.getPushRules().done(function(result) {
	                self.pushRules = result;
	                ruleRefreshDeferred.resolve();
	            }, function(err) {
	                ruleRefreshDeferred.reject(err);
	            });
	        }, function(err) {
	            // Update it even if the previous operation fails. This can help the
	            // app to recover when push settings has been modifed from another client
	            self.getPushRules().done(function(result) {
	                self.pushRules = result;
	                ruleRefreshDeferred.reject(err);
	            }, function(err2) {
	                ruleRefreshDeferred.reject(err);
	            });
	        });
	        return ruleRefreshDeferred.promise;
	    }
	};
	
	// Search
	// ======
	
	/**
	 * Perform a server-side search for messages containing the given text.
	 * @param {Object} opts Options for the search.
	 * @param {string} opts.query The text to query.
	 * @param {string=} opts.keys The keys to search on. Defaults to all keys. One
	 * of "content.body", "content.name", "content.topic".
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.searchMessageText = function(opts, callback) {
	    return this.search({
	        body: {
	            search_categories: {
	                room_events: {
	                    keys: opts.keys,
	                    search_term: opts.query
	                }
	            }
	        }
	    }, callback);
	};
	
	/**
	 * Perform a server-side search for room events.
	 *
	 * The returned promise resolves to an object containing the fields:
	 *
	 *  * {number}  count:       estimate of the number of results
	 *  * {string}  next_batch:  token for back-pagination; if undefined, there are
	 *                           no more results
	 *  * {Array}   highlights:  a list of words to highlight from the stemming
	 *                           algorithm
	 *  * {Array}   results:     a list of results
	 *
	 * Each entry in the results list is a {module:models/search-result.SearchResult}.
	 *
	 * @param {Object} opts
	 * @param {string} opts.term     the term to search for
	 * @param {Object} opts.filter   a JSON filter object to pass in the request
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.searchRoomEvents = function(opts) {
	    // TODO: support groups
	
	    var body = {
	        search_categories: {
	            room_events: {
	                search_term: opts.term,
	                filter: opts.filter,
	                order_by: "recent",
	                event_context: {
	                    before_limit: 1,
	                    after_limit: 1,
	                    include_profile: true,
	                }
	            }
	        }
	    };
	
	    var searchResults = {
	        _query: body,
	        results: [],
	        highlights: [],
	    };
	
	    return this.search({body: body}).then(
	        this._processRoomEventsSearch.bind(this, searchResults)
	    );
	};
	
	/**
	 * Take a result from an earlier searchRoomEvents call, and backfill results.
	 *
	 * @param  {object} searchResults  the results object to be updated
	 * @return {module:client.Promise} Resolves: updated result object
	 * @return {Error} Rejects: with an error response.
	 */
	MatrixClient.prototype.backPaginateRoomEventsSearch = function(searchResults) {
	    // TODO: we should implement a backoff (as per scrollback()) to deal more
	    // nicely with HTTP errors.
	
	    if (!searchResults.next_batch) {
	        return q.reject(new Error("Cannot backpaginate event search any further"));
	    }
	
	    if (searchResults.pendingRequest) {
	        // already a request in progress - return the existing promise
	        return searchResults.pendingRequest;
	    }
	
	    var searchOpts = {
	        body: searchResults._query,
	        next_batch: searchResults.next_batch,
	    };
	
	    var promise = this.search(searchOpts).then(
	        this._processRoomEventsSearch.bind(this, searchResults)
	    ).finally(function() {
	        searchResults.pendingRequest = null;
	    });
	    searchResults.pendingRequest = promise;
	
	    return promise;
	};
	
	/**
	 * helper for searchRoomEvents and backPaginateRoomEventsSearch. Processes the
	 * response from the API call and updates the searchResults
	 *
	 * @param {Object} searchResults
	 * @param {Object} response
	 * @return {Object} searchResults
	 * @private
	 */
	MatrixClient.prototype._processRoomEventsSearch = function(searchResults, response) {
	    var room_events = response.search_categories.room_events;
	
	    searchResults.count = room_events.count;
	    searchResults.next_batch = room_events.next_batch;
	
	    // combine the highlight list with our existing list; build an object
	    // to avoid O(N^2) fail
	    var highlights = {};
	    room_events.highlights.forEach(function(hl) { highlights[hl] = 1; });
	    searchResults.highlights.forEach(function(hl) { highlights[hl] = 1; });
	
	    // turn it back into a list.
	    searchResults.highlights = Object.keys(highlights);
	
	    // append the new results to our existing results
	    for (var i = 0; i < room_events.results.length; i++) {
	        var sr = SearchResult.fromJson(room_events.results[i], this.getEventMapper());
	        searchResults.results.push(sr);
	    }
	    return searchResults;
	};
	
	
	/**
	 * Populate the store with rooms the user has left.
	 * @return {module:client.Promise} Resolves: TODO - Resolved when the rooms have
	 * been added to the data store.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.syncLeftRooms = function() {
	    // Guard against multiple calls whilst ongoing and multiple calls post success
	    if (this._syncedLeftRooms) {
	        return q([]); // don't call syncRooms again if it succeeded.
	    }
	    if (this._syncLeftRoomsPromise) {
	        return this._syncLeftRoomsPromise; // return the ongoing request
	    }
	    var self = this;
	    var syncApi = new SyncApi(this, this._clientOpts);
	    this._syncLeftRoomsPromise = syncApi.syncLeftRooms();
	
	    // cleanup locks
	    this._syncLeftRoomsPromise.then(function(res) {
	        console.log("Marking success of sync left room request");
	        self._syncedLeftRooms = true; // flip the bit on success
	    }).finally(function() {
	        self._syncLeftRoomsPromise = null; // cleanup ongoing request state
	    });
	
	    return this._syncLeftRoomsPromise;
	};
	
	// Filters
	// =======
	
	/**
	 * Create a new filter.
	 * @param {Object} content The HTTP body for the request
	 * @return {Filter} Resolves to a Filter object.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.createFilter = function(content) {
	    var self = this;
	    var path = utils.encodeUri("/user/$userId/filter", {
	        $userId: this.credentials.userId
	    });
	    return this._http.authedRequest(
	        undefined, "POST", path, undefined, content
	    ).then(function(response) {
	        // persist the filter
	        var filter = Filter.fromJson(
	            self.credentials.userId, response.filter_id, content
	        );
	        self.store.storeFilter(filter);
	        return filter;
	    });
	};
	
	/**
	 * Retrieve a filter.
	 * @param {string} userId The user ID of the filter owner
	 * @param {string} filterId The filter ID to retrieve
	 * @param {boolean} allowCached True to allow cached filters to be returned.
	 * Default: True.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.getFilter = function(userId, filterId, allowCached) {
	    if (allowCached) {
	        var filter = this.store.getFilter(userId, filterId);
	        if (filter) {
	            return q(filter);
	        }
	    }
	
	    var self = this;
	    var path = utils.encodeUri("/user/$userId/filter/$filterId", {
	        $userId: userId,
	        $filterId: filterId
	    });
	
	    return this._http.authedRequest(
	        undefined, "GET", path, undefined, undefined
	    ).then(function(response) {
	        // persist the filter
	        var filter = Filter.fromJson(
	            userId, filterId, response
	        );
	        self.store.storeFilter(filter);
	        return filter;
	    });
	};
	
	/**
	 * @param {string} filterName
	 * @param {Filter} filter
	 * @return {Promise<String>} Filter ID
	 */
	MatrixClient.prototype.getOrCreateFilter = function(filterName, filter) {
	
	    var filterId = this.store.getFilterIdByName(filterName);
	    var promise = q();
	    var self = this;
	
	    if (filterId) {
	        // check that the existing filter matches our expectations
	        promise = self.getFilter(self.credentials.userId,
	                         filterId, true
	        ).then(function(existingFilter) {
	            var oldDef = existingFilter.getDefinition();
	            var newDef = filter.getDefinition();
	
	            if (utils.deepCompare(oldDef, newDef)) {
	                // super, just use that.
	                // debuglog("Using existing filter ID %s: %s", filterId,
	                //          JSON.stringify(oldDef));
	                return q(filterId);
	            }
	            // debuglog("Existing filter ID %s: %s; new filter: %s",
	            //          filterId, JSON.stringify(oldDef), JSON.stringify(newDef));
	            return;
	        });
	    }
	
	    return promise.then(function(existingId) {
	        if (existingId) {
	            return existingId;
	        }
	
	        // create a new filter
	        return self.createFilter(filter.getDefinition()
	        ).then(function(createdFilter) {
	            // debuglog("Created new filter ID %s: %s", createdFilter.filterId,
	            //          JSON.stringify(createdFilter.getDefinition()));
	            self.store.setFilterIdByName(filterName, createdFilter.filterId);
	            return createdFilter.filterId;
	        });
	    });
	};
	
	
	/**
	 * Gets a bearer token from the Home Server that the user can
	 * present to a third party in order to prove their ownership
	 * of the Matrix account they are logged into.
	 * @return {module:client.Promise} Resolves: Token object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.getOpenIdToken = function() {
	    var path = utils.encodeUri("/user/$userId/openid/request_token", {
	        $userId: this.credentials.userId,
	    });
	
	    return this._http.authedRequest(
	        undefined, "POST", path, undefined, {}
	    );
	};
	
	
	// VoIP operations
	// ===============
	
	/**
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixClient.prototype.turnServer = function(callback) {
	    return this._http.authedRequest(callback, "GET", "/voip/turnServer");
	};
	
	/**
	 * Get the TURN servers for this home server.
	 * @return {Array<Object>} The servers or an empty list.
	 */
	MatrixClient.prototype.getTurnServers = function() {
	    return this._turnServers || [];
	};
	
	// Higher level APIs
	// =================
	
	// TODO: stuff to handle:
	//   local echo
	//   event dup suppression? - apparently we should still be doing this
	//   tracking current display name / avatar per-message
	//   pagination
	//   re-sending (including persisting pending messages to be sent)
	//   - Need a nice way to callback the app for arbitrary events like
	//     displayname changes
	//   due to ambiguity (or should this be on a chat-specific layer)?
	//   reconnect after connectivity outages
	
	
	/**
	 * High level helper method to call initialSync, emit the resulting events,
	 * and then start polling the eventStream for new events. To listen for these
	 * events, add a listener for {@link module:client~MatrixClient#event:"event"}
	 * via {@link module:client~MatrixClient#on}.
	 * @param {Object=} opts Options to apply when syncing.
	 * @param {Number=} opts.initialSyncLimit The event <code>limit=</code> to apply
	 * to initial sync. Default: 8.
	 * @param {Boolean=} opts.includeArchivedRooms True to put <code>archived=true</code>
	 * on the <code>/initialSync</code> request. Default: false.
	 * @param {Boolean=} opts.resolveInvitesToProfiles True to do /profile requests
	 * on every invite event if the displayname/avatar_url is not known for this user ID.
	 * Default: false.
	 *
	 * @param {String=} opts.pendingEventOrdering Controls where pending messages
	 * appear in a room's timeline. If "<b>chronological</b>", messages will appear
	 * in the timeline when the call to <code>sendEvent</code> was made. If
	 * "<b>detached</b>", pending messages will appear in a separate list,
	 * accessbile via {@link module:models/room#getPendingEvents}. Default:
	 * "chronological".
	 *
	 * @param {Number=} opts.pollTimeout The number of milliseconds to wait on /events.
	 * Default: 30000 (30 seconds).
	 */
	MatrixClient.prototype.startClient = function(opts) {
	    if (this.clientRunning) {
	        // client is already running.
	        return;
	    }
	    this.clientRunning = true;
	    // backwards compat for when 'opts' was 'historyLen'.
	    if (typeof opts === "number") {
	        opts = {
	            initialSyncLimit: opts
	        };
	    }
	
	    this._clientOpts = opts;
	
	    if (this._crypto) {
	        this._crypto.uploadKeys(5).done();
	        var tenMinutes = 1000 * 60 * 10;
	        var self = this;
	        this._uploadIntervalID = global.setInterval(function() {
	            self._crypto.uploadKeys(5).done();
	        }, tenMinutes);
	    }
	
	    // periodically poll for turn servers if we support voip
	    checkTurnServers(this);
	
	    if (this._syncApi) {
	        // This shouldn't happen since we thought the client was not running
	        console.error("Still have sync object whilst not running: stopping old one");
	        this._syncApi.stop();
	    }
	    this._syncApi = new SyncApi(this, opts);
	    this._syncApi.sync();
	};
	
	/**
	 * High level helper method to stop the client from polling and allow a
	 * clean shutdown.
	 */
	MatrixClient.prototype.stopClient = function() {
	    this.clientRunning = false;
	    // TODO: f.e. Room => self.store.storeRoom(room) ?
	    if (this._syncApi) {
	        this._syncApi.stop();
	        this._syncApi = null;
	    }
	    if (this._crypto) {
	        global.clearInterval(this._uploadIntervalID);
	    }
	    global.clearTimeout(this._checkTurnServersTimeoutID);
	};
	
	function setupCallEventHandler(client) {
	    var candidatesByCall = {
	        // callId: [Candidate]
	    };
	
	    // Maintain a buffer of events before the client has synced for the first time.
	    // This buffer will be inspected to see if we should send incoming call
	    // notifications. It needs to be buffered to correctly determine if an
	    // incoming call has had a matching answer/hangup.
	    var callEventBuffer = [];
	    var isClientPrepared = false;
	    client.on("sync", function(state) {
	        if (state === "PREPARED") {
	            isClientPrepared = true;
	            var ignoreCallIds = {}; // Set<String>
	            // inspect the buffer and mark all calls which have been answered
	            // or hung up before passing them to the call event handler.
	            for (var i = callEventBuffer.length - 1; i >= 0; i--) {
	                var ev = callEventBuffer[i];
	                if (ev.getType() === "m.call.answer" ||
	                        ev.getType() === "m.call.hangup") {
	                    ignoreCallIds[ev.getContent().call_id] = "yep";
	                }
	            }
	            // now loop through the buffer chronologically and inject them
	            callEventBuffer.forEach(function(e) {
	                if (ignoreCallIds[e.getContent().call_id]) {
	                    return;
	                }
	                callEventHandler(e);
	            });
	            callEventBuffer = [];
	        }
	    });
	
	    client.on("event", function(event) {
	        if (!isClientPrepared) {
	            if (event.getType().indexOf("m.call.") === 0) {
	                callEventBuffer.push(event);
	            }
	            return;
	        }
	        callEventHandler(event);
	    });
	
	    function callEventHandler(event) {
	        if (event.getType().indexOf("m.call.") !== 0) {
	            return; // not a call event
	        }
	        var content = event.getContent();
	        var call = content.call_id ? client.callList[content.call_id] : undefined;
	        var i;
	        //console.log("RECV %s content=%s", event.getType(), JSON.stringify(content));
	
	        if (event.getType() === "m.call.invite") {
	            if (event.getSender() === client.credentials.userId) {
	                return; // ignore invites you send
	            }
	
	            if (event.getAge() > content.lifetime) {
	                return; // expired call
	            }
	
	            if (call && call.state === "ended") {
	                return; // stale/old invite event
	            }
	            if (call) {
	                console.log(
	                    "WARN: Already have a MatrixCall with id %s but got an " +
	                    "invite. Clobbering.",
	                    content.call_id
	                );
	            }
	
	            call = webRtcCall.createNewMatrixCall(client, event.getRoomId());
	            if (!call) {
	                console.log(
	                    "Incoming call ID " + content.call_id + " but this client " +
	                    "doesn't support WebRTC"
	                );
	                // don't hang up the call: there could be other clients
	                // connected that do support WebRTC and declining the
	                // the call on their behalf would be really annoying.
	                return;
	            }
	
	            call.callId = content.call_id;
	            call._initWithInvite(event);
	            client.callList[call.callId] = call;
	
	            // if we stashed candidate events for that call ID, play them back now
	            if (candidatesByCall[call.callId]) {
	                for (i = 0; i < candidatesByCall[call.callId].length; i++) {
	                    call._gotRemoteIceCandidate(
	                        candidatesByCall[call.callId][i]
	                    );
	                }
	            }
	
	            // Were we trying to call that user (room)?
	            var existingCall;
	            var existingCalls = utils.values(client.callList);
	            for (i = 0; i < existingCalls.length; ++i) {
	                var thisCall = existingCalls[i];
	                if (call.room_id === thisCall.room_id &&
	                        thisCall.direction === 'outbound' &&
	                        (["wait_local_media", "create_offer", "invite_sent"].indexOf(
	                            thisCall.state) !== -1)) {
	                    existingCall = thisCall;
	                    break;
	                }
	            }
	
	            if (existingCall) {
	                // If we've only got to wait_local_media or create_offer and
	                // we've got an invite, pick the incoming call because we know
	                // we haven't sent our invite yet otherwise, pick whichever
	                // call has the lowest call ID (by string comparison)
	                if (existingCall.state === 'wait_local_media' ||
	                        existingCall.state === 'create_offer' ||
	                        existingCall.callId > call.callId) {
	                    console.log(
	                        "Glare detected: answering incoming call " + call.callId +
	                        " and canceling outgoing call " + existingCall.callId
	                    );
	                    existingCall._replacedBy(call);
	                    call.answer();
	                }
	                else {
	                    console.log(
	                        "Glare detected: rejecting incoming call " + call.callId +
	                        " and keeping outgoing call " + existingCall.callId
	                    );
	                    call.hangup();
	                }
	            }
	            else {
	                client.emit("Call.incoming", call);
	            }
	        }
	        else if (event.getType() === 'm.call.answer') {
	            if (!call) {
	                return;
	            }
	            if (event.getSender() === client.credentials.userId) {
	                if (call.state === 'ringing') {
	                    call._onAnsweredElsewhere(content);
	                }
	            }
	            else {
	                call._receivedAnswer(content);
	            }
	        }
	        else if (event.getType() === 'm.call.candidates') {
	            if (event.getSender() === client.credentials.userId) {
	                return;
	            }
	            if (!call) {
	                // store the candidates; we may get a call eventually.
	                if (!candidatesByCall[content.call_id]) {
	                    candidatesByCall[content.call_id] = [];
	                }
	                candidatesByCall[content.call_id] = candidatesByCall[
	                    content.call_id
	                ].concat(content.candidates);
	            }
	            else {
	                for (i = 0; i < content.candidates.length; i++) {
	                    call._gotRemoteIceCandidate(content.candidates[i]);
	                }
	            }
	        }
	        else if (event.getType() === 'm.call.hangup') {
	            // Note that we also observe our own hangups here so we can see
	            // if we've already rejected a call that would otherwise be valid
	            if (!call) {
	                // if not live, store the fact that the call has ended because
	                // we're probably getting events backwards so
	                // the hangup will come before the invite
	                call = webRtcCall.createNewMatrixCall(client, event.getRoomId());
	                if (call) {
	                    call.callId = content.call_id;
	                    call._initWithHangup(event);
	                    client.callList[content.call_id] = call;
	                }
	            }
	            else {
	                if (call.state !== 'ended') {
	                    call._onHangupReceived(content);
	                    delete client.callList[content.call_id];
	                }
	            }
	        }
	    }
	}
	
	function checkTurnServers(client) {
	    if (!client._supportsVoip) {
	        return;
	    }
	    if (client.isGuest()) {
	        return; // guests can't access TURN servers
	    }
	
	    client.turnServer().done(function(res) {
	        if (res.uris) {
	            console.log("Got TURN URIs: " + res.uris + " refresh in " +
	                res.ttl + " secs");
	            // map the response to a format that can be fed to
	            // RTCPeerConnection
	            var servers = {
	                urls: res.uris,
	                username: res.username,
	                credential: res.password
	            };
	            client._turnServers = [servers];
	            // re-fetch when we're about to reach the TTL
	            client._checkTurnServersTimeoutID =
	                setTimeout(function() { checkTurnServers(client); },
	                           (res.ttl || (60 * 60)) * 1000 * 0.9
	                          );
	        }
	    }, function(err) {
	        console.error("Failed to get TURN URIs");
	        client._checkTurnServersTimeoutID =
	            setTimeout(function() { checkTurnServers(client); }, 60000);
	    });
	}
	
	function _reject(callback, defer, err) {
	    if (callback) {
	        callback(err);
	    }
	    defer.reject(err);
	}
	
	function _resolve(callback, defer, res) {
	    if (callback) {
	        callback(null, res);
	    }
	    defer.resolve(res);
	}
	
	function _PojoToMatrixEventMapper(client) {
	    function mapper(plainOldJsObject) {
	        if (plainOldJsObject.type === "m.room.encrypted") {
	            return _decryptEvent(client, plainOldJsObject);
	        }
	        return new MatrixEvent(plainOldJsObject);
	    }
	    return mapper;
	}
	
	/**
	 * @return {Function}
	 */
	MatrixClient.prototype.getEventMapper = function() {
	    return _PojoToMatrixEventMapper(this);
	};
	
	// Identity Server Operations
	// ==========================
	
	/**
	 * Generates a random string suitable for use as a client secret. <strong>This
	 * method is experimental and may change.</strong>
	 * @return {string} A new client secret
	 */
	MatrixClient.prototype.generateClientSecret = function() {
	    var ret = "";
	    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	
	    for (var i = 0; i < 32; i++) {
	        ret += chars.charAt(Math.floor(Math.random() * chars.length));
	    }
	
	    return ret;
	};
	
	/** */
	module.exports.MatrixClient = MatrixClient;
	/** */
	module.exports.CRYPTO_ENABLED = CRYPTO_ENABLED;
	
	// MatrixClient Event JSDocs
	
	/**
	 * Fires whenever the SDK receives a new event.
	 * @event module:client~MatrixClient#"event"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @example
	 * matrixClient.on("event", function(event){
	 *   var sender = event.getSender();
	 * });
	 */
	
	/**
	 * Fires whenever the SDK receives a new to-device event.
	 * @event module:client~MatrixClient#"toDeviceEvent"
	 * @param {MatrixEvent} event The matrix event which caused this event to fire.
	 * @example
	 * matrixClient.on("toDeviceEvent", function(event){
	 *   var sender = event.getSender();
	 * });
	 */
	
	/**
	 * Fires whenever the SDK's syncing state is updated. The state can be one of:
	 * <ul>
	 * <li>PREPARED : The client has synced with the server at least once and is
	 * ready for methods to be called on it. This will be immediately followed by
	 * a state of SYNCING. <i>This is the equivalent of "syncComplete" in the
	 * previous API.</i></li>
	 * <li>SYNCING : The client is currently polling for new events from the server.
	 * This will be called <i>after</i> processing latest events from a sync.</li>
	 * <li>ERROR : The client has had a problem syncing with the server. If this is
	 * called <i>before</i> PREPARED then there was a problem performing the initial
	 * sync. If this is called <i>after</i> PREPARED then there was a problem polling
	 * the server for updates. This may be called multiple times even if the state is
	 * already ERROR. <i>This is the equivalent of "syncError" in the previous
	 * API.</i></li>
	 * <li>STOPPED: The client has stopped syncing with server due to stopClient
	 * being called.
	 * </li>
	 * </ul>
	 * State transition diagram:
	 * <pre>
	 *                                          +---->STOPPED
	 *                                          |
	 *              +----->PREPARED -------> SYNCING <--+
	 *              |        ^                  |       |
	 *   null ------+        |  +---------------+       |
	 *              |        |  V                       |
	 *              +------->ERROR ---------------------+
	 *
	 * NB: 'null' will never be emitted by this event.
	 * </pre>
	 * Transitions:
	 * <ul>
	 * <li><code>null -> PREPARED</code> : Occurs when the initial sync is completed
	 * first time. This involves setting up filters and obtaining push rules.
	 * <li><code>null -> ERROR</code> : Occurs when the initial sync failed first time.
	 * <li><code>ERROR -> PREPARED</code> : Occurs when the initial sync succeeds
	 * after previously failing.
	 * <li><code>PREPARED -> SYNCING</code> : Occurs immediately after transitioning
	 * to PREPARED. Starts listening for live updates rather than catching up.
	 * <li><code>SYNCING -> ERROR</code> : Occurs the first time a client cannot perform a
	 * live update.
	 * <li><code>ERROR -> SYNCING</code> : Occurs when the client has performed a
	 * live update after having previously failed.
	 * <li><code>ERROR -> ERROR</code> : Occurs when the client has failed to sync
	 * for a second time or more.</li>
	 * <li><code>SYNCING -> SYNCING</code> : Occurs when the client has performed a live
	 * update. This is called <i>after</i> processing.</li>
	 * <li><code>* -> STOPPED</code> : Occurs once the client has stopped syncing or
	 * trying to sync after stopClient has been called.</li>
	 * </ul>
	 *
	 * @event module:client~MatrixClient#"sync"
	 * @param {string} state An enum representing the syncing state. One of "PREPARED",
	 * "SYNCING", "ERROR", "STOPPED".
	 * @param {?string} prevState An enum representing the previous syncing state.
	 * One of "PREPARED", "SYNCING", "ERROR", "STOPPED" <b>or null</b>.
	 * @param {?Object} data Data about this transition.
	 * @param {MatrixError} data.err The matrix error if <code>state=ERROR</code>.
	 * @example
	 * matrixClient.on("sync", function(state, prevState, data) {
	 *   switch (state) {
	 *     case "ERROR":
	 *       // update UI to say "Connection Lost"
	 *       break;
	 *     case "SYNCING":
	 *       // update UI to remove any "Connection Lost" message
	 *       break;
	 *     case "PREPARED":
	 *       // the client instance is ready to be queried.
	 *       var rooms = matrixClient.getRooms();
	 *       break;
	 *   }
	 * });
	 */
	
	 /**
	 * Fires whenever a new Room is added. This will fire when you are invited to a
	 * room, as well as when you join a room. <strong>This event is experimental and
	 * may change.</strong>
	 * @event module:client~MatrixClient#"Room"
	 * @param {Room} room The newly created, fully populated room.
	 * @example
	 * matrixClient.on("Room", function(room){
	 *   var roomId = room.roomId;
	 * });
	 */
	
	 /**
	 * Fires whenever a Room is removed. This will fire when you forget a room.
	 * <strong>This event is experimental and may change.</strong>
	 * @event module:client~MatrixClient#"deleteRoom"
	 * @param {string} roomId The deleted room ID.
	 * @example
	 * matrixClient.on("deleteRoom", function(roomId){
	 *   // update UI from getRooms()
	 * });
	 */
	
	/**
	 * Fires whenever an incoming call arrives.
	 * @event module:client~MatrixClient#"Call.incoming"
	 * @param {module:webrtc/call~MatrixCall} call The incoming call.
	 * @example
	 * matrixClient.on("Call.incoming", function(call){
	 *   call.answer(); // auto-answer
	 * });
	 */
	
	/**
	 * Fires whenever the login session the JS SDK is using is no
	 * longer valid and the user must log in again.
	 * NB. This only fires when action is required from the user, not
	 * when then login session can be renewed by using a refresh token.
	 * @event module:client~MatrixClient#"Session.logged_out"
	 * @example
	 * matrixClient.on("Session.logged_out", function(call){
	 *   // show the login screen
	 * });
	 */
	
	/**
	 * Fires when a device is marked as verified/unverified/blocked/unblocked by
	 * {@link module:client~MatrixClient#setDeviceVerified|MatrixClient.setDeviceVerified} or
	 * {@link module:client~MatrixClient#setDeviceBlocked|MatrixClient.setDeviceBlocked}.
	 *
	 * @event module:client~MatrixClient#"deviceVerificationChanged"
	 * @param {string} userId the owner of the verified device
	 * @param {string} deviceId the id of the verified device
	 */
	
	/**
	 * Fires whenever new user-scoped account_data is added.
	 * @event module:client~MatrixClient#"Room"
	 * @param {MatrixEvent} event The event describing the account_data just added
	 * @example
	 * matrixClient.on("accountData", function(event){
	 *   myAccountData[event.type] = event.content;
	 * });
	 */
	
	
	// EventEmitter JSDocs
	
	/**
	 * The {@link https://nodejs.org/api/events.html|EventEmitter} class.
	 * @external EventEmitter
	 * @see {@link https://nodejs.org/api/events.html}
	 */
	
	/**
	 * Adds a listener to the end of the listeners array for the specified event.
	 * No checks are made to see if the listener has already been added. Multiple
	 * calls passing the same combination of event and listener will result in the
	 * listener being added multiple times.
	 * @function external:EventEmitter#on
	 * @param {string} event The event to listen for.
	 * @param {Function} listener The function to invoke.
	 * @return {EventEmitter} for call chaining.
	 */
	
	/**
	 * Alias for {@link external:EventEmitter#on}.
	 * @function external:EventEmitter#addListener
	 * @param {string} event The event to listen for.
	 * @param {Function} listener The function to invoke.
	 * @return {EventEmitter} for call chaining.
	 */
	
	/**
	 * Adds a <b>one time</b> listener for the event. This listener is invoked only
	 * the next time the event is fired, after which it is removed.
	 * @function external:EventEmitter#once
	 * @param {string} event The event to listen for.
	 * @param {Function} listener The function to invoke.
	 * @return {EventEmitter} for call chaining.
	 */
	
	/**
	 * Remove a listener from the listener array for the specified event.
	 * <b>Caution:</b> changes array indices in the listener array behind the
	 * listener.
	 * @function external:EventEmitter#removeListener
	 * @param {string} event The event to listen for.
	 * @param {Function} listener The function to invoke.
	 * @return {EventEmitter} for call chaining.
	 */
	
	/**
	 * Removes all listeners, or those of the specified event. It's not a good idea
	 * to remove listeners that were added elsewhere in the code, especially when
	 * it's on an emitter that you didn't create (e.g. sockets or file streams).
	 * @function external:EventEmitter#removeAllListeners
	 * @param {string} event Optional. The event to remove listeners for.
	 * @return {EventEmitter} for call chaining.
	 */
	
	/**
	 * Execute each of the listeners in order with the supplied arguments.
	 * @function external:EventEmitter#emit
	 * @param {string} event The event to emit.
	 * @param {Function} listener The function to invoke.
	 * @return {boolean} true if event had listeners, false otherwise.
	 */
	
	/**
	 * By default EventEmitters will print a warning if more than 10 listeners are
	 * added for a particular event. This is a useful default which helps finding
	 * memory leaks. Obviously not all Emitters should be limited to 10. This
	 * function allows that to be increased. Set to zero for unlimited.
	 * @function external:EventEmitter#setMaxListeners
	 * @param {Number} n The max number of listeners.
	 * @return {EventEmitter} for call chaining.
	 */
	
	// MatrixClient Callback JSDocs
	
	/**
	 * The standard MatrixClient callback interface. Functions which accept this
	 * will specify 2 return arguments. These arguments map to the 2 parameters
	 * specified in this callback.
	 * @callback module:client.callback
	 * @param {Object} err The error value, the "rejected" value or null.
	 * @param {Object} data The data returned, the "resolved" value.
	 */
	
	 /**
	  * {@link https://github.com/kriskowal/q|A promise implementation (Q)}. Functions
	  * which return this will specify 2 return arguments. These arguments map to the
	  * "onFulfilled" and "onRejected" values of the Promise.
	  * @typedef {Object} Promise
	  * @static
	  * @property {Function} then promise.then(onFulfilled, onRejected, onProgress)
	  * @property {Function} catch promise.catch(onRejected)
	  * @property {Function} finally promise.finally(callback)
	  * @property {Function} done promise.done(onFulfilled, onRejected, onProgress)
	  */
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 201 */
/***/ function(module, exports) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	/**
	 * @module pushprocessor
	 */
	
	/**
	 * Construct a Push Processor.
	 * @constructor
	 * @param {Object} client The Matrix client object to use
	 */
	function PushProcessor(client) {
	    var escapeRegExp = function(string) {
	        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
	    };
	
	    var matchingRuleFromKindSet = function(ev, kindset, device) {
	        var rulekinds_in_order = ['override', 'content', 'room', 'sender', 'underride'];
	        for (var ruleKindIndex = 0;
	                ruleKindIndex < rulekinds_in_order.length;
	                ++ruleKindIndex) {
	            var kind = rulekinds_in_order[ruleKindIndex];
	            var ruleset = kindset[kind];
	
	            for (var ruleIndex = 0; ruleIndex < ruleset.length; ++ruleIndex) {
	                var rule = ruleset[ruleIndex];
	                if (!rule.enabled) { continue; }
	
	                var rawrule = templateRuleToRaw(kind, rule, device);
	                if (!rawrule) { continue; }
	
	                if (ruleMatchesEvent(rawrule, ev)) {
	                    rule.kind = kind;
	                    return rule;
	                }
	            }
	        }
	        return null;
	    };
	
	    var templateRuleToRaw = function(kind, tprule, device) {
	        var rawrule = {
	            'rule_id': tprule.rule_id,
	            'actions': tprule.actions,
	            'conditions': []
	        };
	        switch (kind) {
	            case 'underride':
	            case 'override':
	                rawrule.conditions = tprule.conditions;
	                break;
	            case 'room':
	                if (!tprule.rule_id) { return null; }
	                rawrule.conditions.push({
	                    'kind': 'event_match',
	                    'key': 'room_id',
	                    'pattern': tprule.rule_id
	                });
	                break;
	            case 'sender':
	                if (!tprule.rule_id) { return null; }
	                rawrule.conditions.push({
	                    'kind': 'event_match',
	                    'key': 'user_id',
	                    'pattern': tprule.rule_id
	                });
	                break;
	            case 'content':
	                if (!tprule.pattern) { return null; }
	                rawrule.conditions.push({
	                    'kind': 'event_match',
	                    'key': 'content.body',
	                    'pattern': tprule.pattern
	                });
	                break;
	        }
	        if (device) {
	            rawrule.conditions.push({
	                'kind': 'device',
	                'profile_tag': device
	            });
	        }
	        return rawrule;
	    };
	
	    var ruleMatchesEvent = function(rule, ev) {
	        var ret = true;
	        for (var i = 0; i < rule.conditions.length; ++i) {
	            var cond = rule.conditions[i];
	            ret &= eventFulfillsCondition(cond, ev);
	        }
	        //console.log("Rule "+rule.rule_id+(ret ? " matches" : " doesn't match"));
	        return ret;
	    };
	
	    var eventFulfillsCondition = function(cond, ev) {
	        var condition_functions = {
	            "event_match": eventFulfillsEventMatchCondition,
	            "device": eventFulfillsDeviceCondition,
	            "contains_display_name": eventFulfillsDisplayNameCondition,
	            "room_member_count": eventFulfillsRoomMemberCountCondition
	        };
	        if (condition_functions[cond.kind]) {
	            return condition_functions[cond.kind](cond, ev);
	        }
	        return true;
	    };
	
	    var eventFulfillsRoomMemberCountCondition = function(cond, ev) {
	        if (!cond.is) { return false; }
	
	        var room = client.getRoom(ev.getRoomId());
	        if (!room || !room.currentState || !room.currentState.members) { return false; }
	
	        var memberCount = Object.keys(room.currentState.members).filter(function(m) {
	            return room.currentState.members[m].membership == 'join';
	        }).length;
	
	        var m = cond.is.match(/^([=<>]*)([0-9]*)$/);
	        if (!m) { return false; }
	        var ineq = m[1];
	        var rhs = parseInt(m[2]);
	        if (isNaN(rhs)) { return false; }
	        switch (ineq) {
	            case '':
	            case '==':
	                return memberCount == rhs;
	            case '<':
	                return memberCount < rhs;
	            case '>':
	                return memberCount > rhs;
	            case '<=':
	                return memberCount <= rhs;
	            case '>=':
	                return memberCount >= rhs;
	            default:
	                return false;
	        }
	    };
	
	    var eventFulfillsDisplayNameCondition = function(cond, ev) {
	        var content = ev.getContent();
	        if (!content || !content.body || typeof content.body != 'string') {
	            return false;
	        }
	
	        var room = client.getRoom(ev.getRoomId());
	        if (!room || !room.currentState || !room.currentState.members ||
	            !room.currentState.getMember(client.credentials.userId)) { return false; }
	
	        var displayName = room.currentState.getMember(client.credentials.userId).name;
	
	        // N.B. we can't use \b as it chokes on unicode. however \W seems to be okay
	        // as shorthand for [^0-9A-Za-z_].
	        var pat = new RegExp("(^|\\W)" + escapeRegExp(displayName) + "(\\W|$)", 'i');
	        return content.body.search(pat) > -1;
	    };
	
	    var eventFulfillsDeviceCondition = function(cond, ev) {
	        return false; // XXX: Allow a profile tag to be set for the web client instance
	    };
	
	    var eventFulfillsEventMatchCondition = function(cond, ev) {
	        var val = valueForDottedKey(cond.key, ev);
	        if (!val || typeof val != 'string') { return false; }
	
	        var pat;
	        if (cond.key == 'content.body') {
	            pat = '(^|\\W)' + globToRegexp(cond.pattern) + '(\\W|$)';
	        } else {
	            pat = '^' + globToRegexp(cond.pattern) + '$';
	        }
	        var regex = new RegExp(pat, 'i');
	        return !!val.match(regex);
	    };
	
	    var globToRegexp = function(glob) {
	        // From
	        // https://github.com/matrix-org/synapse/blob/abbee6b29be80a77e05730707602f3bbfc3f38cb/synapse/push/__init__.py#L132
	        // Because micromatch is about 130KB with dependencies,
	        // and minimatch is not much better.
	        var pat = escapeRegExp(glob);
	        pat = pat.replace(/\\\*/, '.*');
	        pat = pat.replace(/\?/, '.');
	        pat = pat.replace(/\\\[(!|)(.*)\\]/, function(match, p1, p2, offset, string) {
	            var first = p1 && '^' || '';
	            var second = p2.replace(/\\\-/, '-');
	            return '[' + first + second + ']';
	        });
	        return pat;
	    };
	
	    var valueForDottedKey = function(key, ev) {
	        var parts = key.split('.');
	        var val;
	
	        // special-case the first component to deal with encrypted messages
	        var firstPart = parts[0];
	        if (firstPart == 'content') {
	            val = ev.getContent();
	            parts.shift();
	        } else if (firstPart == 'type') {
	            val = ev.getType();
	            parts.shift();
	        } else {
	            // use the raw event for any other fields
	            val = ev.event;
	        }
	
	        while (parts.length > 0) {
	            var thispart = parts.shift();
	            if (!val[thispart]) { return null; }
	            val = val[thispart];
	        }
	        return val;
	    };
	
	    var matchingRuleForEventWithRulesets = function(ev, rulesets) {
	        if (!rulesets || !rulesets.device) { return null; }
	        if (ev.getSender() == client.credentials.userId) { return null; }
	
	        var allDevNames = Object.keys(rulesets.device);
	        for (var i = 0; i < allDevNames.length; ++i) {
	            var devname = allDevNames[i];
	            var devrules = rulesets.device[devname];
	
	            var matchingRule = matchingRuleFromKindSet(devrules, devname);
	            if (matchingRule) { return matchingRule; }
	        }
	        return matchingRuleFromKindSet(ev, rulesets.global);
	    };
	
	    var pushActionsForEventAndRulesets = function(ev, rulesets) {
	        var rule = matchingRuleForEventWithRulesets(ev, rulesets);
	        if (!rule) { return {}; }
	
	        var actionObj = PushProcessor.actionListToActionsObject(rule.actions);
	
	        // Some actions are implicit in some situations: we add those here
	        if (actionObj.tweaks.highlight === undefined) {
	            // if it isn't specified, highlight if it's a content
	            // rule but otherwise not
	            actionObj.tweaks.highlight = (rule.kind == 'content');
	        }
	
	        return actionObj;
	    };
	
	    /**
	     * Get the user's push actions for the given event
	     *
	     * @param {module:models/event.MatrixEvent} ev
	     *
	     * @return {PushAction}
	     */
	    this.actionsForEvent = function(ev) {
	        return pushActionsForEventAndRulesets(ev, client.pushRules);
	    };
	}
	
	/**
	 * Convert a list of actions into a object with the actions as keys and their values
	 * eg. [ 'notify', { set_tweak: 'sound', value: 'default' } ]
	 *     becomes { notify: true, tweaks: { sound: 'default' } }
	 * @param {array} actionlist The actions list
	 *
	 * @return {object} A object with key 'notify' (true or false) and an object of actions
	 */
	PushProcessor.actionListToActionsObject = function(actionlist) {
	    var actionobj = { 'notify': false, 'tweaks': {} };
	    for (var i = 0; i < actionlist.length; ++i) {
	        var action = actionlist[i];
	        if (action === 'notify') {
	            actionobj.notify = true;
	        } else if (typeof action === 'object') {
	            if (action.value === undefined) { action.value = true; }
	            actionobj.tweaks[action.set_tweak] = action.value;
	        }
	    }
	    return actionobj;
	};
	
	/**
	 * @typedef {Object} PushAction
	 * @type {Object}
	 * @property {boolean} notify Whether this event should notify the user or not.
	 * @property {Object} tweaks How this event should be notified.
	 * @property {boolean} tweaks.highlight Whether this event should be highlighted
	 * on the UI.
	 * @property {boolean} tweaks.sound Whether this notification should produce a
	 * noise.
	 */
	
	/** The PushProcessor class. */
	module.exports = PushProcessor;
	


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var punycode = __webpack_require__(203);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(205);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	function isString(arg) {
	  return typeof arg === "string";
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204)(module), (function() { return this; }())))

/***/ },
/* 204 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(206);
	exports.encode = exports.stringify = __webpack_require__(207);


/***/ },
/* 206 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },
/* 207 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * @module models/search-result
	 */
	
	var EventContext = __webpack_require__(209);
	var utils = __webpack_require__(185);
	
	/**
	 * Construct a new SearchResult
	 *
	 * @param {number} rank   where this SearchResult ranks in the results
	 * @param {event-context.EventContext} eventContext  the matching event and its
	 *    context
	 *
	 * @constructor
	 */
	function SearchResult(rank, eventContext) {
	    this.rank = rank;
	    this.context = eventContext;
	}
	
	/**
	 * Create a SearchResponse from the response to /search
	 * @static
	 * @param {Object} jsonObj
	 * @param {function} eventMapper
	 * @return {SearchResult}
	 */
	
	SearchResult.fromJson = function(jsonObj, eventMapper) {
	    var jsonContext = jsonObj.context || {};
	    var events_before = jsonContext.events_before || [];
	    var events_after = jsonContext.events_after || [];
	
	    var context = new EventContext(eventMapper(jsonObj.result));
	
	    context.setPaginateToken(jsonContext.start, true);
	    context.addEvents(utils.map(events_before, eventMapper), true);
	    context.addEvents(utils.map(events_after, eventMapper), false);
	    context.setPaginateToken(jsonContext.end, false);
	
	    return new SearchResult(jsonObj.rank, context);
	};
	
	
	/**
	 * The SearchResult class
	 */
	module.exports = SearchResult;


/***/ },
/* 209 */
/***/ function(module, exports) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * @module models/event-context
	 */
	
	/**
	 * Construct a new EventContext
	 *
	 * An eventcontext is used for circumstances such as search results, when we
	 * have a particular event of interest, and a bunch of events before and after
	 * it.
	 *
	 * It also stores pagination tokens for going backwards and forwards in the
	 * timeline.
	 *
	 * @param {MatrixEvent} ourEvent  the event at the centre of this context
	 *
	 * @constructor
	 */
	function EventContext(ourEvent) {
	    this._timeline = [ourEvent];
	    this._ourEventIndex = 0;
	    this._paginateTokens = {b: null, f: null};
	
	    // this is used by MatrixClient to keep track of active requests
	    this._paginateRequests = {b: null, f: null};
	}
	
	/**
	 * Get the main event of interest
	 *
	 * This is a convenience function for getTimeline()[getOurEventIndex()].
	 *
	 * @return {MatrixEvent} The event at the centre of this context.
	 */
	EventContext.prototype.getEvent = function() {
	    return this._timeline[this._ourEventIndex];
	};
	
	/**
	 * Get the list of events in this context
	 *
	 * @return {Array} An array of MatrixEvents
	 */
	EventContext.prototype.getTimeline = function() {
	    return this._timeline;
	};
	
	/**
	 * Get the index in the timeline of our event
	 *
	 * @return {Number}
	 */
	EventContext.prototype.getOurEventIndex = function() {
	    return this._ourEventIndex;
	};
	
	/**
	 * Get a pagination token.
	 *
	 * @param {boolean} backwards   true to get the pagination token for going
	 *                                  backwards in time
	 * @return {string}
	 */
	EventContext.prototype.getPaginateToken = function(backwards) {
	    return this._paginateTokens[backwards ? 'b' : 'f'];
	};
	
	/**
	 * Set a pagination token.
	 *
	 * Generally this will be used only by the matrix js sdk.
	 *
	 * @param {string} token        pagination token
	 * @param {boolean} backwards   true to set the pagination token for going
	 *                                   backwards in time
	 */
	EventContext.prototype.setPaginateToken = function(token, backwards) {
	    this._paginateTokens[backwards ? 'b' : 'f'] = token;
	};
	
	/**
	 * Add more events to the timeline
	 *
	 * @param {Array} events      new events, in timeline order
	 * @param {boolean} atStart   true to insert new events at the start
	 */
	EventContext.prototype.addEvents = function(events, atStart) {
	    // TODO: should we share logic with Room.addEventsToTimeline?
	    // Should Room even use EventContext?
	
	    if (atStart) {
	        this._timeline = events.concat(this._timeline);
	        this._ourEventIndex += events.length;
	    } else {
	        this._timeline = this._timeline.concat(events);
	    }
	};
	
	/**
	 * The EventContext class
	 */
	module.exports = EventContext;


/***/ },
/* 210 */
/***/ function(module, exports) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * This is an internal module.
	 * @module store/stub
	 */
	
	/**
	 * Construct a stub store. This does no-ops on most store methods.
	 * @constructor
	 */
	function StubStore() {
	    this.fromToken = null;
	}
	
	StubStore.prototype = {
	
	    /**
	     * Get the sync token.
	     * @return {string}
	     */
	    getSyncToken: function() {
	        return this.fromToken;
	    },
	
	    /**
	     * Set the sync token.
	     * @param {string} token
	     */
	    setSyncToken: function(token) {
	        this.fromToken = token;
	    },
	
	    /**
	     * No-op.
	     * @param {Room} room
	     */
	    storeRoom: function(room) {
	    },
	
	    /**
	     * No-op.
	     * @param {string} roomId
	     * @return {null}
	     */
	    getRoom: function(roomId) {
	        return null;
	    },
	
	    /**
	     * No-op.
	     * @return {Array} An empty array.
	     */
	    getRooms: function() {
	        return [];
	    },
	
	    /**
	     * Permanently delete a room.
	     * @param {string} roomId
	     */
	    removeRoom: function(roomId) {
	        return;
	    },
	
	    /**
	     * No-op.
	     * @return {Array} An empty array.
	     */
	    getRoomSummaries: function() {
	        return [];
	    },
	
	    /**
	     * No-op.
	     * @param {User} user
	     */
	    storeUser: function(user) {
	    },
	
	    /**
	     * No-op.
	     * @param {string} userId
	     * @return {null}
	     */
	    getUser: function(userId) {
	        return null;
	    },
	
	    /**
	     * No-op.
	     * @return {User[]}
	     */
	    getUsers: function() {
	        return [];
	    },
	
	    /**
	     * No-op.
	     * @param {Room} room
	     * @param {integer} limit
	     * @return {Array}
	     */
	    scrollback: function(room, limit) {
	        return [];
	    },
	
	    /**
	     * Store events for a room.
	     * @param {Room} room The room to store events for.
	     * @param {Array<MatrixEvent>} events The events to store.
	     * @param {string} token The token associated with these events.
	     * @param {boolean} toStart True if these are paginated results.
	     */
	    storeEvents: function(room, events, token, toStart) {
	    },
	
	    /**
	     * Store a filter.
	     * @param {Filter} filter
	     */
	    storeFilter: function(filter) {
	    },
	
	    /**
	     * Retrieve a filter.
	     * @param {string} userId
	     * @param {string} filterId
	     * @return {?Filter} A filter or null.
	     */
	    getFilter: function(userId, filterId) {
	        return null;
	    },
	
	    /**
	     * Retrieve a filter ID with the given name.
	     * @param {string} filterName The filter name.
	     * @return {?string} The filter ID or null.
	     */
	    getFilterIdByName: function(filterName) {
	        return null;
	    },
	
	    /**
	     * Set a filter name to ID mapping.
	     * @param {string} filterName
	     * @param {string} filterId
	     */
	    setFilterIdByName: function(filterName, filterId) {
	
	    },
	
	    /**
	     * Store user-scoped account data events
	     * @param {Array<MatrixEvent>} events The events to store.
	     */
	    storeAccountDataEvents: function(events) {
	
	    },
	
	    /**
	     * Get account data event by event type
	     * @param {string} eventType The event type being queried
	     */
	    getAccountData: function(eventType) {
	
	    },
	
	    // TODO
	    //setMaxHistoryPerRoom: function(maxHistory) {},
	
	    // TODO
	    //reapOldMessages: function() {},
	};
	
	/** Stub Store class. */
	module.exports = StubStore;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * This is an internal module. See {@link createNewMatrixCall} for the public API.
	 * @module webrtc/call
	 */
	var utils = __webpack_require__(185);
	var EventEmitter = __webpack_require__(187).EventEmitter;
	var DEBUG = true;  // set true to enable console logging.
	
	// events: hangup, error(err), replaced(call), state(state, oldState)
	
	/**
	 * Construct a new Matrix Call.
	 * @constructor
	 * @param {Object} opts Config options.
	 * @param {string} opts.roomId The room ID for this call.
	 * @param {Object} opts.webRtc The WebRTC globals from the browser.
	 * @param {Object} opts.URL The URL global.
	 * @param {Array<Object>} opts.turnServers Optional. A list of TURN servers.
	 * @param {MatrixClient} opts.client The Matrix Client instance to send events to.
	 */
	function MatrixCall(opts) {
	    this.roomId = opts.roomId;
	    this.client = opts.client;
	    this.webRtc = opts.webRtc;
	    this.URL = opts.URL;
	    // Array of Objects with urls, username, credential keys
	    this.turnServers = opts.turnServers || [];
	    if (this.turnServers.length === 0) {
	        this.turnServers.push({
	            urls: [MatrixCall.FALLBACK_STUN_SERVER]
	        });
	    }
	    utils.forEach(this.turnServers, function(server) {
	        utils.checkObjectHasKeys(server, ["urls"]);
	    });
	
	    this.callId = "c" + new Date().getTime();
	    this.state = 'fledgling';
	    this.didConnect = false;
	
	    // A queue for candidates waiting to go out.
	    // We try to amalgamate candidates into a single candidate message where
	    // possible
	    this.candidateSendQueue = [];
	    this.candidateSendTries = 0;
	
	    // Lookup from opaque queue ID to a promise for media element operations that
	    // need to be serialised into a given queue.  Store this per-MatrixCall on the
	    // assumption that multiple matrix calls will never compete for control of the
	    // same DOM elements.
	    this.mediaPromises = Object.create(null);
	
	    this.screenSharingStream = null;
	}
	/** The length of time a call can be ringing for. */
	MatrixCall.CALL_TIMEOUT_MS = 60000;
	/** The fallback server to use for STUN. */
	MatrixCall.FALLBACK_STUN_SERVER = 'stun:stun.l.google.com:19302';
	/** An error code when the local client failed to create an offer. */
	MatrixCall.ERR_LOCAL_OFFER_FAILED = "local_offer_failed";
	/**
	 * An error code when there is no local mic/camera to use. This may be because
	 * the hardware isn't plugged in, or the user has explicitly denied access.
	 */
	MatrixCall.ERR_NO_USER_MEDIA = "no_user_media";
	
	utils.inherits(MatrixCall, EventEmitter);
	
	/**
	 * Place a voice call to this room.
	 * @throws If you have not specified a listener for 'error' events.
	 */
	MatrixCall.prototype.placeVoiceCall = function() {
	    debuglog("placeVoiceCall");
	    checkForErrorListener(this);
	    _placeCallWithConstraints(this, _getUserMediaVideoContraints('voice'));
	    this.type = 'voice';
	};
	
	/**
	 * Place a video call to this room.
	 * @param {Element} remoteVideoElement a <code>&lt;video&gt;</code> DOM element
	 * to render video to.
	 * @param {Element} localVideoElement a <code>&lt;video&gt;</code> DOM element
	 * to render the local camera preview.
	 * @throws If you have not specified a listener for 'error' events.
	 */
	MatrixCall.prototype.placeVideoCall = function(remoteVideoElement, localVideoElement) {
	    debuglog("placeVideoCall");
	    checkForErrorListener(this);
	    this.localVideoElement = localVideoElement;
	    this.remoteVideoElement = remoteVideoElement;
	    _placeCallWithConstraints(this, _getUserMediaVideoContraints('video'));
	    this.type = 'video';
	    _tryPlayRemoteStream(this);
	};
	
	/**
	 * Place a screen-sharing call to this room. This includes audio.
	 * <b>This method is EXPERIMENTAL and subject to change without warning. It
	 * only works in Google Chrome.</b>
	 * @param {Element} remoteVideoElement a <code>&lt;video&gt;</code> DOM element
	 * to render video to.
	 * @param {Element} localVideoElement a <code>&lt;video&gt;</code> DOM element
	 * to render the local camera preview.
	 * @throws If you have not specified a listener for 'error' events.
	 */
	MatrixCall.prototype.placeScreenSharingCall =
	    function(remoteVideoElement, localVideoElement)
	{
	    debuglog("placeScreenSharingCall");
	    checkForErrorListener(this);
	    var screenConstraints = _getChromeScreenSharingConstraints(this);
	    if (!screenConstraints) {
	        return;
	    }
	    this.localVideoElement = localVideoElement;
	    this.remoteVideoElement = remoteVideoElement;
	    var self = this;
	    this.webRtc.getUserMedia(screenConstraints, function(stream) {
	        self.screenSharingStream = stream;
	        debuglog("Got screen stream, requesting audio stream...");
	        var audioConstraints = _getUserMediaVideoContraints('voice');
	        _placeCallWithConstraints(self, audioConstraints);
	    }, function(err) {
	        self.emit("error",
	            callError(
	                MatrixCall.ERR_NO_USER_MEDIA,
	                "Failed to get screen-sharing stream: " + err
	            )
	        );
	    });
	    this.type = 'video';
	    _tryPlayRemoteStream(this);
	};
	
	/**
	 * Play the given HTMLMediaElement, serialising the operation into a chain
	 * of promises to avoid racing access to the element
	 * @param {Element} HTMLMediaElement element to play
	 * @param {string} queueId Arbitrary ID to track the chain of promises to be used
	 */
	MatrixCall.prototype.playElement = function(element, queueId) {
	    console.log("queuing play on " + queueId + " and element " + element);
	    // XXX: FIXME: Does this leak elements, given the old promises
	    // may hang around and retain a reference to them?
	    if (this.mediaPromises[queueId]) {
	        // XXX: these promises can fail (e.g. by <video/> being unmounted whilst
	        // pending receiving media to play - e.g. whilst switching between
	        // rooms before answering an inbound call), and throw unhandled exceptions.
	        // However, we should soldier on as best we can even if they fail, given
	        // these failures may be non-fatal (as in the case of unmounts)
	        this.mediaPromises[queueId] =
	            this.mediaPromises[queueId].then(function() {
	                console.log("previous promise completed for " + queueId);
	                return element.play();
	            }, function() {
	                console.log("previous promise failed for " + queueId);
	                return element.play();
	            });
	    }
	    else {
	        this.mediaPromises[queueId] = element.play();
	    }
	};
	
	/**
	 * Pause the given HTMLMediaElement, serialising the operation into a chain
	 * of promises to avoid racing access to the element
	 * @param {Element} HTMLMediaElement element to pause
	 * @param {string} queueId Arbitrary ID to track the chain of promises to be used
	 */
	MatrixCall.prototype.pauseElement = function(element, queueId) {
	    console.log("queuing pause on " + queueId + " and element " + element);
	    if (this.mediaPromises[queueId]) {
	        this.mediaPromises[queueId] =
	            this.mediaPromises[queueId].then(function() {
	                console.log("previous promise completed for " + queueId);
	                return element.pause();
	            }, function() {
	                console.log("previous promise failed for " + queueId);
	                return element.pause();
	            });
	    }
	    else {
	        // pause doesn't actually return a promise, but do this for symmetry
	        // and just in case it does in future.
	        this.mediaPromises[queueId] = element.pause();
	    }
	};
	
	/**
	 * Assign the given HTMLMediaElement by setting the .src attribute on it,
	 * serialising the operation into a chain of promises to avoid racing access
	 * to the element
	 * @param {Element} HTMLMediaElement element to pause
	 * @param {string} src the src attribute value to assign to the element
	 * @param {string} queueId Arbitrary ID to track the chain of promises to be used
	 */
	MatrixCall.prototype.assignElement = function(element, src, queueId) {
	    console.log("queuing assign on " + queueId + " element " + element + " for " + src);
	    if (this.mediaPromises[queueId]) {
	        this.mediaPromises[queueId] =
	            this.mediaPromises[queueId].then(function() {
	                console.log("previous promise completed for " + queueId);
	                element.src = src;
	            }, function() {
	                console.log("previous promise failed for " + queueId);
	                element.src = src;
	            });
	    }
	    else {
	        element.src = src;
	    }
	};
	
	/**
	 * Retrieve the local <code>&lt;video&gt;</code> DOM element.
	 * @return {Element} The dom element
	 */
	MatrixCall.prototype.getLocalVideoElement = function() {
	    return this.localVideoElement;
	};
	
	/**
	 * Retrieve the remote <code>&lt;video&gt;</code> DOM element
	 * used for playing back video capable streams.
	 * @return {Element} The dom element
	 */
	MatrixCall.prototype.getRemoteVideoElement = function() {
	    return this.remoteVideoElement;
	};
	
	/**
	 * Retrieve the remote <code>&lt;audio&gt;</code> DOM element
	 * used for playing back audio only streams.
	 * @return {Element} The dom element
	 */
	MatrixCall.prototype.getRemoteAudioElement = function() {
	    return this.remoteAudioElement;
	};
	
	/**
	 * Set the local <code>&lt;video&gt;</code> DOM element. If this call is active,
	 * video will be rendered to it immediately.
	 * @param {Element} element The <code>&lt;video&gt;</code> DOM element.
	 */
	MatrixCall.prototype.setLocalVideoElement = function(element) {
	    this.localVideoElement = element;
	
	    if (element && this.localAVStream && this.type === 'video') {
	        element.autoplay = true;
	        this.assignElement(element,
	                           this.URL.createObjectURL(this.localAVStream),
	                           "localVideo");
	        element.muted = true;
	        var self = this;
	        setTimeout(function() {
	            var vel = self.getLocalVideoElement();
	            if (vel.play) {
	                self.playElement(vel, "localVideo");
	            }
	        }, 0);
	    }
	};
	
	/**
	 * Set the remote <code>&lt;video&gt;</code> DOM element. If this call is active,
	 * the first received video-capable stream will be rendered to it immediately.
	 * @param {Element} element The <code>&lt;video&gt;</code> DOM element.
	 */
	MatrixCall.prototype.setRemoteVideoElement = function(element) {
	    this.remoteVideoElement = element;
	    _tryPlayRemoteStream(this);
	};
	
	/**
	 * Set the remote <code>&lt;audio&gt;</code> DOM element. If this call is active,
	 * the first received audio-only stream will be rendered to it immediately.
	 * The audio will *not* be rendered from the remoteVideoElement.
	 * @param {Element} element The <code>&lt;video&gt;</code> DOM element.
	 */
	MatrixCall.prototype.setRemoteAudioElement = function(element) {
	    this.remoteVideoElement.muted = true;
	    this.remoteAudioElement = element;
	    _tryPlayRemoteAudioStream(this);
	};
	
	/**
	 * Configure this call from an invite event. Used by MatrixClient.
	 * @protected
	 * @param {MatrixEvent} event The m.call.invite event
	 */
	MatrixCall.prototype._initWithInvite = function(event) {
	    this.msg = event.getContent();
	    this.peerConn = _createPeerConnection(this);
	    var self = this;
	    if (this.peerConn) {
	        this.peerConn.setRemoteDescription(
	            new this.webRtc.RtcSessionDescription(this.msg.offer),
	            hookCallback(self, self._onSetRemoteDescriptionSuccess),
	            hookCallback(self, self._onSetRemoteDescriptionError)
	        );
	    }
	    setState(this, 'ringing');
	    this.direction = 'inbound';
	
	    // firefox and OpenWebRTC's RTCPeerConnection doesn't add streams until it
	    // starts getting media on them so we need to figure out whether a video
	    // channel has been offered by ourselves.
	    if (
	        this.msg.offer &&
	        this.msg.offer.sdp &&
	        this.msg.offer.sdp.indexOf('m=video') > -1
	    ) {
	        this.type = 'video';
	    }
	    else {
	        this.type = 'voice';
	    }
	
	    if (event.getAge()) {
	        setTimeout(function() {
	            if (self.state == 'ringing') {
	                debuglog("Call invite has expired. Hanging up.");
	                self.hangupParty = 'remote'; // effectively
	                setState(self, 'ended');
	                stopAllMedia(self);
	                if (self.peerConn.signalingState != 'closed') {
	                    self.peerConn.close();
	                }
	                self.emit("hangup", self);
	            }
	        }, this.msg.lifetime - event.getAge());
	    }
	};
	
	/**
	 * Configure this call from a hangup event. Used by MatrixClient.
	 * @protected
	 * @param {MatrixEvent} event The m.call.hangup event
	 */
	MatrixCall.prototype._initWithHangup = function(event) {
	    // perverse as it may seem, sometimes we want to instantiate a call with a
	    // hangup message (because when getting the state of the room on load, events
	    // come in reverse order and we want to remember that a call has been hung up)
	    this.msg = event.getContent();
	    setState(this, 'ended');
	};
	
	/**
	 * Answer a call.
	 */
	MatrixCall.prototype.answer = function() {
	    debuglog("Answering call %s of type %s", this.callId, this.type);
	    var self = this;
	
	    if (!this.localAVStream && !this.waitForLocalAVStream) {
	        this.webRtc.getUserMedia(
	            _getUserMediaVideoContraints(this.type),
	            hookCallback(self, self._gotUserMediaForAnswer),
	            hookCallback(self, self._getUserMediaFailed)
	        );
	        setState(this, 'wait_local_media');
	    } else if (this.localAVStream) {
	        this._gotUserMediaForAnswer(this.localAVStream);
	    } else if (this.waitForLocalAVStream) {
	        setState(this, 'wait_local_media');
	    }
	};
	
	/**
	 * Replace this call with a new call, e.g. for glare resolution. Used by
	 * MatrixClient.
	 * @protected
	 * @param {MatrixCall} newCall The new call.
	 */
	MatrixCall.prototype._replacedBy = function(newCall) {
	    debuglog(this.callId + " being replaced by " + newCall.callId);
	    if (this.state == 'wait_local_media') {
	        debuglog("Telling new call to wait for local media");
	        newCall.waitForLocalAVStream = true;
	    } else if (this.state == 'create_offer') {
	        debuglog("Handing local stream to new call");
	        newCall._gotUserMediaForAnswer(this.localAVStream);
	        delete(this.localAVStream);
	    } else if (this.state == 'invite_sent') {
	        debuglog("Handing local stream to new call");
	        newCall._gotUserMediaForAnswer(this.localAVStream);
	        delete(this.localAVStream);
	    }
	    newCall.localVideoElement = this.localVideoElement;
	    newCall.remoteVideoElement = this.remoteVideoElement;
	    newCall.remoteAudioElement = this.remoteAudioElement;
	    this.successor = newCall;
	    this.emit("replaced", newCall);
	    this.hangup(true);
	};
	
	/**
	 * Hangup a call.
	 * @param {string} reason The reason why the call is being hung up.
	 * @param {boolean} suppressEvent True to suppress emitting an event.
	 */
	MatrixCall.prototype.hangup = function(reason, suppressEvent) {
	    debuglog("Ending call " + this.callId);
	    terminate(this, "local", reason, !suppressEvent);
	    var content = {
	        version: 0,
	        call_id: this.callId,
	        reason: reason
	    };
	    sendEvent(this, 'm.call.hangup', content);
	};
	
	/**
	 * Set whether the local video preview should be muted or not.
	 * @param {boolean} muted True to mute the local video.
	 */
	MatrixCall.prototype.setLocalVideoMuted = function(muted) {
	    if (!this.localAVStream) {
	        return;
	    }
	    setTracksEnabled(this.localAVStream.getVideoTracks(), !muted);
	};
	
	/**
	 * Check if local video is muted.
	 *
	 * If there are multiple video tracks, <i>all</i> of the tracks need to be muted
	 * for this to return true. This means if there are no video tracks, this will
	 * return true.
	 * @return {Boolean} True if the local preview video is muted, else false
	 * (including if the call is not set up yet).
	 */
	MatrixCall.prototype.isLocalVideoMuted = function() {
	    if (!this.localAVStream) {
	        return false;
	    }
	    return !isTracksEnabled(this.localAVStream.getVideoTracks());
	};
	
	/**
	 * Set whether the microphone should be muted or not.
	 * @param {boolean} muted True to mute the mic.
	 */
	MatrixCall.prototype.setMicrophoneMuted = function(muted) {
	    if (!this.localAVStream) {
	        return;
	    }
	    setTracksEnabled(this.localAVStream.getAudioTracks(), !muted);
	};
	
	/**
	 * Check if the microphone is muted.
	 *
	 * If there are multiple audio tracks, <i>all</i> of the tracks need to be muted
	 * for this to return true. This means if there are no audio tracks, this will
	 * return true.
	 * @return {Boolean} True if the mic is muted, else false (including if the call
	 * is not set up yet).
	 */
	MatrixCall.prototype.isMicrophoneMuted = function() {
	    if (!this.localAVStream) {
	        return false;
	    }
	    return !isTracksEnabled(this.localAVStream.getAudioTracks());
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} stream
	 */
	MatrixCall.prototype._gotUserMediaForInvite = function(stream) {
	    if (this.successor) {
	        this.successor._gotUserMediaForAnswer(stream);
	        return;
	    }
	    if (this.state == 'ended') {
	        return;
	    }
	    debuglog("_gotUserMediaForInvite -> " + this.type);
	    var self = this;
	    var videoEl = this.getLocalVideoElement();
	
	    if (videoEl && this.type == 'video') {
	        videoEl.autoplay = true;
	        if (this.screenSharingStream) {
	            debuglog("Setting screen sharing stream to the local video element");
	            this.assignElement(videoEl,
	                   this.URL.createObjectURL(this.screenSharingStream),
	                   "localVideo");
	        }
	        else {
	            this.assignElement(videoEl,
	                   this.URL.createObjectURL(stream),
	                   "localVideo");
	        }
	        videoEl.muted = true;
	        setTimeout(function() {
	            var vel = self.getLocalVideoElement();
	            if (vel.play) {
	                self.playElement(vel, "localVideo");
	            }
	        }, 0);
	    }
	
	    this.localAVStream = stream;
	    // why do we enable audio (and only audio) tracks here? -- matthew
	    setTracksEnabled(stream.getAudioTracks(), true);
	    this.peerConn = _createPeerConnection(this);
	    this.peerConn.addStream(stream);
	    if (this.screenSharingStream) {
	        console.log("Adding screen-sharing stream to peer connection");
	        this.peerConn.addStream(this.screenSharingStream);
	        // let's use this for the local preview...
	        this.localAVStream = this.screenSharingStream;
	    }
	    this.peerConn.createOffer(
	        hookCallback(self, self._gotLocalOffer),
	        hookCallback(self, self._getLocalOfferFailed)
	    );
	    setState(self, 'create_offer');
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} stream
	 */
	MatrixCall.prototype._gotUserMediaForAnswer = function(stream) {
	    var self = this;
	    if (self.state == 'ended') {
	        return;
	    }
	    var localVidEl = self.getLocalVideoElement();
	
	    if (localVidEl && self.type == 'video') {
	        localVidEl.autoplay = true;
	        this.assignElement(localVidEl,
	               this.URL.createObjectURL(stream),
	               "localVideo");
	        localVidEl.muted = true;
	        setTimeout(function() {
	            var vel = self.getLocalVideoElement();
	            if (vel.play) {
	                self.playElement(vel, "localVideo");
	            }
	        }, 0);
	    }
	
	    self.localAVStream = stream;
	    setTracksEnabled(stream.getAudioTracks(), true);
	    self.peerConn.addStream(stream);
	
	    var constraints = {
	        'mandatory': {
	            'OfferToReceiveAudio': true,
	            'OfferToReceiveVideo': self.type == 'video'
	        }
	    };
	    self.peerConn.createAnswer(function(description) {
	        debuglog("Created answer: " + description);
	        self.peerConn.setLocalDescription(description, function() {
	            var content = {
	                version: 0,
	                call_id: self.callId,
	                answer: {
	                    sdp: self.peerConn.localDescription.sdp,
	                    type: self.peerConn.localDescription.type
	                }
	            };
	            sendEvent(self, 'm.call.answer', content);
	            setState(self, 'connecting');
	        }, function() {
	            debuglog("Error setting local description!");
	        }, constraints);
	    }, function(err) {
	        debuglog("Failed to create answer: " + err);
	    });
	    setState(self, 'create_answer');
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} event
	 */
	MatrixCall.prototype._gotLocalIceCandidate = function(event) {
	    if (event.candidate) {
	        debuglog(
	            "Got local ICE " + event.candidate.sdpMid + " candidate: " +
	            event.candidate.candidate
	        );
	        // As with the offer, note we need to make a copy of this object, not
	        // pass the original: that broke in Chrome ~m43.
	        var c = {
	            candidate: event.candidate.candidate,
	            sdpMid: event.candidate.sdpMid,
	            sdpMLineIndex: event.candidate.sdpMLineIndex
	        };
	        sendCandidate(this, c);
	    }
	};
	
	/**
	 * Used by MatrixClient.
	 * @protected
	 * @param {Object} cand
	 */
	MatrixCall.prototype._gotRemoteIceCandidate = function(cand) {
	    if (this.state == 'ended') {
	        //debuglog("Ignoring remote ICE candidate because call has ended");
	        return;
	    }
	    debuglog("Got remote ICE " + cand.sdpMid + " candidate: " + cand.candidate);
	    this.peerConn.addIceCandidate(
	        new this.webRtc.RtcIceCandidate(cand),
	        function() {},
	        function(e) {}
	    );
	};
	
	/**
	 * Used by MatrixClient.
	 * @protected
	 * @param {Object} msg
	 */
	MatrixCall.prototype._receivedAnswer = function(msg) {
	    if (this.state == 'ended') {
	        return;
	    }
	
	    var self = this;
	    this.peerConn.setRemoteDescription(
	        new this.webRtc.RtcSessionDescription(msg.answer),
	        hookCallback(self, self._onSetRemoteDescriptionSuccess),
	        hookCallback(self, self._onSetRemoteDescriptionError)
	    );
	    setState(self, 'connecting');
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} description
	 */
	MatrixCall.prototype._gotLocalOffer = function(description) {
	    var self = this;
	    debuglog("Created offer: " + description);
	
	    if (self.state == 'ended') {
	        debuglog("Ignoring newly created offer on call ID " + self.callId +
	            " because the call has ended");
	        return;
	    }
	
	    self.peerConn.setLocalDescription(description, function() {
	        var content = {
	            version: 0,
	            call_id: self.callId,
	            // OpenWebRTC appears to add extra stuff (like the DTLS fingerprint)
	            // to the description when setting it on the peerconnection.
	            // According to the spec it should only add ICE
	            // candidates. Any ICE candidates that have already been generated
	            // at this point will probably be sent both in the offer and separately.
	            // Also, note that we have to make a new object here, copying the
	            // type and sdp properties.
	            // Passing the RTCSessionDescription object as-is doesn't work in
	            // Chrome (as of about m43).
	            offer: {
	                sdp: self.peerConn.localDescription.sdp,
	                type: self.peerConn.localDescription.type
	            },
	            lifetime: MatrixCall.CALL_TIMEOUT_MS
	        };
	        sendEvent(self, 'm.call.invite', content);
	
	        setTimeout(function() {
	            if (self.state == 'invite_sent') {
	                self.hangup('invite_timeout');
	            }
	        }, MatrixCall.CALL_TIMEOUT_MS);
	        setState(self, 'invite_sent');
	    }, function() {
	        debuglog("Error setting local description!");
	    });
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} error
	 */
	MatrixCall.prototype._getLocalOfferFailed = function(error) {
	    this.emit(
	        "error",
	        callError(MatrixCall.ERR_LOCAL_OFFER_FAILED, "Failed to start audio for call!")
	    );
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} error
	 */
	MatrixCall.prototype._getUserMediaFailed = function(error) {
	    this.emit(
	        "error",
	        callError(
	            MatrixCall.ERR_NO_USER_MEDIA,
	            "Couldn't start capturing media! Is your microphone set up and " +
	            "does this app have permission?"
	        )
	    );
	    this.hangup("user_media_failed");
	};
	
	/**
	 * Internal
	 * @private
	 */
	MatrixCall.prototype._onIceConnectionStateChanged = function() {
	    if (this.state == 'ended') {
	        return; // because ICE can still complete as we're ending the call
	    }
	    debuglog(
	        "Ice connection state changed to: " + this.peerConn.iceConnectionState
	    );
	    // ideally we'd consider the call to be connected when we get media but
	    // chrome doesn't implement any of the 'onstarted' events yet
	    if (this.peerConn.iceConnectionState == 'completed' ||
	            this.peerConn.iceConnectionState == 'connected') {
	        setState(this, 'connected');
	        this.didConnect = true;
	    } else if (this.peerConn.iceConnectionState == 'failed') {
	        this.hangup('ice_failed');
	    }
	};
	
	/**
	 * Internal
	 * @private
	 */
	MatrixCall.prototype._onSignallingStateChanged = function() {
	    debuglog(
	        "call " + this.callId + ": Signalling state changed to: " +
	        this.peerConn.signalingState
	    );
	};
	
	/**
	 * Internal
	 * @private
	 */
	MatrixCall.prototype._onSetRemoteDescriptionSuccess = function() {
	    debuglog("Set remote description");
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} e
	 */
	MatrixCall.prototype._onSetRemoteDescriptionError = function(e) {
	    debuglog("Failed to set remote description" + e);
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} event
	 */
	MatrixCall.prototype._onAddStream = function(event) {
	    debuglog("Stream id " + event.stream.id + " added");
	
	    var s = event.stream;
	
	    if (s.getVideoTracks().length > 0) {
	        this.type = 'video';
	        this.remoteAVStream = s;
	        this.remoteAStream = s;
	    } else {
	        this.type = 'voice';
	        this.remoteAStream = s;
	    }
	
	    var self = this;
	    forAllTracksOnStream(s, function(t) {
	        debuglog("Track id " + t.id + " added");
	        // not currently implemented in chrome
	        t.onstarted = hookCallback(self, self._onRemoteStreamTrackStarted);
	    });
	
	    if (event.stream.oninactive !== undefined) {
	        event.stream.oninactive = hookCallback(self, self._onRemoteStreamEnded);
	    }
	    else {
	        // onended is deprecated from Chrome 54
	        event.stream.onended = hookCallback(self, self._onRemoteStreamEnded);
	    }
	
	    // not currently implemented in chrome
	    event.stream.onstarted = hookCallback(self, self._onRemoteStreamStarted);
	
	    if (this.type === 'video') {
	        _tryPlayRemoteStream(this);
	        _tryPlayRemoteAudioStream(this);
	    }
	    else {
	        _tryPlayRemoteAudioStream(this);
	    }
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} event
	 */
	MatrixCall.prototype._onRemoteStreamStarted = function(event) {
	    setState(this, 'connected');
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} event
	 */
	MatrixCall.prototype._onRemoteStreamEnded = function(event) {
	    debuglog("Remote stream ended");
	    this.hangupParty = 'remote';
	    setState(this, 'ended');
	    stopAllMedia(this);
	    if (this.peerConn.signalingState != 'closed') {
	        this.peerConn.close();
	    }
	    this.emit("hangup", this);
	};
	
	/**
	 * Internal
	 * @private
	 * @param {Object} event
	 */
	MatrixCall.prototype._onRemoteStreamTrackStarted = function(event) {
	    setState(this, 'connected');
	};
	
	/**
	 * Used by MatrixClient.
	 * @protected
	 * @param {Object} msg
	 */
	MatrixCall.prototype._onHangupReceived = function(msg) {
	    debuglog("Hangup received");
	    terminate(this, "remote", msg.reason, true);
	};
	
	/**
	 * Used by MatrixClient.
	 * @protected
	 * @param {Object} msg
	 */
	MatrixCall.prototype._onAnsweredElsewhere = function(msg) {
	    debuglog("Answered elsewhere");
	    terminate(this, "remote", "answered_elsewhere", true);
	};
	
	var setTracksEnabled = function(tracks, enabled) {
	    for (var i = 0; i < tracks.length; i++) {
	        tracks[i].enabled = enabled;
	    }
	};
	
	var isTracksEnabled = function(tracks) {
	    for (var i = 0; i < tracks.length; i++) {
	        if (tracks[i].enabled) {
	            return true; // at least one track is enabled
	        }
	    }
	    return false;
	};
	
	var setState = function(self, state) {
	    var oldState = self.state;
	    self.state = state;
	    self.emit("state", state, oldState);
	};
	
	/**
	 * Internal
	 * @param {MatrixCall} self
	 * @param {string} eventType
	 * @param {Object} content
	 * @return {Promise}
	 */
	var sendEvent = function(self, eventType, content) {
	    return self.client.sendEvent(self.roomId, eventType, content);
	};
	
	var sendCandidate = function(self, content) {
	    // Sends candidates with are sent in a special way because we try to amalgamate
	    // them into one message
	    self.candidateSendQueue.push(content);
	    if (self.candidateSendTries === 0) {
	        setTimeout(function() {
	            _sendCandidateQueue(self);
	        }, 100);
	    }
	};
	
	var terminate = function(self, hangupParty, hangupReason, shouldEmit) {
	    if (self.getRemoteVideoElement()) {
	        if (self.getRemoteVideoElement().pause) {
	            self.pauseElement(self.getRemoteVideoElement(), "remoteVideo");
	        }
	        self.assignElement(self.getRemoteVideoElement(), "", "remoteVideo");
	    }
	    if (self.getRemoteAudioElement()) {
	        if (self.getRemoteAudioElement().pause) {
	            self.pauseElement(self.getRemoteAudioElement(), "remoteAudio");
	        }
	        self.assignElement(self.getRemoteAudioElement(), "", "remoteAudio");
	    }
	    if (self.getLocalVideoElement()) {
	        if (self.getLocalVideoElement().pause) {
	            self.pauseElement(self.getLocalVideoElement(), "localVideo");
	        }
	        self.assignElement(self.getLocalVideoElement(), "", "localVideo");
	    }
	    self.hangupParty = hangupParty;
	    self.hangupReason = hangupReason;
	    setState(self, 'ended');
	    stopAllMedia(self);
	    if (self.peerConn && self.peerConn.signalingState !== 'closed') {
	        self.peerConn.close();
	    }
	    if (shouldEmit) {
	        self.emit("hangup", self);
	    }
	};
	
	var stopAllMedia = function(self) {
	    debuglog("stopAllMedia (stream=%s)", self.localAVStream);
	    if (self.localAVStream) {
	        forAllTracksOnStream(self.localAVStream, function(t) {
	            if (t.stop) {
	                t.stop();
	            }
	        });
	        // also call stop on the main stream so firefox will stop sharing
	        // the mic
	        if (self.localAVStream.stop) {
	            self.localAVStream.stop();
	        }
	    }
	    if (self.screenSharingStream) {
	        forAllTracksOnStream(self.screenSharingStream, function(t) {
	            if (t.stop) {
	                t.stop();
	            }
	        });
	        if (self.screenSharingStream.stop) {
	            self.screenSharingStream.stop();
	        }
	    }
	    if (self.remoteAVStream) {
	        forAllTracksOnStream(self.remoteAVStream, function(t) {
	            if (t.stop) {
	                t.stop();
	            }
	        });
	    }
	    if (self.remoteAStream) {
	        forAllTracksOnStream(self.remoteAStream, function(t) {
	            if (t.stop) {
	                t.stop();
	            }
	        });
	    }
	};
	
	var _tryPlayRemoteStream = function(self) {
	    if (self.getRemoteVideoElement() && self.remoteAVStream) {
	        var player = self.getRemoteVideoElement();
	        player.autoplay = true;
	        self.assignElement(player,
	                           self.URL.createObjectURL(self.remoteAVStream),
	                           "remoteVideo");
	        setTimeout(function() {
	            var vel = self.getRemoteVideoElement();
	            if (vel.play) {
	                self.playElement(vel, "remoteVideo");
	            }
	            // OpenWebRTC does not support oniceconnectionstatechange yet
	            if (self.webRtc.isOpenWebRTC()) {
	                setState(self, 'connected');
	            }
	        }, 0);
	    }
	};
	
	var _tryPlayRemoteAudioStream = function(self) {
	    if (self.getRemoteAudioElement() && self.remoteAStream) {
	        var player = self.getRemoteAudioElement();
	        player.autoplay = true;
	        self.assignElement(player,
	                           self.URL.createObjectURL(self.remoteAStream),
	                           "remoteAudio");
	        setTimeout(function() {
	            var ael = self.getRemoteAudioElement();
	            if (ael.play) {
	                self.playElement(ael, "remoteAudio");
	            }
	            // OpenWebRTC does not support oniceconnectionstatechange yet
	            if (self.webRtc.isOpenWebRTC()) {
	                setState(self, 'connected');
	            }
	        }, 0);
	    }
	};
	
	var checkForErrorListener = function(self) {
	    if (self.listeners("error").length === 0) {
	        throw new Error(
	            "You MUST attach an error listener using call.on('error', function() {})"
	        );
	    }
	};
	
	var callError = function(code, msg) {
	    var e = new Error(msg);
	    e.code = code;
	    return e;
	};
	
	var debuglog = function() {
	    if (DEBUG) {
	        console.log.apply(console, arguments);
	    }
	};
	
	var _sendCandidateQueue = function(self) {
	    if (self.candidateSendQueue.length === 0) {
	        return;
	    }
	
	    var cands = self.candidateSendQueue;
	    self.candidateSendQueue = [];
	    ++self.candidateSendTries;
	    var content = {
	        version: 0,
	        call_id: self.callId,
	        candidates: cands
	    };
	    debuglog("Attempting to send " + cands.length + " candidates");
	    sendEvent(self, 'm.call.candidates', content).then(function() {
	        self.candidateSendTries = 0;
	        _sendCandidateQueue(self);
	    }, function(error) {
	        for (var i = 0; i < cands.length; i++) {
	            self.candidateSendQueue.push(cands[i]);
	        }
	
	        if (self.candidateSendTries > 5) {
	            debuglog(
	                "Failed to send candidates on attempt %s. Giving up for now.",
	                self.candidateSendTries
	            );
	            self.candidateSendTries = 0;
	            return;
	        }
	
	        var delayMs = 500 * Math.pow(2, self.candidateSendTries);
	        ++self.candidateSendTries;
	        debuglog("Failed to send candidates. Retrying in " + delayMs + "ms");
	        setTimeout(function() {
	            _sendCandidateQueue(self);
	        }, delayMs);
	    });
	};
	
	var _placeCallWithConstraints = function(self, constraints) {
	    self.client.callList[self.callId] = self;
	    self.webRtc.getUserMedia(
	        constraints,
	        hookCallback(self, self._gotUserMediaForInvite),
	        hookCallback(self, self._getUserMediaFailed)
	    );
	    setState(self, 'wait_local_media');
	    self.direction = 'outbound';
	    self.config = constraints;
	};
	
	var _createPeerConnection = function(self) {
	    var servers = self.turnServers;
	    if (self.webRtc.vendor === "mozilla") {
	        // modify turnServers struct to match what mozilla expects.
	        servers = [];
	        for (var i = 0; i < self.turnServers.length; i++) {
	            for (var j = 0; j < self.turnServers[i].urls.length; j++) {
	                servers.push({
	                    url: self.turnServers[i].urls[j],
	                    username: self.turnServers[i].username,
	                    credential: self.turnServers[i].credential
	                });
	            }
	        }
	    }
	
	    var pc = new self.webRtc.RtcPeerConnection({
	        iceServers: servers
	    });
	    pc.oniceconnectionstatechange = hookCallback(self, self._onIceConnectionStateChanged);
	    pc.onsignalingstatechange = hookCallback(self, self._onSignallingStateChanged);
	    pc.onicecandidate = hookCallback(self, self._gotLocalIceCandidate);
	    pc.onaddstream = hookCallback(self, self._onAddStream);
	    return pc;
	};
	
	var _getChromeScreenSharingConstraints = function(call) {
	    var screen = global.screen;
	    if (!screen) {
	        call.emit("error", callError(
	            MatrixCall.ERR_NO_USER_MEDIA,
	            "Couldn't determine screen sharing constaints."
	        ));
	        return;
	    }
	    // it won't work at all if you're not on HTTPS so whine whine whine
	    if (!global.window || global.window.location.protocol !== "https:") {
	        call.emit("error", callError(
	            MatrixCall.ERR_NO_USER_MEDIA,
	            "You need to be using HTTPS to place a screen-sharing call."
	        ));
	        return;
	    }
	
	    return {
	        video: {
	            mandatory: {
	                chromeMediaSource: "screen",
	                chromeMediaSourceId: "" + Date.now(),
	                maxWidth: screen.width,
	                maxHeight: screen.height,
	                minFrameRate: 1,
	                maxFrameRate: 10
	            }
	        }
	    };
	};
	
	var _getUserMediaVideoContraints = function(callType) {
	    switch (callType) {
	        case 'voice':
	            return ({audio: true, video: false});
	        case 'video':
	            return ({audio: true, video: {
	                mandatory: {
	                    minWidth: 640,
	                    maxWidth: 640,
	                    minHeight: 360,
	                    maxHeight: 360
	                }
	            }});
	    }
	};
	
	var hookCallback = function(call, fn) {
	    return function() {
	        return fn.apply(call, arguments);
	    };
	};
	
	var forAllVideoTracksOnStream = function(s, f) {
	    var tracks = s.getVideoTracks();
	    for (var i = 0; i < tracks.length; i++) {
	        f(tracks[i]);
	    }
	};
	
	var forAllAudioTracksOnStream = function(s, f) {
	    var tracks = s.getAudioTracks();
	    for (var i = 0; i < tracks.length; i++) {
	        f(tracks[i]);
	    }
	};
	
	var forAllTracksOnStream = function(s, f) {
	    forAllVideoTracksOnStream(s, f);
	    forAllAudioTracksOnStream(s, f);
	};
	
	/** The MatrixCall class. */
	module.exports.MatrixCall = MatrixCall;
	
	
	/**
	 * Create a new Matrix call for the browser.
	 * @param {MatrixClient} client The client instance to use.
	 * @param {string} roomId The room the call is in.
	 * @return {MatrixCall} the call or null if the browser doesn't support calling.
	 */
	module.exports.createNewMatrixCall = function(client, roomId) {
	    var w = global.window;
	    var doc = global.document;
	    if (!w || !doc) {
	        return null;
	    }
	    var webRtc = {};
	    webRtc.isOpenWebRTC = function() {
	        var scripts = doc.getElementById("script");
	        if (!scripts || !scripts.length) {
	            return false;
	        }
	        for (var i = 0; i < scripts.length; i++) {
	            if (scripts[i].src.indexOf("owr.js") > -1) {
	                return true;
	            }
	        }
	        return false;
	    };
	    var getUserMedia = (
	        w.navigator.getUserMedia || w.navigator.webkitGetUserMedia ||
	        w.navigator.mozGetUserMedia
	    );
	    if (getUserMedia) {
	        webRtc.getUserMedia = function() {
	            return getUserMedia.apply(w.navigator, arguments);
	        };
	    }
	    webRtc.RtcPeerConnection = (
	        w.RTCPeerConnection || w.webkitRTCPeerConnection || w.mozRTCPeerConnection
	    );
	    webRtc.RtcSessionDescription = (
	        w.RTCSessionDescription || w.webkitRTCSessionDescription ||
	        w.mozRTCSessionDescription
	    );
	    webRtc.RtcIceCandidate = (
	        w.RTCIceCandidate || w.webkitRTCIceCandidate || w.mozRTCIceCandidate
	    );
	    webRtc.vendor = null;
	    if (w.mozRTCPeerConnection) {
	        webRtc.vendor = "mozilla";
	    }
	    else if (w.webkitRTCPeerConnection) {
	        webRtc.vendor = "webkit";
	    }
	    else if (w.RTCPeerConnection) {
	        webRtc.vendor = "generic";
	    }
	    if (!webRtc.RtcIceCandidate || !webRtc.RtcSessionDescription ||
	            !webRtc.RtcPeerConnection || !webRtc.getUserMedia) {
	        return null; // WebRTC is not supported.
	    }
	    var opts = {
	        webRtc: webRtc,
	        client: client,
	        URL: w.URL,
	        roomId: roomId,
	        turnServers: client.getTurnServers()
	    };
	    return new MatrixCall(opts);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module filter
	 */
	
	var FilterComponent = __webpack_require__(213);
	
	/**
	 * @param {Object} obj
	 * @param {string} keyNesting
	 * @param {*} val
	 */
	function setProp(obj, keyNesting, val) {
	    var nestedKeys = keyNesting.split(".");
	    var currentObj = obj;
	    for (var i = 0; i < (nestedKeys.length - 1); i++) {
	        if (!currentObj[nestedKeys[i]]) {
	            currentObj[nestedKeys[i]] = {};
	        }
	        currentObj = currentObj[nestedKeys[i]];
	    }
	    currentObj[nestedKeys[nestedKeys.length - 1]] = val;
	}
	
	/**
	 * Construct a new Filter.
	 * @constructor
	 * @param {string} userId The user ID for this filter.
	 * @param {string=} filterId The filter ID if known.
	 * @prop {string} userId The user ID of the filter
	 * @prop {?string} filterId The filter ID
	 */
	function Filter(userId, filterId) {
	    this.userId = userId;
	    this.filterId = filterId;
	    this.definition = {};
	}
	
	/**
	 * Get the ID of this filter on your homeserver (if known)
	 * @return {?Number} The filter ID
	 */
	Filter.prototype.getFilterId = function() {
	    return this.filterId;
	};
	
	/**
	 * Get the JSON body of the filter.
	 * @return {Object} The filter definition
	 */
	Filter.prototype.getDefinition = function() {
	    return this.definition;
	};
	
	/**
	 * Set the JSON body of the filter
	 * @param {Object} definition The filter definition
	 */
	Filter.prototype.setDefinition = function(definition) {
	    this.definition = definition;
	
	    // This is all ported from synapse's FilterCollection()
	
	    // definitions look something like:
	    // {
	    //   "room": {
	    //     "rooms": ["!abcde:example.com"],
	    //     "not_rooms": ["!123456:example.com"],
	    //     "state": {
	    //       "types": ["m.room.*"],
	    //       "not_rooms": ["!726s6s6q:example.com"],
	    //     },
	    //     "timeline": {
	    //       "limit": 10,
	    //       "types": ["m.room.message"],
	    //       "not_rooms": ["!726s6s6q:example.com"],
	    //       "not_senders": ["@spam:example.com"]
	    //       "contains_url": true
	    //     },
	    //     "ephemeral": {
	    //       "types": ["m.receipt", "m.typing"],
	    //       "not_rooms": ["!726s6s6q:example.com"],
	    //       "not_senders": ["@spam:example.com"]
	    //     }
	    //   },
	    //   "presence": {
	    //     "types": ["m.presence"],
	    //     "not_senders": ["@alice:example.com"]
	    //   },
	    //   "event_format": "client",
	    //   "event_fields": ["type", "content", "sender"]
	    // }
	
	    var room_filter_json = definition.room;
	
	    // consider the top level rooms/not_rooms filter
	    var room_filter_fields = {};
	    if (room_filter_json) {
	        if (room_filter_json.rooms) {
	            room_filter_fields.rooms = room_filter_json.rooms;
	        }
	        if (room_filter_json.rooms) {
	            room_filter_fields.not_rooms = room_filter_json.not_rooms;
	        }
	
	        this._include_leave = room_filter_json.include_leave || false;
	    }
	
	    this._room_filter = new FilterComponent(room_filter_fields);
	    this._room_timeline_filter = new FilterComponent(
	        room_filter_json ? (room_filter_json.timeline || {}) : {}
	    );
	
	    // don't bother porting this from synapse yet:
	    // this._room_state_filter =
	    //     new FilterComponent(room_filter_json.state || {});
	    // this._room_ephemeral_filter =
	    //     new FilterComponent(room_filter_json.ephemeral || {});
	    // this._room_account_data_filter =
	    //     new FilterComponent(room_filter_json.account_data || {});
	    // this._presence_filter =
	    //     new FilterComponent(definition.presence || {});
	    // this._account_data_filter =
	    //     new FilterComponent(definition.account_data || {});
	};
	
	/**
	 * Get the room.timeline filter component of the filter
	 * @return {FilterComponent} room timeline filter component
	 */
	Filter.prototype.getRoomTimelineFilterComponent = function() {
	    return this._room_timeline_filter;
	};
	
	/**
	 * Filter the list of events based on whether they are allowed in a timeline
	 * based on this filter
	 * @param {MatrixEvent[]} events  the list of events being filtered
	 * @return {MatrixEvent[]} the list of events which match the filter
	 */
	Filter.prototype.filterRoomTimeline = function(events) {
	    return this._room_timeline_filter.filter(this._room_filter.filter(events));
	};
	
	/**
	 * Set the max number of events to return for each room's timeline.
	 * @param {Number} limit The max number of events to return for each room.
	 */
	Filter.prototype.setTimelineLimit = function(limit) {
	    setProp(this.definition, "room.timeline.limit", limit);
	};
	
	/**
	 * Control whether left rooms should be included in responses.
	 * @param {boolean} includeLeave True to make rooms the user has left appear
	 * in responses.
	 */
	Filter.prototype.setIncludeLeaveRooms = function(includeLeave) {
	    setProp(this.definition, "room.include_leave", includeLeave);
	};
	
	/**
	 * Create a filter from existing data.
	 * @static
	 * @param {string} userId
	 * @param {string} filterId
	 * @param {Object} jsonObj
	 * @return {Filter}
	 */
	Filter.fromJson = function(userId, filterId, jsonObj) {
	    var filter = new Filter(userId, filterId);
	    filter.setDefinition(jsonObj);
	    return filter;
	};
	
	/** The Filter class */
	module.exports = Filter;


/***/ },
/* 213 */
/***/ function(module, exports) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * @module filter-component
	 */
	
	/**
	 * Checks if a value matches a given field value, which may be a * terminated
	 * wildcard pattern.
	 * @param {String} actual_value  The value to be compared
	 * @param {String} filter_value  The filter pattern to be compared
	 * @return {bool} true if the actual_value matches the filter_value
	 */
	function _matches_wildcard(actual_value, filter_value) {
	    if (filter_value.endsWith("*")) {
	        var type_prefix = filter_value.slice(0, -1);
	        return actual_value.substr(0, type_prefix.length) === type_prefix;
	    }
	    else {
	        return actual_value === filter_value;
	    }
	}
	
	/**
	 * FilterComponent is a section of a Filter definition which defines the
	 * types, rooms, senders filters etc to be applied to a particular type of resource.
	 * This is all ported over from synapse's Filter object.
	 *
	 * N.B. that synapse refers to these as 'Filters', and what js-sdk refers to as
	 * 'Filters' are referred to as 'FilterCollections'.
	 *
	 * @constructor
	 * @param {Object} the definition of this filter JSON, e.g. { 'contains_url': true }
	 */
	function FilterComponent(filter_json) {
	    this.filter_json = filter_json;
	
	    this.types = filter_json.types || null;
	    this.not_types = filter_json.not_types || [];
	
	    this.rooms = filter_json.rooms || null;
	    this.not_rooms = filter_json.not_rooms || [];
	
	    this.senders = filter_json.senders || null;
	    this.not_senders = filter_json.not_senders || [];
	
	    this.contains_url = filter_json.contains_url || null;
	}
	
	/**
	 * Checks with the filter component matches the given event
	 * @param {MatrixEvent} event event to be checked against the filter
	 * @return {bool} true if the event matches the filter
	 */
	FilterComponent.prototype.check = function(event) {
	    return this._checkFields(
	        event.getRoomId(),
	        event.getSender(),
	        event.getType(),
	        event.getContent() ? event.getContent().url !== undefined : false
	    );
	};
	
	/**
	 * Checks whether the filter component matches the given event fields.
	 * @param {String} room_id       the room_id for the event being checked
	 * @param {String} sender        the sender of the event being checked
	 * @param {String} event_type    the type of the event being checked
	 * @param {String} contains_url  whether the event contains a content.url field
	 * @return {bool} true if the event fields match the filter
	 */
	FilterComponent.prototype._checkFields =
	    function(room_id, sender, event_type, contains_url)
	{
	    var literal_keys = {
	        "rooms": function(v) { return room_id === v; },
	        "senders": function(v) { return sender === v; },
	        "types": function(v) { return _matches_wildcard(event_type, v); },
	    };
	
	    var self = this;
	    Object.keys(literal_keys).forEach(function(name) {
	        var match_func = literal_keys[name];
	        var not_name = "not_" + name;
	        var disallowed_values = self[not_name];
	        if (disallowed_values.map(match_func)) {
	            return false;
	        }
	
	        var allowed_values = self[name];
	        if (allowed_values) {
	            if (!allowed_values.map(match_func)) {
	                return false;
	            }
	        }
	    });
	
	    var contains_url_filter = this.filter_json.contains_url;
	    if (contains_url_filter !== undefined) {
	        if (contains_url_filter !== contains_url) {
	            return false;
	        }
	    }
	
	    return true;
	};
	
	/**
	 * Filters a list of events down to those which match this filter component
	 * @param {MatrixEvent[]} events  Events to be checked againt the filter component
	 * @return {MatrixEvent[]} events which matched the filter component
	 */
	FilterComponent.prototype.filter = function(events) {
	    return events.filter(this.check, this);
	};
	
	/**
	 * Returns the limit field for a given filter component, providing a default of
	 * 10 if none is otherwise specified.  Cargo-culted from Synapse.
	 * @return {Number} the limit for this filter component.
	 */
	FilterComponent.prototype.limit = function() {
	    return this.filter_json.limit !== undefined ? this.filter_json.limit : 10;
	};
	
	/** The FilterComponent class */
	module.exports = FilterComponent;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/*
	 * TODO:
	 * This class mainly serves to take all the syncing logic out of client.js and
	 * into a separate file. It's all very fluid, and this class gut wrenches a lot
	 * of MatrixClient props (e.g. _http). Given we want to support WebSockets as
	 * an alternative syncing API, we may want to have a proper syncing interface
	 * for HTTP and WS at some point.
	 */
	var q = __webpack_require__(197);
	var User = __webpack_require__(186);
	var Room = __webpack_require__(189);
	var utils = __webpack_require__(185);
	var Filter = __webpack_require__(212);
	var EventTimeline = __webpack_require__(192);
	
	var DEBUG = true;
	
	// /sync requests allow you to set a timeout= but the request may continue
	// beyond that and wedge forever, so we need to track how long we are willing
	// to keep open the connection. This constant is *ADDED* to the timeout= value
	// to determine the max time we're willing to wait.
	var BUFFER_PERIOD_MS = 80 * 1000;
	
	function getFilterName(userId, suffix) {
	    // scope this on the user ID because people may login on many accounts
	    // and they all need to be stored!
	    return "FILTER_SYNC_" + userId + (suffix ? "_" + suffix : "");
	}
	
	function debuglog() {
	    if (!DEBUG) { return; }
	    console.log.apply(console, arguments);
	}
	
	
	/**
	 * <b>Internal class - unstable.</b>
	 * Construct an entity which is able to sync with a homeserver.
	 * @constructor
	 * @param {MatrixClient} client The matrix client instance to use.
	 * @param {Object} opts Config options
	 */
	function SyncApi(client, opts) {
	    this.client = client;
	    opts = opts || {};
	    opts.initialSyncLimit = opts.initialSyncLimit || 8;
	    opts.resolveInvitesToProfiles = opts.resolveInvitesToProfiles || false;
	    opts.pollTimeout = opts.pollTimeout || (30 * 1000);
	    opts.pendingEventOrdering = opts.pendingEventOrdering || "chronological";
	    this.opts = opts;
	    this._peekRoomId = null;
	    this._syncConnectionLost = false;
	    this._currentSyncRequest = null;
	    this._syncState = null;
	    this._running = false;
	    this._keepAliveTimer = null;
	    this._connectionReturnedDefer = null;
	    this._notifEvents = []; // accumulator of sync events in the current sync response
	
	    if (client.getNotifTimelineSet()) {
	        reEmit(client, client.getNotifTimelineSet(),
	               ["Room.timeline", "Room.timelineReset"]);
	    }
	}
	
	/**
	 * @param {string} roomId
	 * @return {Room}
	 */
	SyncApi.prototype.createRoom = function(roomId) {
	    var client = this.client;
	    var room = new Room(roomId, {
	        pendingEventOrdering: this.opts.pendingEventOrdering,
	        timelineSupport: client.timelineSupport,
	    });
	    reEmit(client, room, ["Room.name", "Room.timeline", "Room.redaction",
	                          "Room.receipt", "Room.tags",
	                          "Room.timelineReset",
	                          "Room.localEchoUpdated",
	                          "Room.accountData",
	                         ]);
	    this._registerStateListeners(room);
	    return room;
	};
	
	/**
	 * @param {Room} room
	 * @private
	 */
	SyncApi.prototype._registerStateListeners = function(room) {
	    var client = this.client;
	    // we need to also re-emit room state and room member events, so hook it up
	    // to the client now. We need to add a listener for RoomState.members in
	    // order to hook them correctly. (TODO: find a better way?)
	    reEmit(client, room.currentState, [
	        "RoomState.events", "RoomState.members", "RoomState.newMember"
	    ]);
	    room.currentState.on("RoomState.newMember", function(event, state, member) {
	        member.user = client.getUser(member.userId);
	        reEmit(
	            client, member,
	            [
	                "RoomMember.name", "RoomMember.typing", "RoomMember.powerLevel",
	                "RoomMember.membership"
	            ]
	        );
	    });
	};
	
	/**
	 * @param {Room} room
	 * @private
	 */
	SyncApi.prototype._deregisterStateListeners = function(room) {
	    // could do with a better way of achieving this.
	    room.currentState.removeAllListeners("RoomState.events");
	    room.currentState.removeAllListeners("RoomState.members");
	    room.currentState.removeAllListeners("RoomState.newMember");
	};
	
	
	/**
	 * Sync rooms the user has left.
	 * @return {Promise} Resolved when they've been added to the store.
	 */
	SyncApi.prototype.syncLeftRooms = function() {
	    var client = this.client;
	    var self = this;
	
	    // grab a filter with limit=1 and include_leave=true
	    var filter = new Filter(this.client.credentials.userId);
	    filter.setTimelineLimit(1);
	    filter.setIncludeLeaveRooms(true);
	
	    var localTimeoutMs = this.opts.pollTimeout + BUFFER_PERIOD_MS;
	    var qps = {
	        timeout: 0 // don't want to block since this is a single isolated req
	    };
	
	    return client.getOrCreateFilter(
	        getFilterName(client.credentials.userId, "LEFT_ROOMS"), filter
	    ).then(function(filterId) {
	        qps.filter = filterId;
	        return client._http.authedRequest(
	            undefined, "GET", "/sync", qps, undefined, localTimeoutMs
	        );
	    }).then(function(data) {
	        var leaveRooms = [];
	        if (data.rooms && data.rooms.leave) {
	            leaveRooms = self._mapSyncResponseToRoomArray(data.rooms.leave);
	        }
	        var rooms = [];
	        leaveRooms.forEach(function(leaveObj) {
	            var room = leaveObj.room;
	            rooms.push(room);
	            if (!leaveObj.isBrandNewRoom) {
	                // the intention behind syncLeftRooms is to add in rooms which were
	                // *omitted* from the initial /sync. Rooms the user were joined to
	                // but then left whilst the app is running will appear in this list
	                // and we do not want to bother with them since they will have the
	                // current state already (and may get dupe messages if we add
	                // yet more timeline events!), so skip them.
	                // NB: When we persist rooms to localStorage this will be more
	                //     complicated...
	                return;
	            }
	            leaveObj.timeline = leaveObj.timeline || {};
	            var timelineEvents =
	                self._mapSyncEventsFormat(leaveObj.timeline, room);
	            var stateEvents = self._mapSyncEventsFormat(leaveObj.state, room);
	
	            // set the back-pagination token. Do this *before* adding any
	            // events so that clients can start back-paginating.
	            room.getLiveTimeline().setPaginationToken(leaveObj.timeline.prev_batch,
	                                                      EventTimeline.BACKWARDS);
	
	            self._processRoomEvents(room, stateEvents, timelineEvents);
	
	            room.recalculate(client.credentials.userId);
	            client.store.storeRoom(room);
	            client.emit("Room", room);
	        });
	        return rooms;
	    });
	};
	
	/**
	 * Peek into a room. This will result in the room in question being synced so it
	 * is accessible via getRooms(). Live updates for the room will be provided.
	 * @param {string} roomId The room ID to peek into.
	 * @return {Promise} A promise which resolves once the room has been added to the
	 * store.
	 */
	SyncApi.prototype.peek = function(roomId) {
	    var self = this;
	    var client = this.client;
	    this._peekRoomId = roomId;
	    return this.client.roomInitialSync(roomId, 20).then(function(response) {
	        // make sure things are init'd
	        response.messages = response.messages || {};
	        response.messages.chunk = response.messages.chunk || [];
	        response.state = response.state || [];
	
	        var peekRoom = self.createRoom(roomId);
	
	        // FIXME: Mostly duplicated from _processRoomEvents but not entirely
	        // because "state" in this API is at the BEGINNING of the chunk
	        var oldStateEvents = utils.map(
	            utils.deepCopy(response.state), client.getEventMapper()
	        );
	        var stateEvents = utils.map(
	            response.state, client.getEventMapper()
	        );
	        var messages = utils.map(
	            response.messages.chunk, client.getEventMapper()
	        );
	
	        // XXX: copypasted from /sync until we kill off this
	        // minging v1 API stuff)
	        // handle presence events (User objects)
	        if (response.presence && utils.isArray(response.presence)) {
	            response.presence.map(client.getEventMapper()).forEach(
	            function(presenceEvent) {
	                var user = client.store.getUser(presenceEvent.getContent().user_id);
	                if (user) {
	                    user.setPresenceEvent(presenceEvent);
	                }
	                else {
	                    user = createNewUser(client, presenceEvent.getContent().user_id);
	                    user.setPresenceEvent(presenceEvent);
	                    client.store.storeUser(user);
	                }
	                client.emit("event", presenceEvent);
	            });
	        }
	
	        // set the pagination token before adding the events in case people
	        // fire off pagination requests in response to the Room.timeline
	        // events.
	        if (response.messages.start) {
	            peekRoom.oldState.paginationToken = response.messages.start;
	        }
	
	        // set the state of the room to as it was after the timeline executes
	        peekRoom.oldState.setStateEvents(oldStateEvents);
	        peekRoom.currentState.setStateEvents(stateEvents);
	
	        self._resolveInvites(peekRoom);
	        peekRoom.recalculate(self.client.credentials.userId);
	
	        // roll backwards to diverge old state. addEventsToTimeline
	        // will overwrite the pagination token, so make sure it overwrites
	        // it with the right thing.
	        peekRoom.addEventsToTimeline(messages.reverse(), true,
	                                     peekRoom.getLiveTimeline(),
	                                     response.messages.start);
	
	        client.store.storeRoom(peekRoom);
	        client.emit("Room", peekRoom);
	
	        self._peekPoll(roomId);
	        return peekRoom;
	    });
	};
	
	/**
	 * Stop polling for updates in the peeked room. NOPs if there is no room being
	 * peeked.
	 */
	SyncApi.prototype.stopPeeking = function() {
	    this._peekRoomId = null;
	};
	
	/**
	 * Do a peek room poll.
	 * @param {string} roomId
	 * @param {string} token from= token
	 */
	SyncApi.prototype._peekPoll = function(roomId, token) {
	    if (this._peekRoomId !== roomId) {
	        debuglog("Stopped peeking in room %s", roomId);
	        return;
	    }
	
	    var self = this;
	    // FIXME: gut wrenching; hard-coded timeout values
	    this.client._http.authedRequest(undefined, "GET", "/events", {
	        room_id: roomId,
	        timeout: 30 * 1000,
	        from: token
	    }, undefined, 50 * 1000).done(function(res) {
	
	        // We have a problem that we get presence both from /events and /sync
	        // however, /sync only returns presence for users in rooms
	        // you're actually joined to.
	        // in order to be sure to get presence for all of the users in the
	        // peeked room, we handle presence explicitly here. This may result
	        // in duplicate presence events firing for some users, which is a
	        // performance drain, but such is life.
	        // XXX: copypasted from /sync until we can kill this minging v1 stuff.
	
	        res.chunk.filter(function(e) {
	            return e.type === "m.presence";
	        }).map(self.client.getEventMapper()).forEach(function(presenceEvent) {
	            var user = self.client.store.getUser(presenceEvent.getContent().user_id);
	            if (user) {
	                user.setPresenceEvent(presenceEvent);
	            }
	            else {
	                user = createNewUser(self.client, presenceEvent.getContent().user_id);
	                user.setPresenceEvent(presenceEvent);
	                self.client.store.storeUser(user);
	            }
	            self.client.emit("event", presenceEvent);
	        });
	
	        // strip out events which aren't for the given room_id (e.g presence)
	        var events = res.chunk.filter(function(e) {
	            return e.room_id === roomId;
	        }).map(self.client.getEventMapper());
	        var room = self.client.getRoom(roomId);
	        room.addLiveEvents(events);
	        self._peekPoll(roomId, res.end);
	    }, function(err) {
	        console.error("[%s] Peek poll failed: %s", roomId, err);
	        setTimeout(function() {
	            self._peekPoll(roomId, token);
	        }, 30 * 1000);
	    });
	};
	
	/**
	 * Returns the current state of this sync object
	 * @see module:client~MatrixClient#event:"sync"
	 * @return {?String}
	 */
	SyncApi.prototype.getSyncState = function() {
	    return this._syncState;
	};
	
	/**
	 * Main entry point
	 */
	SyncApi.prototype.sync = function() {
	    debuglog("SyncApi.sync: starting with sync token " +
	             this.client.store.getSyncToken());
	
	    var client = this.client;
	    var self = this;
	
	    this._running = true;
	
	    if (global.document) {
	        this._onOnlineBound = this._onOnline.bind(this);
	        global.document.addEventListener("online", this._onOnlineBound, false);
	    }
	
	    // We need to do one-off checks before we can begin the /sync loop.
	    // These are:
	    //   1) We need to get push rules so we can check if events should bing as we get
	    //      them from /sync.
	    //   2) We need to get/create a filter which we can use for /sync.
	
	    function getPushRules() {
	        client.getPushRules().done(function(result) {
	            debuglog("Got push rules");
	            client.pushRules = result;
	            getFilter(); // Now get the filter
	        }, function(err) {
	            self._startKeepAlives().done(function() {
	                getPushRules();
	            });
	            self._updateSyncState("ERROR", { error: err });
	        });
	    }
	
	    function getFilter() {
	        var filter = new Filter(client.credentials.userId);
	        filter.setTimelineLimit(self.opts.initialSyncLimit);
	
	        client.getOrCreateFilter(
	            getFilterName(client.credentials.userId), filter
	        ).done(function(filterId) {
	            // reset the notifications timeline to prepare it to paginate from
	            // the current point in time.
	            // The right solution would be to tie /sync pagination tokens into
	            // /notifications API somehow.
	            client.resetNotifTimelineSet();
	
	            self._sync({ filterId: filterId });
	        }, function(err) {
	            self._startKeepAlives().done(function() {
	                getFilter();
	            });
	            self._updateSyncState("ERROR", { error: err });
	        });
	    }
	
	    if (client.isGuest()) {
	        // no push rules for guests, no access to POST filter for guests.
	        self._sync({});
	    }
	    else {
	        getPushRules();
	    }
	};
	
	/**
	 * Stops the sync object from syncing.
	 */
	SyncApi.prototype.stop = function() {
	    debuglog("SyncApi.stop");
	    if (global.document) {
	        global.document.removeEventListener("online", this._onOnlineBound, false);
	        this._onOnlineBound = undefined;
	    }
	    this._running = false;
	    if (this._currentSyncRequest) { this._currentSyncRequest.abort(); }
	    if (this._keepAliveTimer) {
	        clearTimeout(this._keepAliveTimer);
	        this._keepAliveTimer = null;
	    }
	};
	
	/**
	 * Retry a backed off syncing request immediately. This should only be used when
	 * the user <b>explicitly</b> attempts to retry their lost connection.
	 * @return {boolean} True if this resulted in a request being retried.
	 */
	SyncApi.prototype.retryImmediately = function() {
	    if (!this._connectionReturnedDefer) { return false; }
	    this._startKeepAlives(0);
	    return true;
	};
	
	/**
	 * Invoke me to do /sync calls
	 * @param {Object} syncOptions
	 * @param {string} syncOptions.filterId
	 * @param {boolean} syncOptions.hasSyncedBefore
	 */
	SyncApi.prototype._sync = function(syncOptions) {
	    var client = this.client;
	    var self = this;
	
	    if (!this._running) {
	        debuglog("Sync no longer running: exiting.");
	        if (self._connectionReturnedDefer) {
	            self._connectionReturnedDefer.reject();
	            self._connectionReturnedDefer = null;
	        }
	        this._updateSyncState("STOPPED");
	        return;
	    }
	
	    var filterId = syncOptions.filterId;
	    if (client.isGuest() && !filterId) {
	        filterId = this._getGuestFilter();
	    }
	
	    var syncToken = client.store.getSyncToken();
	
	    var qps = {
	        filter: filterId,
	        timeout: this.opts.pollTimeout,
	    };
	
	    if (syncToken) {
	        qps.since = syncToken;
	    } else {
	        // use a cachebuster for initialsyncs, to make sure that
	        // we don't get a stale sync
	        // (https://github.com/vector-im/vector-web/issues/1354)
	        qps._cacheBuster = Date.now();
	    }
	
	    if (self._syncConnectionLost) {
	        // we think the connection is dead. If it comes back up, we won't know
	        // about it till /sync returns. If the timeout= is high, this could
	        // be a long time. Set it to 0 when doing retries so we don't have to wait
	        // for an event or a timeout before emiting the SYNCING event.
	        qps.timeout = 0;
	    }
	
	    // normal timeout= plus buffer time
	    var clientSideTimeoutMs = this.opts.pollTimeout + BUFFER_PERIOD_MS;
	
	    this._currentSyncRequest = client._http.authedRequest(
	        undefined, "GET", "/sync", qps, undefined, clientSideTimeoutMs
	    );
	
	    this._currentSyncRequest.done(function(data) {
	        self._syncConnectionLost = false;
	
	        // set the sync token NOW *before* processing the events. We do this so
	        // if something barfs on an event we can skip it rather than constantly
	        // polling with the same token.
	        client.store.setSyncToken(data.next_batch);
	
	        try {
	            self._processSyncResponse(syncToken, data);
	        }
	        catch (e) {
	            // log the exception with stack if we have it, else fall back
	            // to the plain description
	            console.error("Caught /sync error", e.stack || e);
	        }
	
	        // emit synced events
	        if (!syncOptions.hasSyncedBefore) {
	            self._updateSyncState("PREPARED");
	            syncOptions.hasSyncedBefore = true;
	        }
	
	        // keep emitting SYNCING -> SYNCING for clients who want to do bulk updates
	        self._updateSyncState("SYNCING");
	
	        self._sync(syncOptions);
	    }, function(err) {
	        if (!self._running) {
	            debuglog("Sync no longer running: exiting");
	            if (self._connectionReturnedDefer) {
	                self._connectionReturnedDefer.reject();
	                self._connectionReturnedDefer = null;
	            }
	            return;
	        }
	        console.error("/sync error %s", err);
	        console.error(err);
	
	        if (!self._syncConnectionLost) {
	            // This is the first failure, which may be spurious. To avoid unnecessary
	            // connection error warnings we simply retry the /sync immediately. Only
	            // if *that* one fails too do we say the connection has been lost.
	            // Examples of when this may happen are:
	            //   - Restarting backend servers. (In an HA world backends may be
	            //     restarted all the time, and its easiest just to make the
	            //     client retry).
	            //   - Intermediate proxies restarting.
	            //   - Device network changes.
	            // Should we emit a state like "MAYBE_CONNETION_LOST"?
	            self._syncConnectionLost = true;
	            self._sync(syncOptions);
	        } else {
	            debuglog("Starting keep-alive");
	            self._syncConnectionLost = true;
	            self._startKeepAlives().done(function() {
	                self._sync(syncOptions);
	            });
	            self._currentSyncRequest = null;
	            self._updateSyncState("ERROR", { error: err });
	        }
	    });
	};
	
	/**
	 * Process data returned from a sync response and propagate it
	 * into the model objects
	 *
	 * @param {string} syncToken the old next_batch token sent to this
	 *    sync request.
	 * @param {Object} data The response from /sync
	 */
	SyncApi.prototype._processSyncResponse = function(syncToken, data) {
	    var client = this.client;
	    var self = this;
	
	    // data looks like:
	    // {
	    //    next_batch: $token,
	    //    presence: { events: [] },
	    //    account_data: { events: [] },
	    //    to_device: { events: [] },
	    //    rooms: {
	    //      invite: {
	    //        $roomid: {
	    //          invite_state: { events: [] }
	    //        }
	    //      },
	    //      join: {
	    //        $roomid: {
	    //          state: { events: [] },
	    //          timeline: { events: [], prev_batch: $token, limited: true },
	    //          ephemeral: { events: [] },
	    //          account_data: { events: [] },
	    //          unread_notifications: {
	    //              highlight_count: 0,
	    //              notification_count: 0,
	    //          }
	    //        }
	    //      },
	    //      leave: {
	    //        $roomid: {
	    //          state: { events: [] },
	    //          timeline: { events: [], prev_batch: $token }
	    //        }
	    //      }
	    //    },
	    // }
	
	    // TODO-arch:
	    // - Each event we pass through needs to be emitted via 'event', can we
	    //   do this in one place?
	    // - The isBrandNewRoom boilerplate is boilerplatey.
	
	    // handle presence events (User objects)
	    if (data.presence && utils.isArray(data.presence.events)) {
	        data.presence.events.map(client.getEventMapper()).forEach(
	        function(presenceEvent) {
	            var user = client.store.getUser(presenceEvent.getSender());
	            if (user) {
	                user.setPresenceEvent(presenceEvent);
	            }
	            else {
	                user = createNewUser(client, presenceEvent.getSender());
	                user.setPresenceEvent(presenceEvent);
	                client.store.storeUser(user);
	            }
	            client.emit("event", presenceEvent);
	        });
	    }
	
	    // handle non-room account_data
	    if (data.account_data && utils.isArray(data.account_data.events)) {
	        var events = data.account_data.events.map(client.getEventMapper());
	        client.store.storeAccountDataEvents(events);
	        events.forEach(
	            function(accountDataEvent) {
	                if (accountDataEvent.getType() == 'm.push_rules') {
	                    client.pushRules = accountDataEvent.getContent();
	                }
	                client.emit("accountData", accountDataEvent);
	                return accountDataEvent;
	            }
	        );
	    }
	
	    // handle to-device events
	    if (data.to_device && utils.isArray(data.to_device.events)) {
	        data.to_device.events
	            .map(client.getEventMapper())
	            .forEach(
	                function(toDeviceEvent) {
	                    var content = toDeviceEvent.getContent();
	                    if (
	                        toDeviceEvent.getType() == "m.room.message" &&
	                            content.msgtype == "m.bad.encrypted"
	                    ) {
	                        console.warn(
	                            "Unable to decrypt to-device event: " + content.body
	                        );
	                        return;
	                    }
	
	                    client.emit("toDeviceEvent", toDeviceEvent);
	                }
	            );
	    }
	
	    // the returned json structure is a bit crap, so make it into a
	    // nicer form (array) after applying sanity to make sure we don't fail
	    // on missing keys (on the off chance)
	    var inviteRooms = [];
	    var joinRooms = [];
	    var leaveRooms = [];
	
	    if (data.rooms) {
	        if (data.rooms.invite) {
	            inviteRooms = this._mapSyncResponseToRoomArray(data.rooms.invite);
	        }
	        if (data.rooms.join) {
	            joinRooms = this._mapSyncResponseToRoomArray(data.rooms.join);
	        }
	        if (data.rooms.leave) {
	            leaveRooms = this._mapSyncResponseToRoomArray(data.rooms.leave);
	        }
	    }
	
	    this._notifEvents = [];
	
	    // Handle invites
	    inviteRooms.forEach(function(inviteObj) {
	        var room = inviteObj.room;
	        var stateEvents =
	            self._mapSyncEventsFormat(inviteObj.invite_state, room);
	        self._processRoomEvents(room, stateEvents);
	        if (inviteObj.isBrandNewRoom) {
	            room.recalculate(client.credentials.userId);
	            client.store.storeRoom(room);
	            client.emit("Room", room);
	        }
	        stateEvents.forEach(function(e) { client.emit("event", e); });
	    });
	
	    // Handle joins
	    joinRooms.forEach(function(joinObj) {
	        var room = joinObj.room;
	        var stateEvents = self._mapSyncEventsFormat(joinObj.state, room);
	        var timelineEvents = self._mapSyncEventsFormat(joinObj.timeline, room);
	        var ephemeralEvents = self._mapSyncEventsFormat(joinObj.ephemeral);
	        var accountDataEvents = self._mapSyncEventsFormat(joinObj.account_data);
	
	        // we do this first so it's correct when any of the events fire
	        if (joinObj.unread_notifications) {
	            room.setUnreadNotificationCount(
	                'total', joinObj.unread_notifications.notification_count
	            );
	            room.setUnreadNotificationCount(
	                'highlight', joinObj.unread_notifications.highlight_count
	            );
	        }
	
	        joinObj.timeline = joinObj.timeline || {};
	
	        if (joinObj.isBrandNewRoom) {
	            // set the back-pagination token. Do this *before* adding any
	            // events so that clients can start back-paginating.
	            room.getLiveTimeline().setPaginationToken(
	                joinObj.timeline.prev_batch, EventTimeline.BACKWARDS);
	        }
	        else if (joinObj.timeline.limited) {
	            var limited = true;
	
	            // we've got a limited sync, so we *probably* have a gap in the
	            // timeline, so should reset. But we might have been peeking or
	            // paginating and already have some of the events, in which
	            // case we just want to append any subsequent events to the end
	            // of the existing timeline.
	            //
	            // This is particularly important in the case that we already have
	            // *all* of the events in the timeline - in that case, if we reset
	            // the timeline, we'll end up with an entirely empty timeline,
	            // which we'll try to paginate but not get any new events (which
	            // will stop us linking the empty timeline into the chain).
	            //
	            for (var i = timelineEvents.length - 1; i >= 0; i--) {
	                var eventId = timelineEvents[i].getId();
	                if (room.getTimelineForEvent(eventId)) {
	                    debuglog("Already have event " + eventId + " in limited " +
	                             "sync - not resetting");
	                    limited = false;
	
	                    // we might still be missing some of the events before i;
	                    // we don't want to be adding them to the end of the
	                    // timeline because that would put them out of order.
	                    timelineEvents.splice(0, i);
	
	                    // XXX: there's a problem here if the skipped part of the
	                    // timeline modifies the state set in stateEvents, because
	                    // we'll end up using the state from stateEvents rather
	                    // than the later state from timelineEvents. We probably
	                    // need to wind stateEvents forward over the events we're
	                    // skipping.
	
	                    break;
	                }
	            }
	
	            if (limited) {
	                // save the old 'next_batch' token as the
	                // forward-pagination token for the previously-active
	                // timeline.
	                room.currentState.paginationToken = syncToken;
	                self._deregisterStateListeners(room);
	                room.resetLiveTimeline(joinObj.timeline.prev_batch);
	
	                // We have to assume any gap in any timeline is
	                // reason to stop incrementally tracking notifications and
	                // reset the timeline.
	                client.resetNotifTimelineSet();
	
	                self._registerStateListeners(room);
	            }
	        }
	
	        self._processRoomEvents(room, stateEvents, timelineEvents);
	
	        // XXX: should we be adding ephemeralEvents to the timeline?
	        // It feels like that for symmetry with room.addAccountData()
	        // there should be a room.addEphemeralEvents() or similar.
	        room.addLiveEvents(ephemeralEvents);
	
	        // we deliberately don't add accountData to the timeline
	        room.addAccountData(accountDataEvents);
	
	        room.recalculate(client.credentials.userId);
	        if (joinObj.isBrandNewRoom) {
	            client.store.storeRoom(room);
	            client.emit("Room", room);
	        }
	        stateEvents.forEach(function(e) { client.emit("event", e); });
	        timelineEvents.forEach(function(e) { client.emit("event", e); });
	        ephemeralEvents.forEach(function(e) { client.emit("event", e); });
	        accountDataEvents.forEach(function(e) { client.emit("event", e); });
	    });
	
	    // Handle leaves (e.g. kicked rooms)
	    leaveRooms.forEach(function(leaveObj) {
	        var room = leaveObj.room;
	        var stateEvents =
	            self._mapSyncEventsFormat(leaveObj.state, room);
	        var timelineEvents =
	            self._mapSyncEventsFormat(leaveObj.timeline, room);
	        var accountDataEvents =
	            self._mapSyncEventsFormat(leaveObj.account_data);
	
	        self._processRoomEvents(room, stateEvents, timelineEvents);
	        room.addAccountData(accountDataEvents);
	
	        room.recalculate(client.credentials.userId);
	        if (leaveObj.isBrandNewRoom) {
	            client.store.storeRoom(room);
	            client.emit("Room", room);
	        }
	
	        stateEvents.forEach(function(e) { client.emit("event", e); });
	        timelineEvents.forEach(function(e) { client.emit("event", e); });
	        accountDataEvents.forEach(function(e) { client.emit("event", e); });
	    });
	
	    // update the notification timeline, if appropriate.
	    // we only do this for live events, as otherwise we can't order them sanely
	    // in the timeline relative to ones paginated in by /notifications.
	    // XXX: we could fix this by making EventTimeline support chronological
	    // ordering... but it doesn't, right now.
	    if (syncToken && this._notifEvents.length) {
	        this._notifEvents.sort(function(a, b) {
	            return a.getTs() - b.getTs();
	        });
	        this._notifEvents.forEach(function(event) {
	            client.getNotifTimelineSet().addLiveEvent(event);
	        });
	    }
	};
	
	/**
	 * Starts polling the connectivity check endpoint
	 * @param {number} delay How long to delay until the first poll.
	 *        defaults to a short, randomised interval (to prevent
	 *        tightlooping if /versions succeeds but /sync etc. fail).
	 * @return {promise}
	 */
	SyncApi.prototype._startKeepAlives = function(delay) {
	    if (delay === undefined) {
	        delay = 5000 + Math.floor(Math.random() * 5000);
	    }
	
	    if (this._keepAliveTimer !== null) {
	        clearTimeout(this._keepAliveTimer);
	    }
	    var self = this;
	    self._keepAliveTimer = setTimeout(
	        self._pokeKeepAlive.bind(self),
	        delay
	    );
	    if (!this._connectionReturnedDefer) {
	        this._connectionReturnedDefer = q.defer();
	    }
	    return this._connectionReturnedDefer.promise;
	};
	
	/**
	 *
	 */
	SyncApi.prototype._pokeKeepAlive = function() {
	    var self = this;
	    function success() {
	        clearTimeout(self._keepAliveTimer);
	        if (self._connectionReturnedDefer) {
	            self._connectionReturnedDefer.resolve();
	            self._connectionReturnedDefer = null;
	        }
	    }
	
	    this.client._http.requestWithPrefix(
	        undefined, "GET", "/_matrix/client/versions", undefined,
	        undefined, "", 15 * 1000
	    ).done(function() {
	        success();
	    }, function(err) {
	        if (err.httpStatus == 400) {
	            // treat this as a success because the server probably just doesn't
	            // support /versions: point is, we're getting a response.
	            // We wait a short time though, just in case somehow the server
	            // is in a mode where it 400s /versions responses and sync etc.
	            // responses fail, this will mean we don't hammer in a loop.
	            self._keepAliveTimer = setTimeout(success, 2000);
	        } else {
	            self._keepAliveTimer = setTimeout(
	                self._pokeKeepAlive.bind(self),
	                5000 + Math.floor(Math.random() * 5000)
	            );
	        }
	    });
	};
	
	/**
	 * @param {Object} obj
	 * @return {Object[]}
	 */
	SyncApi.prototype._mapSyncResponseToRoomArray = function(obj) {
	    // Maps { roomid: {stuff}, roomid: {stuff} }
	    // to
	    // [{stuff+Room+isBrandNewRoom}, {stuff+Room+isBrandNewRoom}]
	    var client = this.client;
	    var self = this;
	    return utils.keys(obj).map(function(roomId) {
	        var arrObj = obj[roomId];
	        var room = client.store.getRoom(roomId);
	        var isBrandNewRoom = false;
	        if (!room) {
	            room = self.createRoom(roomId);
	            isBrandNewRoom = true;
	        }
	        arrObj.room = room;
	        arrObj.isBrandNewRoom = isBrandNewRoom;
	        return arrObj;
	    });
	};
	
	/**
	 * @param {Object} obj
	 * @param {Room} room
	 * @return {MatrixEvent[]}
	 */
	SyncApi.prototype._mapSyncEventsFormat = function(obj, room) {
	    if (!obj || !utils.isArray(obj.events)) {
	        return [];
	    }
	    var mapper = this.client.getEventMapper();
	    return obj.events.map(function(e) {
	        if (room) {
	            e.room_id = room.roomId;
	        }
	        return mapper(e);
	    });
	};
	
	/**
	 * @param {Room} room
	 */
	SyncApi.prototype._resolveInvites = function(room) {
	    if (!room || !this.opts.resolveInvitesToProfiles) {
	        return;
	    }
	    var client = this.client;
	    // For each invited room member we want to give them a displayname/avatar url
	    // if they have one (the m.room.member invites don't contain this).
	    room.getMembersWithMembership("invite").forEach(function(member) {
	        if (member._requestedProfileInfo) {
	            return;
	        }
	        member._requestedProfileInfo = true;
	        // try to get a cached copy first.
	        var user = client.getUser(member.userId);
	        var promise;
	        if (user) {
	            promise = q({
	                avatar_url: user.avatarUrl,
	                displayname: user.displayName
	            });
	        }
	        else {
	            promise = client.getProfileInfo(member.userId);
	        }
	        promise.done(function(info) {
	            // slightly naughty by doctoring the invite event but this means all
	            // the code paths remain the same between invite/join display name stuff
	            // which is a worthy trade-off for some minor pollution.
	            var inviteEvent = member.events.member;
	            if (inviteEvent.getContent().membership !== "invite") {
	                // between resolving and now they have since joined, so don't clobber
	                return;
	            }
	            inviteEvent.getContent().avatar_url = info.avatar_url;
	            inviteEvent.getContent().displayname = info.displayname;
	            // fire listeners
	            member.setMembershipEvent(inviteEvent, room.currentState);
	        }, function(err) {
	            // OH WELL.
	        });
	    });
	};
	
	/**
	 * @param {Room} room
	 * @param {MatrixEvent[]} stateEventList A list of state events. This is the state
	 * at the *START* of the timeline list if it is supplied.
	 * @param {?MatrixEvent[]} timelineEventList A list of timeline events. Lower index
	 * is earlier in time. Higher index is later.
	 */
	SyncApi.prototype._processRoomEvents = function(room, stateEventList,
	                                                timelineEventList) {
	    timelineEventList = timelineEventList || [];
	    var client = this.client;
	    // "old" and "current" state are the same initially; they
	    // start diverging if the user paginates.
	    // We must deep copy otherwise membership changes in old state
	    // will leak through to current state!
	    var oldStateEvents = utils.map(
	        utils.deepCopy(
	            stateEventList.map(function(mxEvent) { return mxEvent.event; })
	        ), client.getEventMapper()
	    );
	    var stateEvents = stateEventList;
	
	    // set the state of the room to as it was before the timeline executes
	    //
	    // XXX: what if we've already seen (some of) the events in the timeline,
	    // and they modify some of the state set in stateEvents? In that case we'll
	    // end up with the state from stateEvents, instead of the more recent state
	    // from the timeline.
	    room.oldState.setStateEvents(oldStateEvents);
	    room.currentState.setStateEvents(stateEvents);
	
	    this._resolveInvites(room);
	
	    // recalculate the room name at this point as adding events to the timeline
	    // may make notifications appear which should have the right name.
	    room.recalculate(this.client.credentials.userId);
	
	    // gather our notifications into this._notifEvents
	    if (client.getNotifTimelineSet()) {
	        for (var i = 0; i < timelineEventList.length; i++) {
	            var pushActions = client.getPushActionsForEvent(timelineEventList[i]);
	            if (pushActions && pushActions.notify &&
	                pushActions.tweaks && pushActions.tweaks.highlight)
	            {
	                this._notifEvents.push(timelineEventList[i]);
	            }
	        }
	    }
	
	    // execute the timeline events, this will begin to diverge the current state
	    // if the timeline has any state events in it.
	    room.addLiveEvents(timelineEventList);
	};
	
	/**
	 * @return {string}
	 */
	SyncApi.prototype._getGuestFilter = function() {
	    var guestRooms = this.client._guestRooms; // FIXME: horrible gut-wrenching
	    if (!guestRooms) {
	        return "{}";
	    }
	    // we just need to specify the filter inline if we're a guest because guests
	    // can't create filters.
	    return JSON.stringify({
	        room: {
	            timeline: {
	                limit: 20
	            }
	        }
	    });
	};
	
	/**
	 * Sets the sync state and emits an event to say so
	 * @param {String} newState The new state string
	 * @param {Object} data Object of additional data to emit in the event
	 */
	SyncApi.prototype._updateSyncState = function(newState, data) {
	    var old = this._syncState;
	    this._syncState = newState;
	    this.client.emit("sync", this._syncState, old, data);
	};
	
	/**
	 * Event handler for the 'online' event
	 * This event is generally unreliable and precise behaviour
	 * varies between browsers, so we poll for connectivity too,
	 * but this might help us reconnect a little faster.
	 */
	SyncApi.prototype._onOnline = function() {
	    debuglog("Browser thinks we are back online");
	    this._startKeepAlives(0);
	};
	
	function createNewUser(client, userId) {
	    var user = new User(userId);
	    reEmit(client, user, [
	        "User.avatarUrl", "User.displayName", "User.presence",
	        "User.currentlyActive", "User.lastPresenceTs"
	    ]);
	    return user;
	}
	
	function reEmit(reEmitEntity, emittableEntity, eventNames) {
	    utils.forEach(eventNames, function(eventName) {
	        // setup a listener on the entity (the Room, User, etc) for this event
	        emittableEntity.on(eventName, function() {
	            // take the args from the listener and reuse them, adding the
	            // event name to the arg list so it works with .emit()
	            // Transformation Example:
	            // listener on "foo" => function(a,b) { ... }
	            // Re-emit on "thing" => thing.emit("foo", a, b)
	            var newArgs = [eventName];
	            for (var i = 0; i < arguments.length; i++) {
	                newArgs.push(arguments[i]);
	            }
	            reEmitEntity.emit.apply(reEmitEntity, newArgs);
	        });
	    });
	}
	
	/** */
	module.exports = SyncApi;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * This is an internal module. MatrixBaseApis is currently only meant to be used
	 * by {@link client~MatrixClient}.
	 *
	 * @module base-apis
	 */
	
	var httpApi = __webpack_require__(196);
	var utils = __webpack_require__(185);
	
	/**
	 * Low-level wrappers for the Matrix APIs
	 *
	 * @constructor
	 *
	 * @param {Object} opts Configuration options
	 *
	 * @param {string} opts.baseUrl Required. The base URL to the client-server
	 * HTTP API.
	 *
	 * @param {string} opts.idBaseUrl Optional. The base identity server URL for
	 * identity server requests.
	 *
	 * @param {Function} opts.request Required. The function to invoke for HTTP
	 * requests. The value of this property is typically <code>require("request")
	 * </code> as it returns a function which meets the required interface. See
	 * {@link requestFunction} for more information.
	 *
	 * @param {string} opts.accessToken The access_token for this user.
	 *
	 * @param {Object} opts.queryParams Optional. Extra query parameters to append
	 * to all requests with this client. Useful for application services which require
	 * <code>?user_id=</code>.
	 *
	 */
	function MatrixBaseApis(opts) {
	    utils.checkObjectHasKeys(opts, ["baseUrl", "request"]);
	
	    this.baseUrl = opts.baseUrl;
	    this.idBaseUrl = opts.idBaseUrl;
	
	    var httpOpts = {
	        baseUrl: opts.baseUrl,
	        idBaseUrl: opts.idBaseUrl,
	        accessToken: opts.accessToken,
	        request: opts.request,
	        prefix: httpApi.PREFIX_R0,
	        onlyData: true,
	        extraParams: opts.queryParams
	    };
	    this._http = new httpApi.MatrixHttpApi(this, httpOpts);
	
	    this._txnCtr = 0;
	}
	
	/**
	 * Get the Homeserver URL of this client
	 * @return {string} Homeserver URL of this client
	 */
	MatrixBaseApis.prototype.getHomeserverUrl = function() {
	    return this.baseUrl;
	};
	
	/**
	 * Get the Identity Server URL of this client
	 * @return {string} Identity Server URL of this client
	 */
	MatrixBaseApis.prototype.getIdentityServerUrl = function() {
	    return this.idBaseUrl;
	};
	
	/**
	 * Get the access token associated with this account.
	 * @return {?String} The access_token or null
	 */
	MatrixBaseApis.prototype.getAccessToken = function() {
	    return this._http.opts.accessToken || null;
	};
	
	/**
	 * @return {boolean} true if there is a valid access_token for this client.
	 */
	MatrixBaseApis.prototype.isLoggedIn = function() {
	    return this._http.opts.accessToken !== undefined;
	};
	
	/**
	 * Make up a new transaction id
	 *
	 * @return {string} a new, unique, transaction id
	 */
	MatrixBaseApis.prototype.makeTxnId = function() {
	    return "m" + new Date().getTime() + "." + (this._txnCtr++);
	};
	
	
	// Registration/Login operations
	// =============================
	
	/**
	 * @param {string} username
	 * @param {string} password
	 * @param {string} sessionId
	 * @param {Object} auth
	 * @param {boolean} bindEmail
	 * @param {string} guestAccessToken
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.register = function(
	    username, password,
	    sessionId, auth, bindEmail, guestAccessToken,
	    callback
	) {
	    if (auth === undefined) { auth = {}; }
	    if (sessionId) { auth.session = sessionId; }
	
	    var params = {
	        auth: auth
	    };
	    if (username !== undefined) { params.username = username; }
	    if (password !== undefined) { params.password = password; }
	    if (bindEmail !== undefined) { params.bind_email = bindEmail; }
	    if (guestAccessToken !== undefined) { params.guest_access_token = guestAccessToken; }
	
	    return this.registerRequest(params, undefined, callback);
	};
	
	/**
	 * Register a guest account.
	 * @param {Object=} opts Registration options
	 * @param {Object} opts.body JSON HTTP body to provide.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.registerGuest = function(opts, callback) {
	    opts = opts || {};
	    opts.body = opts.body || {};
	    return this.registerRequest(opts.body, "guest", callback);
	};
	
	/**
	 * @param {Object} data   parameters for registration request
	 * @param {string=} kind  type of user to register. may be "guest"
	 * @param {module:client.callback=} callback
	 * @return {module:client.Promise} Resolves: to the /register response
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.registerRequest = function(data, kind, callback) {
	    var params = {};
	    if (kind) { params.kind = kind; }
	
	    return this._http.request(
	        callback, "POST", "/register", params, data
	    );
	};
	
	/**
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.loginFlows = function(callback) {
	    return this._http.request(callback, "GET", "/login");
	};
	
	/**
	 * @param {string} loginType
	 * @param {Object} data
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.login = function(loginType, data, callback) {
	    var login_data = {
	        type: loginType,
	    };
	
	    // merge data into login_data
	    utils.extend(login_data, data);
	
	    return this._http.authedRequest(
	        callback, "POST", "/login", undefined, login_data
	    );
	};
	
	/**
	 * @param {string} user
	 * @param {string} password
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.loginWithPassword = function(user, password, callback) {
	    return this.login("m.login.password", {
	        user: user,
	        password: password
	    }, callback);
	};
	
	/**
	 * @param {string} relayState URL Callback after SAML2 Authentication
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.loginWithSAML2 = function(relayState, callback) {
	    return this.login("m.login.saml2", {
	        relay_state: relayState
	    }, callback);
	};
	
	/**
	 * @param {string} redirectUrl The URL to redirect to after the HS
	 * authenticates with CAS.
	 * @return {string} The HS URL to hit to begin the CAS login process.
	 */
	MatrixBaseApis.prototype.getCasLoginUrl = function(redirectUrl) {
	    return this._http.getUrl("/login/cas/redirect", {
	        "redirectUrl": redirectUrl
	    }, httpApi.PREFIX_UNSTABLE);
	};
	
	/**
	 * @param {string} token Login token previously received from homeserver
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.loginWithToken = function(token, callback) {
	    return this.login("m.login.token", {
	        token: token
	    }, callback);
	};
	
	
	/**
	 * Logs out the current session.
	 * Obviously, further calls that require authorisation should fail after this
	 * method is called. The state of the MatrixClient object is not affected:
	 * it is up to the caller to either reset or destroy the MatrixClient after
	 * this method succeeds.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: On success, the empty object
	 */
	MatrixBaseApis.prototype.logout = function(callback) {
	    return this._http.authedRequest(
	        callback, "POST", '/logout'
	    );
	};
	
	/**
	 * Deactivates the logged-in account.
	 * Obviously, further calls that require authorisation should fail after this
	 * method is called. The state of the MatrixClient object is not affected:
	 * it is up to the caller to either reset or destroy the MatrixClient after
	 * this method succeeds.
	 * @param {object} auth Optional. Auth data to supply for User-Interactive auth.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: On success, the empty object
	 */
	MatrixBaseApis.prototype.deactivateAccount = function(auth, callback) {
	    var body = {};
	    if (auth) {
	        body = {
	            auth: auth,
	        };
	    }
	    return this._http.authedRequestWithPrefix(
	        callback, "POST", '/account/deactivate', undefined, body, httpApi.PREFIX_UNSTABLE
	    );
	};
	
	
	// Room operations
	// ===============
	
	/**
	 * Create a new room.
	 * @param {Object} options a list of options to pass to the /createRoom API.
	 * @param {string} options.room_alias_name The alias localpart to assign to
	 * this room.
	 * @param {string} options.visibility Either 'public' or 'private'.
	 * @param {string[]} options.invite A list of user IDs to invite to this room.
	 * @param {string} options.name The name to give this room.
	 * @param {string} options.topic The topic to give this room.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: <code>{room_id: {string},
	 * room_alias: {string(opt)}}</code>
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.createRoom = function(options, callback) {
	    // valid options include: room_alias_name, visibility, invite
	    return this._http.authedRequest(
	        callback, "POST", "/createRoom", undefined, options
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.roomState = function(roomId, callback) {
	    var path = utils.encodeUri("/rooms/$roomId/state", {$roomId: roomId});
	    return this._http.authedRequest(callback, "GET", path);
	};
	
	/**
	 * Retrieve a state event.
	 * @param {string} roomId
	 * @param {string} eventType
	 * @param {string} stateKey
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getStateEvent = function(roomId, eventType, stateKey, callback) {
	    var pathParams = {
	        $roomId: roomId,
	        $eventType: eventType,
	        $stateKey: stateKey
	    };
	    var path = utils.encodeUri("/rooms/$roomId/state/$eventType", pathParams);
	    if (stateKey !== undefined) {
	        path = utils.encodeUri(path + "/$stateKey", pathParams);
	    }
	    return this._http.authedRequest(
	        callback, "GET", path
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} eventType
	 * @param {Object} content
	 * @param {string} stateKey
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.sendStateEvent = function(roomId, eventType, content, stateKey,
	                                                 callback) {
	    var pathParams = {
	        $roomId: roomId,
	        $eventType: eventType,
	        $stateKey: stateKey
	    };
	    var path = utils.encodeUri("/rooms/$roomId/state/$eventType", pathParams);
	    if (stateKey !== undefined) {
	        path = utils.encodeUri(path + "/$stateKey", pathParams);
	    }
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, content
	    );
	};
	
	/**
	 * @param {string} roomId
	 * @param {string} eventId
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.redactEvent = function(roomId, eventId, callback) {
	    var path = utils.encodeUri("/rooms/$roomId/redact/$eventId", {
	        $roomId: roomId,
	        $eventId: eventId
	    });
	    return this._http.authedRequest(callback, "POST", path, undefined, {});
	};
	
	/**
	 * @param {string} roomId
	 * @param {Number} limit
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.roomInitialSync = function(roomId, limit, callback) {
	    if (utils.isFunction(limit)) { callback = limit; limit = undefined; }
	    var path = utils.encodeUri("/rooms/$roomId/initialSync",
	        {$roomId: roomId}
	    );
	    if (!limit) {
	        limit = 30;
	    }
	    return this._http.authedRequest(
	        callback, "GET", path, { limit: limit }
	    );
	};
	
	
	// Room Directory operations
	// =========================
	
	/**
	 * @param {string} options.server The remote server to query for the room list.
	 *                                Optional. If unspecified, get the local home
	 *                                server's public room list.
	 * @param {number} options.limit Maximum number of entries to return
	 * @param {string} options.since Token to paginate from
	 * @param {object} options.filter Filter parameters
	 * @param {string} options.filter.generic_search_term String to search for
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.publicRooms = function(options, callback) {
	    if (typeof(options) == 'function') {
	        callback = options;
	        options = {};
	    }
	    if (options === undefined) {
	        options = {};
	    }
	
	    var query_params = {};
	    if (options.server) {
	        query_params.server = options.server;
	        delete options.server;
	    }
	
	    if (Object.keys(options).length === 0 && Object.keys(query_params).length === 0) {
	        return this._http.authedRequest(callback, "GET", "/publicRooms");
	    } else {
	        return this._http.authedRequest(
	            callback, "POST", "/publicRooms", query_params, options
	        );
	    }
	};
	
	/**
	 * Create an alias to room ID mapping.
	 * @param {string} alias The room alias to create.
	 * @param {string} roomId The room ID to link the alias to.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.createAlias = function(alias, roomId, callback) {
	    var path = utils.encodeUri("/directory/room/$alias", {
	        $alias: alias
	    });
	    var data = {
	        room_id: roomId
	    };
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, data
	    );
	};
	
	/**
	 * Delete an alias to room ID mapping.  This alias must be on your local server
	 * and you must have sufficient access to do this operation.
	 * @param {string} alias The room alias to delete.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.deleteAlias = function(alias, callback) {
	    var path = utils.encodeUri("/directory/room/$alias", {
	        $alias: alias
	    });
	    return this._http.authedRequest(
	        callback, "DELETE", path, undefined, undefined
	    );
	};
	
	/**
	 * Get room info for the given alias.
	 * @param {string} alias The room alias to resolve.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: Object with room_id and servers.
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getRoomIdForAlias = function(alias, callback) {
	    // TODO: deprecate this or resolveRoomAlias
	    var path = utils.encodeUri("/directory/room/$alias", {
	        $alias: alias
	    });
	    return this._http.authedRequest(
	        callback, "GET", path
	    );
	};
	
	/**
	 * @param {string} roomAlias
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.resolveRoomAlias = function(roomAlias, callback) {
	    // TODO: deprecate this or getRoomIdForAlias
	    var path = utils.encodeUri("/directory/room/$alias", {$alias: roomAlias});
	    return this._http.request(callback, "GET", path);
	};
	
	/**
	 * Get the visibility of a room in the current HS's room directory
	 * @param {string} roomId
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getRoomDirectoryVisibility =
	                                function(roomId, callback) {
	    var path = utils.encodeUri("/directory/list/room/$roomId", {
	        $roomId: roomId
	    });
	    return this._http.authedRequest(callback, "GET", path);
	};
	
	/**
	 * Set the visbility of a room in the current HS's room directory
	 * @param {string} roomId
	 * @param {string} visibility "public" to make the room visible
	 *                 in the public directory, or "private" to make
	 *                 it invisible.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.setRoomDirectoryVisibility =
	                                function(roomId, visibility, callback) {
	    var path = utils.encodeUri("/directory/list/room/$roomId", {
	        $roomId: roomId
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, { "visibility": visibility }
	    );
	};
	
	
	// Media operations
	// ================
	
	/**
	 * Upload a file to the media repository on the home server.
	 * @param {File} file object
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.uploadContent = function(file, callback) {
	    return this._http.uploadContent(file, callback);
	};
	
	/**
	 * Cancel a file upload in progress
	 * @param {module:client.Promise} promise The promise returned from uploadContent
	 * @return {boolean} true if canceled, otherwise false
	 */
	MatrixBaseApis.prototype.cancelUpload = function(promise) {
	    return this._http.cancelUpload(promise);
	};
	
	/**
	 * Get a list of all file uploads in progress
	 * @return {array} Array of objects representing current uploads.
	 * Currently in progress is element 0. Keys:
	 *  - promise: The promise associated with the upload
	 *  - loaded: Number of bytes uploaded
	 *  - total: Total number of bytes to upload
	 */
	MatrixBaseApis.prototype.getCurrentUploads = function() {
	    return this._http.getCurrentUploads();
	};
	
	
	// Profile operations
	// ==================
	
	/**
	 * @param {string} userId
	 * @param {string} info The kind of info to retrieve (e.g. 'displayname',
	 * 'avatar_url').
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getProfileInfo = function(userId, info, callback) {
	    if (utils.isFunction(info)) { callback = info; info = undefined; }
	
	    var path = info ?
	    utils.encodeUri("/profile/$userId/$info",
	             { $userId: userId, $info: info }) :
	    utils.encodeUri("/profile/$userId",
	             { $userId: userId });
	    return this._http.authedRequest(callback, "GET", path);
	};
	
	
	// Account operations
	// ==================
	
	/**
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getThreePids = function(callback) {
	    var path = "/account/3pid";
	    return this._http.authedRequest(
	        callback, "GET", path, undefined, undefined
	    );
	};
	
	/**
	 * @param {Object} creds
	 * @param {boolean} bind
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.addThreePid = function(creds, bind, callback) {
	    var path = "/account/3pid";
	    var data = {
	        'threePidCreds': creds,
	        'bind': bind
	    };
	    return this._http.authedRequest(
	        callback, "POST", path, null, data
	    );
	};
	
	/**
	 * Make a request to change your password.
	 * @param {Object} authDict
	 * @param {string} newPassword The new desired password.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.setPassword = function(authDict, newPassword, callback) {
	    var path = "/account/password";
	    var data = {
	        'auth': authDict,
	        'new_password': newPassword
	    };
	
	    return this._http.authedRequest(
	        callback, "POST", path, null, data
	    );
	};
	
	
	// Device operations
	// =================
	
	/**
	 * Gets all devices recorded for the logged-in user
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getDevices = function() {
	    var path = "/devices";
	    return this._http.authedRequestWithPrefix(
	        undefined, "GET", path, undefined, undefined,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	/**
	 * Update the given device
	 *
	 * @param {string} device_id  device to update
	 * @param {Object} body       body of request
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.setDeviceDetails = function(device_id, body) {
	    var path = utils.encodeUri("/devices/$device_id", {
	        $device_id: device_id,
	    });
	
	
	    return this._http.authedRequestWithPrefix(
	        undefined, "PUT", path, undefined, body,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	/**
	 * Delete the given device
	 *
	 * @param {string} device_id  device to delete
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.deleteDevice = function(device_id) {
	    var path = utils.encodeUri("/devices/$device_id", {
	        $device_id: device_id,
	    });
	
	    return this._http.authedRequestWithPrefix(
	        undefined, "DELETE", path, undefined, undefined,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	
	// Push operations
	// ===============
	
	/**
	 * Gets all pushers registered for the logged-in user
	 *
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: Array of objects representing pushers
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getPushers = function(callback) {
	    var path = "/pushers";
	    return this._http.authedRequest(
	        callback, "GET", path, undefined, undefined
	    );
	};
	
	/**
	 * Adds a new pusher or updates an existing pusher
	 *
	 * @param {Object} pusher Object representing a pusher
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: Empty json object on success
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.setPusher = function(pusher, callback) {
	    var path = "/pushers/set";
	    return this._http.authedRequest(
	        callback, "POST", path, null, pusher
	    );
	};
	
	/**
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.getPushRules = function(callback) {
	    return this._http.authedRequest(callback, "GET", "/pushrules/");
	};
	
	/**
	 * @param {string} scope
	 * @param {string} kind
	 * @param {string} ruleId
	 * @param {Object} body
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.addPushRule = function(scope, kind, ruleId, body, callback) {
	    // NB. Scope not uri encoded because devices need the '/'
	    var path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId", {
	        $kind: kind,
	        $ruleId: ruleId
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, body
	    );
	};
	
	/**
	 * @param {string} scope
	 * @param {string} kind
	 * @param {string} ruleId
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.deletePushRule = function(scope, kind, ruleId, callback) {
	    // NB. Scope not uri encoded because devices need the '/'
	    var path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId", {
	        $kind: kind,
	        $ruleId: ruleId
	    });
	    return this._http.authedRequest(callback, "DELETE", path);
	};
	
	/**
	 * Enable or disable a push notification rule.
	 * @param {string} scope
	 * @param {string} kind
	 * @param {string} ruleId
	 * @param {boolean} enabled
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.setPushRuleEnabled = function(scope, kind,
	                                                     ruleId, enabled, callback) {
	    var path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId/enabled", {
	        $kind: kind,
	        $ruleId: ruleId
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, {"enabled": enabled}
	    );
	};
	
	/**
	 * Set the actions for a push notification rule.
	 * @param {string} scope
	 * @param {string} kind
	 * @param {string} ruleId
	 * @param {array} actions
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: result object
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.setPushRuleActions = function(scope, kind,
	                                                     ruleId, actions, callback) {
	    var path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId/actions", {
	        $kind: kind,
	        $ruleId: ruleId
	    });
	    return this._http.authedRequest(
	        callback, "PUT", path, undefined, {"actions": actions}
	    );
	};
	
	
	// Search
	// ======
	
	/**
	 * Perform a server-side search.
	 * @param {Object} opts
	 * @param {string} opts.next_batch the batch token to pass in the query string
	 * @param {Object} opts.body the JSON object to pass to the request body.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.search = function(opts, callback) {
	    var queryparams = {};
	    if (opts.next_batch) {
	        queryparams.next_batch = opts.next_batch;
	    }
	    return this._http.authedRequest(
	        callback, "POST", "/search", queryparams, opts.body
	    );
	};
	
	// Crypto
	// ======
	
	/**
	 * Upload keys
	 *
	 * @param {Object} content  body of upload request
	 *
	 * @param {Object=} opts
	 *
	 * @param {string=} opts.device_id  explicit device_id to use for upload
	 *    (default is to use the same as that used during auth).
	 *
	 * @param {module:client.callback=} callback
	 *
	 * @return {module:client.Promise} Resolves: result object. Rejects: with
	 *     an error response ({@link module:http-api.MatrixError}).
	 */
	MatrixBaseApis.prototype.uploadKeysRequest = function(content, opts, callback) {
	    opts = opts || {};
	    var deviceId = opts.device_id;
	    var path;
	    if (deviceId) {
	        path = utils.encodeUri("/keys/upload/$deviceId", {
	            $deviceId: deviceId,
	        });
	    } else {
	        path = "/keys/upload";
	    }
	    return this._http.authedRequestWithPrefix(
	        callback, "POST", path, undefined, content, httpApi.PREFIX_UNSTABLE
	    );
	};
	
	/**
	 * Download device keys
	 *
	 * @param {string[]} userIds  list of users to get keys for
	 *
	 * @param {module:client.callback=} callback
	 *
	 * @return {module:client.Promise} Resolves: result object. Rejects: with
	 *     an error response ({@link module:http-api.MatrixError}).
	 */
	MatrixBaseApis.prototype.downloadKeysForUsers = function(userIds, callback) {
	    var downloadQuery = {};
	
	    for (var i = 0; i < userIds.length; ++i) {
	        downloadQuery[userIds[i]] = {};
	    }
	    var content = {device_keys: downloadQuery};
	    return this._http.authedRequestWithPrefix(
	        callback, "POST", "/keys/query", undefined, content,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	/**
	 * Claim one-time keys
	 *
	 * @param {string[][]} devices  a list of [userId, deviceId] pairs
	 *
	 * @param {module:client.callback=} callback
	 *
	 * @return {module:client.Promise} Resolves: result object. Rejects: with
	 *     an error response ({@link module:http-api.MatrixError}).
	 */
	MatrixBaseApis.prototype.claimOneTimeKeys = function(devices, callback) {
	    var queries = {};
	
	    for (var i = 0; i < devices.length; ++i) {
	        var userId = devices[i][0];
	        var deviceId = devices[i][1];
	        var query = queries[userId] || {};
	        queries[userId] = query;
	        query[deviceId] = "curve25519";
	    }
	    var content = {one_time_keys: queries};
	    return this._http.authedRequestWithPrefix(
	        callback, "POST", "/keys/claim", undefined, content,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	
	// Identity Server Operations
	// ==========================
	
	/**
	 * Requests an email verification token directly from an Identity Server.
	 *
	 * Note that the Home Server offers APIs to proxy this API for specific
	 * situations, allowing for better feedback to the user.
	 *
	 * @param {string} email The email address to request a token for
	 * @param {string} clientSecret A secret binary string generated by the client.
	 *                 It is recommended this be around 16 ASCII characters.
	 * @param {number} sendAttempt If an identity server sees a duplicate request
	 *                 with the same sendAttempt, it will not send another email.
	 *                 To request another email to be sent, use a larger value for
	 *                 the sendAttempt param as was used in the previous request.
	 * @param {string} nextLink Optional If specified, the client will be redirected
	 *                 to this link after validation.
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: TODO
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 * @throws Error if No ID server is set
	 */
	MatrixBaseApis.prototype.requestEmailToken = function(email, clientSecret,
	                                                    sendAttempt, nextLink, callback) {
	    var params = {
	        client_secret: clientSecret,
	        email: email,
	        send_attempt: sendAttempt,
	        next_link: nextLink
	    };
	    return this._http.idServerRequest(
	        callback, "POST", "/validate/email/requestToken",
	        params, httpApi.PREFIX_IDENTITY_V1
	    );
	};
	
	/**
	 * Looks up the public Matrix ID mapping for a given 3rd party
	 * identifier from the Identity Server
	 * @param {string} medium The medium of the threepid, eg. 'email'
	 * @param {string} address The textual address of the threepid
	 * @param {module:client.callback} callback Optional.
	 * @return {module:client.Promise} Resolves: A threepid mapping
	 *                                 object or the empty object if no mapping
	 *                                 exists
	 * @return {module:http-api.MatrixError} Rejects: with an error response.
	 */
	MatrixBaseApis.prototype.lookupThreePid = function(medium, address, callback) {
	    var params = {
	        medium: medium,
	        address: address,
	    };
	    return this._http.idServerRequest(
	        callback, "GET", "/lookup",
	        params, httpApi.PREFIX_IDENTITY_V1
	    );
	};
	
	
	// Direct-to-device messaging
	// ==========================
	
	/**
	 * Send an event to a specific list of devices
	 *
	 * @param {string} eventType  type of event to send
	 * @param {Object.<string, Object<string, Object>>} contentMap
	 *    content to send. Map from user_id to device_id to content object.
	 * @param {string=} txnId     transaction id. One will be made up if not
	 *    supplied.
	 * @return {module:client.Promise} Resolves to the result object
	 */
	MatrixBaseApis.prototype.sendToDevice = function(
	    eventType, contentMap, txnId
	) {
	    var path = utils.encodeUri("/sendToDevice/$eventType/$txnId", {
	        $eventType: eventType,
	        $txnId: txnId ? txnId : this.makeTxnId(),
	    });
	
	    var body = {
	        messages: contentMap,
	    };
	
	    return this._http.authedRequestWithPrefix(
	        undefined, "PUT", path, undefined, body,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	// Third party Lookup API
	// ======================
	
	/**
	 * Get the third party protocols that can be reached using
	 * this HS
	 * @return {module:client.Promise} Resolves to the result object
	 */
	MatrixBaseApis.prototype.getThirdpartyProtocols = function() {
	    return this._http.authedRequestWithPrefix(
	        undefined, "GET", "/thirdparty/protocols", undefined, undefined,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	/**
	 * Get information on how a specific place on a third party protocol
	 * may be reached.
	 * @param {string} protocol The protocol given in getThirdpartyProtocols()
	 * @param {object} params Protocol-specific parameters, as given in th
	 *                        response to getThirdpartyProtocols()
	 * @return {module:client.Promise} Resolves to the result object
	 */
	MatrixBaseApis.prototype.getThirdpartyLocation = function(protocol, params) {
	    var path = utils.encodeUri("/thirdparty/location/$protocol", {
	        $protocol: protocol
	    });
	
	    return this._http.authedRequestWithPrefix(
	        undefined, "GET", path, params, undefined,
	        httpApi.PREFIX_UNSTABLE
	    );
	};
	
	/**
	 * MatrixBaseApis object
	 */
	module.exports = MatrixBaseApis;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	
	/**
	 * @module crypto
	 */
	
	var anotherjson = __webpack_require__(217);
	var q = __webpack_require__(197);
	
	var utils = __webpack_require__(185);
	var OlmDevice = __webpack_require__(218);
	var olmlib = __webpack_require__(219);
	var algorithms = __webpack_require__(220);
	var DeviceInfo = __webpack_require__(223);
	var DeviceVerification = DeviceInfo.DeviceVerification;
	
	/**
	 * Cryptography bits
	 *
	 * @constructor
	 * @alias module:crypto
	 *
	 * @param {module:base-apis~MatrixBaseApis} baseApis base matrix api interface
	 *
	 * @param {external:EventEmitter} eventEmitter event source where we can register
	 *    for event notifications
	 *
	 * @param {module:store/session/webstorage~WebStorageSessionStore} sessionStore
	 *    Store to be used for end-to-end crypto session data
	 *
	 * @param {string} userId The user ID for the local user
	 *
	 * @param {string} deviceId The identifier for this device.
	 */
	function Crypto(baseApis, eventEmitter, sessionStore, userId, deviceId) {
	    this._baseApis = baseApis;
	    this._sessionStore = sessionStore;
	    this._userId = userId;
	    this._deviceId = deviceId;
	
	    this._olmDevice = new OlmDevice(sessionStore);
	
	    // EncryptionAlgorithm instance for each room
	    this._roomAlgorithms = {};
	
	    this._supportedAlgorithms = utils.keys(
	        algorithms.DECRYPTION_CLASSES
	    );
	
	    // build our device keys: these will later be uploaded
	    this._deviceKeys = {};
	    this._deviceKeys["ed25519:" + this._deviceId] =
	        this._olmDevice.deviceEd25519Key;
	    this._deviceKeys["curve25519:" + this._deviceId] =
	        this._olmDevice.deviceCurve25519Key;
	
	    // add our own deviceinfo to the sessionstore
	    var deviceInfo = {
	        keys: this._deviceKeys,
	        algorithms: this._supportedAlgorithms,
	        verified: DeviceVerification.VERIFIED,
	    };
	    var myDevices = this._sessionStore.getEndToEndDevicesForUser(
	        this._userId
	    ) || {};
	    myDevices[this._deviceId] = deviceInfo;
	    this._sessionStore.storeEndToEndDevicesForUser(
	        this._userId, myDevices
	    );
	
	    _registerEventHandlers(this, eventEmitter);
	
	    // map from userId -> deviceId -> roomId -> timestamp
	    this._lastNewDeviceMessageTsByUserDeviceRoom = {};
	}
	
	function _registerEventHandlers(crypto, eventEmitter) {
	    eventEmitter.on("sync", function(syncState, oldState, data) {
	        try {
	            if (syncState == "PREPARED") {
	                // XXX ugh. we're assuming the eventEmitter is a MatrixClient.
	                // how can we avoid doing so?
	                var rooms = eventEmitter.getRooms();
	                crypto._onInitialSyncCompleted(rooms);
	            }
	        } catch (e) {
	            console.error("Error handling sync", e);
	        }
	    });
	
	    eventEmitter.on("RoomMember.membership", function(event, member, oldMembership) {
	        try {
	            crypto._onRoomMembership(event, member, oldMembership);
	        } catch (e) {
	             console.error("Error handling membership change:", e);
	        }
	    });
	
	    eventEmitter.on("toDeviceEvent", function(event) {
	        try {
	            if (event.getType() == "m.room_key") {
	                crypto._onRoomKeyEvent(event);
	            } else if (event.getType() == "m.new_device") {
	                crypto._onNewDeviceEvent(event);
	            }
	        } catch (e) {
	            console.error("Error handling toDeviceEvent:", e);
	        }
	    });
	
	    eventEmitter.on("event", function(event) {
	        try {
	            if (!event.isState() || event.getType() != "m.room.encryption") {
	                return;
	            }
	            crypto._onCryptoEvent(event);
	        } catch (e) {
	            console.error("Error handling crypto event:", e);
	        }
	    });
	}
	
	/**
	 * @return {string} The version of Olm.
	 */
	Crypto.getOlmVersion = function() {
	    return OlmDevice.getOlmVersion();
	};
	
	/**
	 * Get the Ed25519 key for this device
	 *
	 * @return {string} base64-encoded ed25519 key.
	 */
	Crypto.prototype.getDeviceEd25519Key = function() {
	    return this._olmDevice.deviceEd25519Key;
	};
	
	/**
	 * Upload the device keys to the homeserver and ensure that the
	 * homeserver has enough one-time keys.
	 * @param {number} maxKeys The maximum number of keys to generate
	 * @return {object} A promise that will resolve when the keys are uploaded.
	 */
	Crypto.prototype.uploadKeys = function(maxKeys) {
	    var self = this;
	    return _uploadDeviceKeys(this).then(function(res) {
	        // We need to keep a pool of one time public keys on the server so that
	        // other devices can start conversations with us. But we can only store
	        // a finite number of private keys in the olm Account object.
	        // To complicate things further then can be a delay between a device
	        // claiming a public one time key from the server and it sending us a
	        // message. We need to keep the corresponding private key locally until
	        // we receive the message.
	        // But that message might never arrive leaving us stuck with duff
	        // private keys clogging up our local storage.
	        // So we need some kind of enginering compromise to balance all of
	        // these factors.
	
	        // We first find how many keys the server has for us.
	        var keyCount = res.one_time_key_counts.curve25519 || 0;
	        // We then check how many keys we can store in the Account object.
	        var maxOneTimeKeys = self._olmDevice.maxNumberOfOneTimeKeys();
	        // Try to keep at most half that number on the server. This leaves the
	        // rest of the slots free to hold keys that have been claimed from the
	        // server but we haven't recevied a message for.
	        // If we run out of slots when generating new keys then olm will
	        // discard the oldest private keys first. This will eventually clean
	        // out stale private keys that won't receive a message.
	        var keyLimit = Math.floor(maxOneTimeKeys / 2);
	        // We work out how many new keys we need to create to top up the server
	        // If there are too many keys on the server then we don't need to
	        // create any more keys.
	        var numberToGenerate = Math.max(keyLimit - keyCount, 0);
	        if (maxKeys !== undefined) {
	            // Creating keys can be an expensive operation so we limit the
	            // number we generate in one go to avoid blocking the application
	            // for too long.
	            numberToGenerate = Math.min(numberToGenerate, maxKeys);
	        }
	
	        if (numberToGenerate <= 0) {
	            // If we don't need to generate any keys then we are done.
	            return;
	        }
	
	        // Ask olm to generate new one time keys, then upload them to synapse.
	        self._olmDevice.generateOneTimeKeys(numberToGenerate);
	        return _uploadOneTimeKeys(self);
	    });
	};
	
	// returns a promise which resolves to the response
	function _uploadDeviceKeys(crypto) {
	    var userId = crypto._userId;
	    var deviceId = crypto._deviceId;
	
	    var deviceKeys = {
	        algorithms: crypto._supportedAlgorithms,
	        device_id: deviceId,
	        keys: crypto._deviceKeys,
	        user_id: userId,
	    };
	
	    var sig = crypto._olmDevice.sign(anotherjson.stringify(deviceKeys));
	    deviceKeys.signatures = {};
	    deviceKeys.signatures[userId] = {};
	    deviceKeys.signatures[userId]["ed25519:" + deviceId] = sig;
	
	    return crypto._baseApis.uploadKeysRequest({
	        device_keys: deviceKeys,
	    }, {
	        // for now, we set the device id explicitly, as we may not be using the
	        // same one as used in login.
	        device_id: deviceId,
	    });
	}
	
	// returns a promise which resolves to the response
	function _uploadOneTimeKeys(crypto) {
	    var oneTimeKeys = crypto._olmDevice.getOneTimeKeys();
	    var oneTimeJson = {};
	
	    for (var keyId in oneTimeKeys.curve25519) {
	        if (oneTimeKeys.curve25519.hasOwnProperty(keyId)) {
	            oneTimeJson["curve25519:" + keyId] = oneTimeKeys.curve25519[keyId];
	        }
	    }
	    return crypto._baseApis.uploadKeysRequest({
	        one_time_keys: oneTimeJson
	    }, {
	        // for now, we set the device id explicitly, as we may not be using the
	        // same one as used in login.
	        device_id: crypto._deviceId,
	    }).then(function(res) {
	        crypto._olmDevice.markKeysAsPublished();
	        return res;
	    });
	}
	
	/**
	 * Download the keys for a list of users and stores the keys in the session
	 * store.
	 * @param {Array} userIds The users to fetch.
	 * @param {bool} forceDownload Always download the keys even if cached.
	 *
	 * @return {Promise} A promise which resolves to a map userId->deviceId->{@link
	 * module:crypto/deviceinfo|DeviceInfo}.
	 */
	Crypto.prototype.downloadKeys = function(userIds, forceDownload) {
	    var self = this;
	
	    // map from userid -> deviceid -> DeviceInfo
	    var stored = {};
	
	    // list of userids we need to download keys for
	    var downloadUsers = [];
	
	    for (var i = 0; i < userIds.length; ++i) {
	        var userId = userIds[i];
	        stored[userId] = {};
	
	        var devices = this.getStoredDevicesForUser(userId);
	        for (var j = 0; j < devices.length; ++j) {
	            var dev = devices[j];
	            stored[userId][dev.deviceId] = dev;
	        }
	
	        if (devices.length === 0 || forceDownload) {
	            downloadUsers.push(userId);
	        }
	    }
	
	    if (downloadUsers.length === 0) {
	        return q(stored);
	    }
	
	    return this._baseApis.downloadKeysForUsers(
	        downloadUsers
	    ).then(function(res) {
	        for (var userId in res.device_keys) {
	            if (!stored.hasOwnProperty(userId)) {
	                // spurious result
	                continue;
	            }
	
	            // map from deviceid -> deviceinfo for this user
	            var userStore = stored[userId];
	            var updated = _updateStoredDeviceKeysForUser(
	                self._olmDevice, userId, userStore, res.device_keys[userId]
	            );
	
	            if (!updated) {
	                continue;
	            }
	
	            // update the session store
	            var storage = {};
	            for (var deviceId in userStore) {
	                if (!userStore.hasOwnProperty(deviceId)) {
	                    continue;
	                }
	
	                storage[deviceId] = userStore[deviceId].toStorage();
	            }
	            self._sessionStore.storeEndToEndDevicesForUser(
	                userId, storage
	            );
	        }
	        return stored;
	    });
	};
	
	function _updateStoredDeviceKeysForUser(_olmDevice, userId, userStore,
	                                        userResult) {
	    var updated = false;
	
	    // remove any devices in the store which aren't in the response
	    for (var deviceId in userStore) {
	        if (!userStore.hasOwnProperty(deviceId)) {
	            continue;
	        }
	
	        if (!(deviceId in userResult)) {
	            console.log("Device " + userId + ":" + deviceId +
	                        " has been removed");
	            delete userStore[deviceId];
	            updated = true;
	        }
	    }
	
	    for (deviceId in userResult) {
	        if (!userResult.hasOwnProperty(deviceId)) {
	            continue;
	        }
	
	        if (_storeDeviceKeys(
	            _olmDevice, userId, deviceId, userStore, userResult[deviceId]
	        )) {
	            updated = true;
	        }
	    }
	
	    return updated;
	}
	
	/*
	 * Process a device in a /query response, and add it to the userStore
	 *
	 * returns true if a change was made, else false
	 */
	function _storeDeviceKeys(_olmDevice, userId, deviceId, userStore, deviceResult) {
	    if (!deviceResult.keys) {
	        // no keys?
	        return false;
	    }
	
	    var signKeyId = "ed25519:" + deviceId;
	    var signKey = deviceResult.keys[signKeyId];
	    if (!signKey) {
	        console.log("Device " + userId + ":" + deviceId +
	                    " has no ed25519 key");
	        return false;
	    }
	
	    var unsigned = deviceResult.unsigned || {};
	    var signatures = deviceResult.signatures || {};
	    var userSigs = signatures[userId] || {};
	    var signature = userSigs[signKeyId];
	    if (!signature) {
	        console.log("Device " + userId + ":" + deviceId +
	                    " is not signed");
	        return false;
	    }
	
	    // prepare the canonical json: remove 'unsigned' and signatures, and
	    // stringify with anotherjson
	    delete deviceResult.unsigned;
	    delete deviceResult.signatures;
	    var json = anotherjson.stringify(deviceResult);
	
	    try {
	        _olmDevice.verifySignature(signKey, json, signature);
	    } catch (e) {
	        console.log("Unable to verify signature on device " +
	                    userId + ":" + deviceId + ":", e);
	        return false;
	    }
	
	    // DeviceInfo
	    var deviceStore;
	
	    if (deviceId in userStore) {
	        // already have this device.
	        deviceStore = userStore[deviceId];
	
	        if (deviceStore.getFingerprint() != signKey) {
	            // this should only happen if the list has been MITMed; we are
	            // best off sticking with the original keys.
	            //
	            // Should we warn the user about it somehow?
	            console.warn("Ed25519 key for device" + userId + ": " +
	                         deviceId + " has changed");
	            return false;
	        }
	    } else {
	        userStore[deviceId] = deviceStore = new DeviceInfo(deviceId);
	    }
	
	    deviceStore.keys = deviceResult.keys || {};
	    deviceStore.algorithms = deviceResult.algorithms || [];
	    deviceStore.unsigned = unsigned;
	    return true;
	}
	
	/**
	 * Get the stored device keys for a user id
	 *
	 * @param {string} userId the user to list keys for.
	 *
	 * @return {module:crypto/deviceinfo[]} list of devices
	 */
	Crypto.prototype.getStoredDevicesForUser = function(userId) {
	    var devs = this._sessionStore.getEndToEndDevicesForUser(userId);
	    if (!devs) {
	        return [];
	    }
	    var res = [];
	    for (var deviceId in devs) {
	        if (devs.hasOwnProperty(deviceId)) {
	            res.push(DeviceInfo.fromStorage(devs[deviceId], deviceId));
	        }
	    }
	    return res;
	};
	
	
	/**
	 * List the stored device keys for a user id
	 *
	 * @deprecated prefer {@link module:crypto#getStoredDevicesForUser}
	 *
	 * @param {string} userId the user to list keys for.
	 *
	 * @return {object[]} list of devices with "id", "verified", "blocked",
	 *    "key", and "display_name" parameters.
	 */
	Crypto.prototype.listDeviceKeys = function(userId) {
	    var devices = this.getStoredDevicesForUser(userId);
	
	    var result = [];
	
	    for (var i = 0; i < devices.length; ++i) {
	        var device = devices[i];
	        var ed25519Key = device.getFingerprint();
	        if (ed25519Key) {
	            result.push({
	                id: device.deviceId,
	                key: ed25519Key,
	                verified: Boolean(device.isVerified()),
	                blocked: Boolean(device.isBlocked()),
	                display_name: device.getDisplayName(),
	            });
	        }
	    }
	
	    // sort by deviceid
	    result.sort(function(a, b) {
	        if (a.deviceId < b.deviceId) { return -1; }
	        if (a.deviceId > b.deviceId) { return 1; }
	        return 0;
	    });
	
	    return result;
	};
	
	/**
	 * Find a device by curve25519 identity key
	 *
	 * @param {string} userId     owner of the device
	 * @param {string} algorithm  encryption algorithm
	 * @param {string} sender_key curve25519 key to match
	 *
	 * @return {module:crypto/deviceinfo?}
	 */
	Crypto.prototype.getDeviceByIdentityKey = function(userId, algorithm, sender_key) {
	    if (
	        algorithm !== olmlib.OLM_ALGORITHM &&
	        algorithm !== olmlib.MEGOLM_ALGORITHM
	    ) {
	        // we only deal in olm keys
	        return null;
	    }
	
	    var devices = this._sessionStore.getEndToEndDevicesForUser(userId);
	    if (!devices) {
	        return null;
	    }
	
	    for (var deviceId in devices) {
	        if (!devices.hasOwnProperty(deviceId)) {
	            continue;
	        }
	
	        var device = devices[deviceId];
	        for (var keyId in device.keys) {
	            if (!device.keys.hasOwnProperty(keyId)) {
	                continue;
	            }
	            if (keyId.indexOf("curve25519:") !== 0) {
	                continue;
	            }
	            var deviceKey = device.keys[keyId];
	            if (deviceKey == sender_key) {
	                return DeviceInfo.fromStorage(device, deviceId);
	            }
	        }
	    }
	
	    // doesn't match a known device
	    return null;
	};
	
	
	/**
	 * Update the blocked/verified state of the given device
	 *
	 * @param {string} userId owner of the device
	 * @param {string} deviceId unique identifier for the device
	 *
	 * @param {?boolean} verified whether to mark the device as verified. Null to
	 *     leave unchanged.
	 *
	 * @param {?boolean} blocked whether to mark the device as blocked. Null to
	 *      leave unchanged.
	 */
	Crypto.prototype.setDeviceVerification = function(userId, deviceId, verified, blocked) {
	    var devices = this._sessionStore.getEndToEndDevicesForUser(userId);
	    if (!devices || !devices[deviceId]) {
	        throw new Error("Unknown device " + userId + ":" + deviceId);
	    }
	
	    var dev = devices[deviceId];
	    var verificationStatus = dev.verified;
	
	    if (verified) {
	        verificationStatus = DeviceVerification.VERIFIED;
	    } else if (verified !== null && verificationStatus == DeviceVerification.VERIFIED) {
	        verificationStatus = DeviceVerification.UNVERIFIED;
	    }
	
	    if (blocked) {
	        verificationStatus = DeviceVerification.BLOCKED;
	    } else if (blocked !== null && verificationStatus == DeviceVerification.BLOCKED) {
	        verificationStatus = DeviceVerification.UNVERIFIED;
	    }
	
	    if (dev.verified === verificationStatus) {
	        return;
	    }
	    dev.verified = verificationStatus;
	    this._sessionStore.storeEndToEndDevicesForUser(userId, devices);
	};
	
	
	/**
	 * Get information on the active olm sessions with a user
	 * <p>
	 * Returns a map from device id to an object with keys 'deviceIdKey' (the
	 * device's curve25519 identity key) and 'sessions' (an array of objects in the
	 * same format as that returned by
	 * {@link module:crypto/OlmDevice#getSessionInfoForDevice}).
	 * <p>
	 * This method is provided for debugging purposes.
	 *
	 * @param {string} userId id of user to inspect
	 *
	 * @return {Object.<string, {deviceIdKey: string, sessions: object[]}>}
	 */
	Crypto.prototype.getOlmSessionsForUser = function(userId) {
	    var devices = this.getStoredDevicesForUser(userId);
	    var result = {};
	    for (var j = 0; j < devices.length; ++j) {
	        var device = devices[j];
	        var deviceKey = device.getIdentityKey();
	        var sessions = this._olmDevice.getSessionInfoForDevice(deviceKey);
	
	        result[device.deviceId] = {
	            deviceIdKey: deviceKey,
	            sessions: sessions,
	        };
	    }
	    return result;
	};
	
	
	/**
	 * Get the device which sent an event
	 *
	 * @param {module:models/event.MatrixEvent} event event to be checked
	 *
	 * @return {module:crypto/deviceinfo?}
	 */
	Crypto.prototype.getEventSenderDeviceInfo = function(event) {
	    var sender_key = event.getSenderKey();
	    var algorithm = event.getWireContent().algorithm;
	
	    if (!sender_key || !algorithm) {
	        return null;
	    }
	
	    // sender_key is the Curve25519 identity key of the device which the event
	    // was sent from. In the case of Megolm, it's actually the Curve25519
	    // identity key of the device which set up the Megolm session.
	
	    var device = this.getDeviceByIdentityKey(
	        event.getSender(), algorithm, sender_key
	    );
	
	    if (device === null) {
	        // we haven't downloaded the details of this device yet.
	        return null;
	    }
	
	    // so far so good, but now we need to check that the sender of this event
	    // hadn't advertised someone else's Curve25519 key as their own. We do that
	    // by checking the Ed25519 claimed by the event (or, in the case of megolm,
	    // the event which set up the megolm session), to check that it matches the
	    // fingerprint of the purported sending device.
	    //
	    // (see https://github.com/vector-im/vector-web/issues/2215)
	
	    var claimedKey = event.getKeysClaimed().ed25519;
	    if (!claimedKey) {
	        console.warn("Event " + event.getId() + " claims no ed25519 key: " +
	                     "cannot verify sending device");
	        return null;
	    }
	
	    if (claimedKey !== device.getFingerprint()) {
	        console.warn(
	            "Event " + event.getId() + " claims ed25519 key " + claimedKey +
	                "but sender device has key " + device.getFingerprint());
	        return null;
	    }
	
	    return device;
	};
	
	
	/**
	 * Configure a room to use encryption (ie, save a flag in the sessionstore).
	 *
	 * @param {string} roomId The room ID to enable encryption in.
	 * @param {object} config The encryption config for the room.
	 */
	Crypto.prototype.setRoomEncryption = function(roomId, config) {
	    // if we already have encryption in this room, we should ignore this event
	    // (for now at least. maybe we should alert the user somehow?)
	    var existingConfig = this._sessionStore.getEndToEndRoom(roomId);
	    if (existingConfig) {
	        if (JSON.stringify(existingConfig) != JSON.stringify(config)) {
	            console.error("Ignoring m.room.encryption event which requests " +
	                          "a change of config in " + roomId);
	            return;
	        }
	    }
	
	    var AlgClass = algorithms.ENCRYPTION_CLASSES[config.algorithm];
	    if (!AlgClass) {
	        throw new Error("Unable to encrypt with " + config.algorithm);
	    }
	
	    // remove spurious keys
	    config = {
	        algorithm: config.algorithm,
	    };
	    this._sessionStore.storeEndToEndRoom(roomId, config);
	
	    var alg = new AlgClass({
	        deviceId: this._deviceId,
	        crypto: this,
	        olmDevice: this._olmDevice,
	        baseApis: this._baseApis,
	        roomId: roomId,
	    });
	    this._roomAlgorithms[roomId] = alg;
	};
	
	
	/**
	 * @typedef {Object} module:crypto~OlmSessionResult
	 * @property {module:crypto/deviceinfo} device  device info
	 * @property {string?} sessionId base64 olm session id; null if no session
	 *    could be established
	 */
	
	/**
	 * Try to make sure we have established olm sessions for the given users.
	 *
	 * @param {string[]} users list of user ids
	 *
	 * @return {module:client.Promise} resolves once the sessions are complete, to
	 *    an Object mapping from userId to deviceId to
	 *    {@link module:crypto~OlmSessionResult}
	 */
	Crypto.prototype.ensureOlmSessionsForUsers = function(users) {
	    var devicesWithoutSession = [
	        // [userId, deviceId, deviceInfo], ...
	    ];
	    var result = {};
	
	    for (var i = 0; i < users.length; ++i) {
	        var userId = users[i];
	        result[userId] = {};
	
	        var devices = this.getStoredDevicesForUser(userId);
	        for (var j = 0; j < devices.length; ++j) {
	            var deviceInfo = devices[j];
	            var deviceId = deviceInfo.deviceId;
	
	            var key = deviceInfo.getIdentityKey();
	            if (key == this._olmDevice.deviceCurve25519Key) {
	                // don't bother setting up session to ourself
	                continue;
	            }
	            if (deviceInfo.verified == DeviceVerification.BLOCKED) {
	                // don't bother setting up sessions with blocked users
	                continue;
	            }
	
	            var sessionId = this._olmDevice.getSessionIdForDevice(key);
	            if (sessionId === null) {
	                devicesWithoutSession.push([userId, deviceId, deviceInfo]);
	            }
	            result[userId][deviceId] = {
	                device: deviceInfo,
	                sessionId: sessionId,
	            };
	        }
	    }
	
	    if (devicesWithoutSession.length === 0) {
	        return q(result);
	    }
	
	    // TODO: this has a race condition - if we try to send another message
	    // while we are claiming a key, we will end up claiming two and setting up
	    // two sessions.
	    //
	    // That should eventually resolve itself, but it's poor form.
	
	    var self = this;
	    return this._baseApis.claimOneTimeKeys(
	        devicesWithoutSession
	    ).then(function(res) {
	        for (var i = 0; i < devicesWithoutSession.length; ++i) {
	            var device = devicesWithoutSession[i];
	            var userId = device[0];
	            var deviceId = device[1];
	            var deviceInfo = device[2];
	
	            var userRes = res.one_time_keys[userId] || {};
	            var deviceRes = userRes[deviceId];
	            var oneTimeKey = null;
	            for (var keyId in deviceRes) {
	                if (keyId.indexOf("curve25519:") === 0) {
	                    oneTimeKey = deviceRes[keyId];
	                }
	            }
	            if (oneTimeKey) {
	                var sid = self._olmDevice.createOutboundSession(
	                    deviceInfo.getIdentityKey(), oneTimeKey
	                );
	                console.log("Started new sessionid " + sid +
	                            " for device " + userId + ":" + deviceId);
	
	                result[userId][deviceId].sessionId = sid;
	            } else {
	                console.warn("No one-time keys for device " +
	                             userId + ":" + deviceId);
	            }
	        }
	        return result;
	    });
	};
	
	/**
	 * Whether encryption is enabled for a room.
	 * @param {string} roomId the room id to query.
	 * @return {bool} whether encryption is enabled.
	 */
	Crypto.prototype.isRoomEncrypted = function(roomId) {
	    return Boolean(this._roomAlgorithms[roomId]);
	};
	
	
	/**
	 * Encrypt an event according to the configuration of the room, if necessary.
	 *
	 * @param {module:models/event.MatrixEvent} event  event to be sent
	 *
	 * @param {module:models/room?} room destination room. Null if the destination
	 *     is not a room we have seen over the sync pipe.
	 *
	 * @return {module:client.Promise?} Promise which resolves when the event has been
	 *     encrypted, or null if nothing was needed
	 */
	Crypto.prototype.encryptEventIfNeeded = function(event, room) {
	    if (event.isEncrypted()) {
	        // this event has already been encrypted; this happens if the
	        // encryption step succeeded, but the send step failed on the first
	        // attempt.
	        return null;
	    }
	
	    if (event.getType() !== "m.room.message") {
	        // we only encrypt m.room.message
	        return null;
	    }
	
	    if (!room) {
	        throw new Error("Cannot send encrypted messages in unknown rooms");
	    }
	
	    var roomId = event.getRoomId();
	
	    var alg = this._roomAlgorithms[roomId];
	    if (!alg) {
	        // not encrypting messages in this room
	
	        // check that the HS hasn't hidden the crypto event
	        if (this._sessionStore.getEndToEndRoom(roomId)) {
	            throw new Error(
	                "Room was previously configured to use encryption, but is " +
	                "no longer. Perhaps the homeserver is hiding the " +
	                "configuration event."
	            );
	        }
	        return null;
	    }
	
	    // We can claim and prove ownership of all our device keys in the local
	    // echo of the event since we know that all the local echos come from
	    // this device.
	    var myKeys = {
	        curve25519: this._olmDevice.deviceCurve25519Key,
	        ed25519: this._olmDevice.deviceEd25519Key,
	    };
	
	    return alg.encryptMessage(
	        room, event.getType(), event.getContent()
	    ).then(function(encryptedContent) {
	        event.makeEncrypted("m.room.encrypted", encryptedContent, myKeys);
	    });
	};
	
	/**
	 * @typedef {Object} module:crypto.DecryptionResult
	 *
	 * @property {Object} payload decrypted payload (with properties 'type',
	 *     'content').
	 *
	 * @property {Object<string, string>} keysClaimed keys that the sender of the
	 *     event claims ownership of: map from key type to base64-encoded key
	 *
	 * @property {Object<string, string>} keysProved keys that the sender of the
	 *     event is known to have ownership of: map from key type to base64-encoded
	 *     key
	 */
	
	/**
	 * Decrypt a received event
	 *
	 * @param {object} event raw event
	 *
	 * @return {module:crypto.DecryptionResult} decryption result
	 *
	 * @raises {algorithms.DecryptionError} if there is a problem decrypting the event
	 */
	Crypto.prototype.decryptEvent = function(event) {
	    var content = event.content;
	    var AlgClass = algorithms.DECRYPTION_CLASSES[content.algorithm];
	    if (!AlgClass) {
	        throw new algorithms.DecryptionError("Unable to decrypt " + content.algorithm);
	    }
	    var alg = new AlgClass({
	        olmDevice: this._olmDevice,
	    });
	    var r = alg.decryptEvent(event);
	
	    if (r !== null) {
	        return r;
	    } else {
	        // We've got a message for a session we don't have.  Maybe the sender
	        // forgot to tell us about the session.  Remind the sender that we
	        // exist so that they might tell us about the session on their next
	        // send.
	        //
	        // (Alternatively, it might be that we are just looking at
	        // scrollback... at least we rate-limit the m.new_device events :/)
	        //
	        // XXX: this is a band-aid which masks symptoms of other bugs. It would
	        // be nice to get rid of it.
	        if (event.room_id !== undefined && event.sender !== undefined) {
	            var device_id = event.content.device_id;
	            if (device_id === undefined) {
	                // if the sending device didn't tell us its device_id, fall
	                // back to all devices.
	                device_id = null;
	            }
	            this._sendPingToDevice(event.sender, device_id, event.room_id);
	        }
	
	        throw new algorithms.DecryptionError("Unknown inbound session id");
	    }
	};
	
	/**
	 * Send a "m.new_device" message to remind it that we exist and are a member
	 * of a room.
	 *
	 * This is rate limited to send a message at most once an hour per desination.
	 *
	 * @param {string}  userId   The ID of the user to ping.
	 * @param {string?} deviceId The ID of the device to ping. If null, all
	 *     devices.
	 * @param {string}  roomId   The ID of the room we want to remind them about.
	 */
	Crypto.prototype._sendPingToDevice = function(userId, deviceId, roomId) {
	    if (deviceId === null) {
	        deviceId = "*";
	    }
	
	    var lastMessageTsMap = this._lastNewDeviceMessageTsByUserDeviceRoom;
	
	    var lastTsByDevice = lastMessageTsMap[userId];
	    if (!lastTsByDevice) {
	        lastTsByDevice = lastMessageTsMap[userId] = {};
	    }
	
	    var lastTsByRoom = lastTsByDevice[deviceId];
	    if (!lastTsByRoom) {
	        lastTsByRoom = lastTsByDevice[deviceId] = {};
	    }
	
	    var lastTs = lastTsByRoom[roomId];
	    var timeNowMs = Date.now();
	    var oneHourMs = 1000 * 60 * 60;
	
	    if (lastTs !== undefined && lastTs + oneHourMs > timeNowMs) {
	        // rate-limiting
	        return;
	    }
	
	    var content = {};
	    content[userId] = {};
	    content[userId][deviceId] = {
	        device_id: this._deviceId,
	        rooms: [roomId],
	    };
	
	    this._baseApis.sendToDevice(
	        "m.new_device", // OH HAI!
	        content
	    ).done();
	
	    lastTsByRoom[roomId] = timeNowMs;
	};
	
	/**
	 * handle an m.room.encryption event
	 *
	 * @private
	 * @param {module:models/event.MatrixEvent} event encryption event
	 */
	Crypto.prototype._onCryptoEvent = function(event) {
	    var roomId = event.getRoomId();
	    var content = event.getContent();
	
	    try {
	        this.setRoomEncryption(roomId, content);
	    } catch (e) {
	        console.error("Error configuring encryption in room " + roomId +
	                      ":", e);
	    }
	};
	
	/**
	 * handle the completion of the initial sync.
	 *
	 * Announces the new device.
	 *
	 * @private
	 * @param {module:models/room[]} rooms list of rooms the client knows about
	 */
	Crypto.prototype._onInitialSyncCompleted = function(rooms) {
	    if (this._sessionStore.getDeviceAnnounced()) {
	        return;
	    }
	
	    // we need to tell all the devices in all the rooms we are members of that
	    // we have arrived.
	    // build a list of rooms for each user.
	    var roomsByUser = {};
	    for (var i = 0; i < rooms.length; i++) {
	        var room = rooms[i];
	
	        // check for rooms with encryption enabled
	        var alg = this._roomAlgorithms[room.roomId];
	        if (!alg) {
	            continue;
	        }
	
	        // ignore any rooms which we have left
	        var me = room.getMember(this._userId);
	        if (!me || (
	            me.membership !== "join" && me.membership !== "invite"
	        )) {
	            continue;
	        }
	
	        var members = room.getJoinedMembers();
	        for (var j = 0; j < members.length; j++) {
	            var m = members[j];
	            if (!roomsByUser[m.userId]) {
	                roomsByUser[m.userId] = [];
	            }
	            roomsByUser[m.userId].push(room.roomId);
	        }
	    }
	
	    // build a per-device message for each user
	    var content = {};
	    for (var userId in roomsByUser) {
	        if (!roomsByUser.hasOwnProperty(userId)) {
	            continue;
	        }
	        content[userId] = {
	            "*": {
	                device_id: this._deviceId,
	                rooms: roomsByUser[userId],
	            },
	        };
	    }
	
	    var self = this;
	    this._baseApis.sendToDevice(
	        "m.new_device", // OH HAI!
	        content
	    ).done(function() {
	        self._sessionStore.setDeviceAnnounced();
	    });
	};
	
	/**
	 * Handle a key event
	 *
	 * @private
	 * @param {module:models/event.MatrixEvent} event key event
	 */
	Crypto.prototype._onRoomKeyEvent = function(event) {
	    var content = event.getContent();
	    var AlgClass = algorithms.DECRYPTION_CLASSES[content.algorithm];
	    if (!AlgClass) {
	        throw new algorithms.DecryptionError(
	            "Unable to handle keys for " + content.algorithm
	        );
	    }
	    var alg = new AlgClass({
	        olmDevice: this._olmDevice,
	    });
	    alg.onRoomKeyEvent(event);
	};
	
	/**
	 * Handle a change in the membership state of a member of a room
	 *
	 * @private
	 * @param {module:models/event.MatrixEvent} event  event causing the change
	 * @param {module:models/room-member} member  user whose membership changed
	 * @param {string=} oldMembership  previous membership
	 */
	Crypto.prototype._onRoomMembership = function(event, member, oldMembership) {
	
	    // this event handler is registered on the *client* (as opposed to the room
	    // member itself), which means it is only called on changes to the *live*
	    // membership state (ie, it is not called when we back-paginate, nor when
	    // we load the state in the initialsync).
	    //
	    // Further, it is automatically registered and called when new members
	    // arrive in the room.
	
	    var roomId = member.roomId;
	
	    var alg = this._roomAlgorithms[roomId];
	    if (!alg) {
	        // not encrypting in this room
	        return;
	    }
	
	    alg.onRoomMembership(event, member, oldMembership);
	};
	
	
	/**
	 * Called when a new device announces itself
	 *
	 * @private
	 * @param {module:models/event.MatrixEvent} event announcement event
	 */
	Crypto.prototype._onNewDeviceEvent = function(event) {
	    var content = event.getContent();
	    var userId = event.getSender();
	    var deviceId = content.device_id;
	    var rooms = content.rooms;
	
	    if (!rooms || !deviceId) {
	        console.warn("new_device event missing keys");
	        return;
	    }
	
	    console.log("m.new_device event from " + userId + ":" + deviceId +
	                " for rooms " + rooms);
	
	    var self = this;
	    this.downloadKeys(
	        [userId], true
	    ).then(function() {
	        for (var i = 0; i < rooms.length; i++) {
	            var roomId = rooms[i];
	            var alg = self._roomAlgorithms[roomId];
	            if (!alg) {
	                // not encrypting in this room
	                continue;
	            }
	            alg.onNewDevice(userId, deviceId);
	        }
	    }).catch(function(e) {
	        console.error(
	            "Error updating device keys for new device " + userId + ":" +
	                deviceId,
	            e
	        );
	    }).done();
	};
	
	/**
	 * @see module:crypto/algorithms/base.DecryptionError
	 */
	Crypto.DecryptionError = algorithms.DecryptionError;
	
	
	/** */
	module.exports = Crypto;


/***/ },
/* 217 */
/***/ function(module, exports) {

	/* Copyright 2015 Mark Haines
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	'use strict';
	
	var escaped = /[\\\"\x00-\x1F]/g;
	var escapes = {};
	for (var i = 0; i < 0x20; ++i) {
	    escapes[String.fromCharCode(i)] = (
	        '\\U' + ('0000' + i.toString(16)).slice(-4).toUpperCase()
	    );
	}
	escapes['\b'] = '\\b';
	escapes['\t'] = '\\t';
	escapes['\n'] = '\\n';
	escapes['\f'] = '\\f';
	escapes['\r'] = '\\r';
	escapes['\"'] = '\\\"';
	escapes['\\'] = '\\\\';
	
	function escapeString(value) {
	    escaped.lastIndex = 0;
	    return value.replace(escaped, function(c) { return escapes[c]; });
	}
	
	function stringify(value) {
	    switch (typeof value) {
	        case 'string':
	            return '"' + escapeString(value) + '"';
	        case 'number':
	            return isFinite(value) ? value : 'null';
	        case 'boolean':
	            return value;
	        case 'object':
	            if (value === null) {
	                return 'null';
	            }
	            if (Array.isArray(value)) {
	                return stringifyArray(value);
	            }
	            return stringifyObject(value);
	        default:
	            throw new Error('Cannot stringify: ' + typeof value);
	    }
	}
	
	function stringifyArray(array) {
	    var sep = '[';
	    var result = '';
	    for (var i = 0; i < array.length; ++i) {
	        result += sep;
	        sep = ',';
	        result += stringify(array[i]);
	    }
	    if (sep != ',') {
	        return '[]';
	    } else {
	        return result + ']';
	    }
	}
	
	function stringifyObject(object) {
	    var sep = '{';
	    var result = '';
	    var keys = Object.keys(object);
	    keys.sort();
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        result += sep + '"' + escapeString(key) + '":';
	        sep = ',';
	        result += stringify(object[key]);
	    }
	    if (sep != ',') {
	        return '{}';
	    } else {
	        return result + '}';
	    }
	}
	
	/** */
	module.exports = {stringify: stringify};


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * olm.js wrapper
	 *
	 * @module crypto/OlmDevice
	 */
	
	var Olm = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"olm\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var utils = __webpack_require__(185);
	
	/**
	 * Manages the olm cryptography functions. Each OlmDevice has a single
	 * OlmAccount and a number of OlmSessions.
	 *
	 * Accounts and sessions are kept pickled in a sessionStore.
	 *
	 * @constructor
	 * @alias module:crypto/OlmDevice
	 *
	 * @param {Object} sessionStore A store to be used for data in end-to-end
	 *    crypto
	 *
	 * @property {string} deviceCurve25519Key   Curve25519 key for the account
	 * @property {string} deviceEd25519Key      Ed25519 key for the account
	 */
	function OlmDevice(sessionStore) {
	    this._sessionStore = sessionStore;
	    this._pickleKey = "DEFAULT_KEY";
	
	    var e2eKeys;
	    var account = new Olm.Account();
	    try {
	        _initialise_account(this._sessionStore, this._pickleKey, account);
	        e2eKeys = JSON.parse(account.identity_keys());
	    } finally {
	        account.free();
	    }
	
	    this.deviceCurve25519Key = e2eKeys.curve25519;
	    this.deviceEd25519Key = e2eKeys.ed25519;
	
	    // we don't bother stashing outboundgroupsessions in the sessionstore -
	    // instead we keep them here.
	    this._outboundGroupSessionStore = {};
	}
	
	function _initialise_account(sessionStore, pickleKey, account) {
	    var e2eAccount = sessionStore.getEndToEndAccount();
	    if (e2eAccount !== null) {
	        account.unpickle(pickleKey, e2eAccount);
	        return;
	    }
	
	    account.create();
	    var pickled = account.pickle(pickleKey);
	    sessionStore.storeEndToEndAccount(pickled);
	}
	
	/**
	 * @return {array} The version of Olm.
	 */
	OlmDevice.getOlmVersion = function() {
	    return Olm.get_library_version();
	};
	
	
	/**
	 * extract our OlmAccount from the session store and call the given function
	 *
	 * @param {function} func
	 * @return {object} result of func
	 * @private
	 */
	OlmDevice.prototype._getAccount = function(func) {
	    var account = new Olm.Account();
	    try {
	        var pickledAccount = this._sessionStore.getEndToEndAccount();
	        account.unpickle(this._pickleKey, pickledAccount);
	        return func(account);
	    } finally {
	        account.free();
	    }
	};
	
	
	/**
	 * store our OlmAccount in the session store
	 *
	 * @param {OlmAccount} account
	 * @private
	 */
	OlmDevice.prototype._saveAccount = function(account) {
	    var pickledAccount = account.pickle(this._pickleKey);
	    this._sessionStore.storeEndToEndAccount(pickledAccount);
	};
	
	
	/**
	 * extract an OlmSession from the session store and call the given function
	 *
	 * @param {string} deviceKey
	 * @param {string} sessionId
	 * @param {function} func
	 * @return {object} result of func
	 * @private
	 */
	OlmDevice.prototype._getSession = function(deviceKey, sessionId, func) {
	    var sessions = this._sessionStore.getEndToEndSessions(deviceKey);
	    var pickledSession = sessions[sessionId];
	
	    var session = new Olm.Session();
	    try {
	        session.unpickle(this._pickleKey, pickledSession);
	        return func(session);
	    } finally {
	        session.free();
	    }
	};
	
	
	/**
	 * store our OlmSession in the session store
	 *
	 * @param {string} deviceKey
	 * @param {OlmSession} session
	 * @private
	 */
	OlmDevice.prototype._saveSession = function(deviceKey, session) {
	    var pickledSession = session.pickle(this._pickleKey);
	    this._sessionStore.storeEndToEndSession(
	        deviceKey, session.session_id(), pickledSession
	    );
	};
	
	
	/**
	 * get an OlmUtility and call the given function
	 *
	 * @param {function} func
	 * @return {object} result of func
	 * @private
	 */
	OlmDevice.prototype._getUtility = function(func) {
	    var utility = new Olm.Utility();
	    try {
	        return func(utility);
	    } finally {
	        utility.free();
	    }
	};
	
	
	/**
	 * Signs a message with the ed25519 key for this account.
	 *
	 * @param {string} message  message to be signed
	 * @return {string} base64-encoded signature
	 */
	OlmDevice.prototype.sign = function(message) {
	    return this._getAccount(function(account) {
	        return account.sign(message);
	    });
	};
	
	/**
	 * Get the current (unused, unpublished) one-time keys for this account.
	 *
	 * @return {object} one time keys; an object with the single property
	 * <tt>curve25519</tt>, which is itself an object mapping key id to Curve25519
	 * key.
	 */
	OlmDevice.prototype.getOneTimeKeys = function() {
	    return this._getAccount(function(account) {
	        return JSON.parse(account.one_time_keys());
	    });
	};
	
	
	/**
	 * Get the maximum number of one-time keys we can store.
	 *
	 * @return {number} number of keys
	 */
	OlmDevice.prototype.maxNumberOfOneTimeKeys = function() {
	    return this._getAccount(function(account) {
	        return account.max_number_of_one_time_keys();
	    });
	};
	
	/**
	 * Marks all of the one-time keys as published.
	 */
	OlmDevice.prototype.markKeysAsPublished = function() {
	    var self = this;
	    this._getAccount(function(account) {
	        account.mark_keys_as_published();
	        self._saveAccount(account);
	    });
	};
	
	/**
	 * Generate some new one-time keys
	 *
	 * @param {number} numKeys number of keys to generate
	 */
	OlmDevice.prototype.generateOneTimeKeys = function(numKeys) {
	    var self = this;
	    this._getAccount(function(account) {
	        account.generate_one_time_keys(numKeys);
	        self._saveAccount(account);
	    });
	};
	
	/**
	 * Generate a new outbound session
	 *
	 * The new session will be stored in the sessionStore.
	 *
	 * @param {string} theirIdentityKey remote user's Curve25519 identity key
	 * @param {string} theirOneTimeKey  remote user's one-time Curve25519 key
	 * @return {string} sessionId for the outbound session.
	 */
	OlmDevice.prototype.createOutboundSession = function(
	    theirIdentityKey, theirOneTimeKey
	) {
	    var self = this;
	    return this._getAccount(function(account) {
	        var session = new Olm.Session();
	        try {
	            session.create_outbound(account, theirIdentityKey, theirOneTimeKey);
	            self._saveSession(theirIdentityKey, session);
	            return session.session_id();
	        } finally {
	            session.free();
	        }
	    });
	};
	
	
	/**
	 * Generate a new inbound session, given an incoming message
	 *
	 * @param {string} theirDeviceIdentityKey remote user's Curve25519 identity key
	 * @param {number} message_type  message_type field from the received message (must be 0)
	 * @param {string} ciphertext base64-encoded body from the received message
	 *
	 * @return {{payload: string, session_id: string}} decrypted payload, and
	 *     session id of new session
	 *
	 * @raises {Error} if the received message was not valid (for instance, it
	 *     didn't use a valid one-time key).
	 */
	OlmDevice.prototype.createInboundSession = function(
	    theirDeviceIdentityKey, message_type, ciphertext
	) {
	    if (message_type !== 0) {
	        throw new Error("Need message_type == 0 to create inbound session");
	    }
	
	    var self = this;
	    return this._getAccount(function(account) {
	        var session = new Olm.Session();
	        try {
	            session.create_inbound_from(account, theirDeviceIdentityKey, ciphertext);
	            account.remove_one_time_keys(session);
	            self._saveAccount(account);
	
	            var payloadString = session.decrypt(message_type, ciphertext);
	
	            self._saveSession(theirDeviceIdentityKey, session);
	
	            return {
	                payload: payloadString,
	                session_id: session.session_id(),
	            };
	        } finally {
	            session.free();
	        }
	    });
	};
	
	
	/**
	 * Get a list of known session IDs for the given device
	 *
	 * @param {string} theirDeviceIdentityKey Curve25519 identity key for the
	 *     remote device
	 * @return {string[]}  a list of known session ids for the device
	 */
	OlmDevice.prototype.getSessionIdsForDevice = function(theirDeviceIdentityKey) {
	    var sessions = this._sessionStore.getEndToEndSessions(
	        theirDeviceIdentityKey
	    );
	    return utils.keys(sessions);
	};
	
	/**
	 * Get the right olm session id for encrypting messages to the given identity key
	 *
	 * @param {string} theirDeviceIdentityKey Curve25519 identity key for the
	 *     remote device
	 * @return {string?}  session id, or null if no established session
	 */
	OlmDevice.prototype.getSessionIdForDevice = function(theirDeviceIdentityKey) {
	    var sessionIds = this.getSessionIdsForDevice(theirDeviceIdentityKey);
	    if (sessionIds.length === 0) {
	        return null;
	    }
	    // Use the session with the lowest ID.
	    sessionIds.sort();
	    return sessionIds[0];
	};
	
	/**
	 * Get information on the active Olm sessions for a device.
	 * <p>
	 * Returns an array, with an entry for each active session. The first entry in
	 * the result will be the one used for outgoing messages. Each entry contains
	 * the keys 'hasReceivedMessage' (true if the session has received an incoming
	 * message and is therefore past the pre-key stage), and 'sessionId'.
	 *
	 * @param {string} deviceIdentityKey Curve25519 identity key for the device
	 * @return {Array.<{sessionId: string, hasReceivedMessage: Boolean}>}
	 */
	OlmDevice.prototype.getSessionInfoForDevice = function(deviceIdentityKey) {
	    var sessionIds = this.getSessionIdsForDevice(deviceIdentityKey);
	    sessionIds.sort();
	
	    var info = [];
	
	    function getSessionInfo(session) {
	        return {
	            hasReceivedMessage: session.has_received_message()
	        };
	    }
	
	    for (var i = 0; i < sessionIds.length; i++) {
	        var sessionId = sessionIds[i];
	        var res = this._getSession(deviceIdentityKey, sessionId, getSessionInfo);
	        res.sessionId = sessionId;
	        info.push(res);
	    }
	    return info;
	};
	
	/**
	 * Encrypt an outgoing message using an existing session
	 *
	 * @param {string} theirDeviceIdentityKey Curve25519 identity key for the
	 *     remote device
	 * @param {string} sessionId  the id of the active session
	 * @param {string} payloadString  payload to be encrypted and sent
	 *
	 * @return {string} ciphertext
	 */
	OlmDevice.prototype.encryptMessage = function(
	    theirDeviceIdentityKey, sessionId, payloadString
	) {
	    var self = this;
	
	    return this._getSession(theirDeviceIdentityKey, sessionId, function(session) {
	        var res = session.encrypt(payloadString);
	        self._saveSession(theirDeviceIdentityKey, session);
	        return res;
	    });
	};
	
	/**
	 * Decrypt an incoming message using an existing session
	 *
	 * @param {string} theirDeviceIdentityKey Curve25519 identity key for the
	 *     remote device
	 * @param {string} sessionId  the id of the active session
	 * @param {number} message_type  message_type field from the received message
	 * @param {string} ciphertext base64-encoded body from the received message
	 *
	 * @return {string} decrypted payload.
	 */
	OlmDevice.prototype.decryptMessage = function(
	    theirDeviceIdentityKey, sessionId, message_type, ciphertext
	) {
	    var self = this;
	
	    return this._getSession(theirDeviceIdentityKey, sessionId, function(session) {
	        var payloadString = session.decrypt(message_type, ciphertext);
	        self._saveSession(theirDeviceIdentityKey, session);
	
	        return payloadString;
	    });
	};
	
	/**
	 * Determine if an incoming messages is a prekey message matching an existing session
	 *
	 * @param {string} theirDeviceIdentityKey Curve25519 identity key for the
	 *     remote device
	 * @param {string} sessionId  the id of the active session
	 * @param {number} message_type  message_type field from the received message
	 * @param {string} ciphertext base64-encoded body from the received message
	 *
	 * @return {boolean} true if the received message is a prekey message which matches
	 *    the given session.
	 */
	OlmDevice.prototype.matchesSession = function(
	    theirDeviceIdentityKey, sessionId, message_type, ciphertext
	) {
	    if (message_type !== 0) {
	        return false;
	    }
	
	    return this._getSession(theirDeviceIdentityKey, sessionId, function(session) {
	        return session.matches_inbound(ciphertext);
	    });
	};
	
	
	
	// Outbound group session
	// ======================
	
	/**
	 * store an OutboundGroupSession in _outboundGroupSessionStore
	 *
	 * @param {Olm.OutboundGroupSession} session
	 * @private
	 */
	OlmDevice.prototype._saveOutboundGroupSession = function(session) {
	    var pickledSession = session.pickle(this._pickleKey);
	    this._outboundGroupSessionStore[session.session_id()] = pickledSession;
	};
	
	
	/**
	 * extract an OutboundGroupSession from _outboundGroupSessionStore and call the
	 * given function
	 *
	 * @param {string} sessionId
	 * @param {function} func
	 * @return {object} result of func
	 * @private
	 */
	OlmDevice.prototype._getOutboundGroupSession = function(sessionId, func) {
	    var pickled = this._outboundGroupSessionStore[sessionId];
	    if (pickled === null) {
	        throw new Error("Unknown outbound group session " + sessionId);
	    }
	
	    var session = new Olm.OutboundGroupSession();
	    try {
	        session.unpickle(this._pickleKey, pickled);
	        return func(session);
	    } finally {
	        session.free();
	    }
	};
	
	
	/**
	 * Generate a new outbound group session
	 *
	 * @return {string} sessionId for the outbound session.
	 */
	OlmDevice.prototype.createOutboundGroupSession = function() {
	    var session = new Olm.OutboundGroupSession();
	    try {
	        session.create();
	        this._saveOutboundGroupSession(session);
	        return session.session_id();
	    } finally {
	        session.free();
	    }
	};
	
	
	/**
	 * Encrypt an outgoing message with an outbound group session
	 *
	 * @param {string} sessionId  the id of the outboundgroupsession
	 * @param {string} payloadString  payload to be encrypted and sent
	 *
	 * @return {string} ciphertext
	 */
	OlmDevice.prototype.encryptGroupMessage = function(sessionId, payloadString) {
	    var self = this;
	
	    return this._getOutboundGroupSession(sessionId, function(session) {
	        var res = session.encrypt(payloadString);
	        self._saveOutboundGroupSession(session);
	        return res;
	    });
	};
	
	/**
	 * Get the session keys for an outbound group session
	 *
	 * @param {string} sessionId  the id of the outbound group session
	 *
	 * @return {{chain_index: number, key: string}} current chain index, and
	 *     base64-encoded secret key.
	 */
	OlmDevice.prototype.getOutboundGroupSessionKey = function(sessionId) {
	    return this._getOutboundGroupSession(sessionId, function(session) {
	        return {
	            chain_index: session.message_index(),
	            key: session.session_key(),
	        };
	    });
	};
	
	
	// Inbound group session
	// =====================
	
	/**
	 * store an InboundGroupSession in the session store
	 *
	 * @param {string} roomId
	 * @param {string} senderCurve25519Key
	 * @param {string} sessionId
	 * @param {Olm.InboundGroupSession} session
	 * @param {object} keysClaimed Other keys the sender claims.
	 * @private
	 */
	OlmDevice.prototype._saveInboundGroupSession = function(
	    roomId, senderCurve25519Key, sessionId, session, keysClaimed
	) {
	    var r = {
	        room_id: roomId,
	        session: session.pickle(this._pickleKey),
	        keysClaimed: keysClaimed,
	    };
	
	    this._sessionStore.storeEndToEndInboundGroupSession(
	        senderCurve25519Key, sessionId, JSON.stringify(r)
	    );
	};
	
	/**
	 * extract an InboundGroupSession from the session store and call the given function
	 *
	 * @param {string} roomId
	 * @param {string} senderKey
	 * @param {string} sessionId
	 * @param {function(Olm.InboundGroupSession, Object<string, string>): T} func
	 *   function to call. Second argument is the map of keys claimed by the session.
	 *
	 * @return {null} the sessionId is unknown
	 *
	 * @return {T} result of func
	 *
	 * @private
	 * @template {T}
	 */
	OlmDevice.prototype._getInboundGroupSession = function(
	    roomId, senderKey, sessionId, func
	) {
	    var r = this._sessionStore.getEndToEndInboundGroupSession(
	        senderKey, sessionId
	    );
	
	    if (r === null) {
	        return null;
	    }
	
	    r = JSON.parse(r);
	
	    // check that the room id matches the original one for the session. This stops
	    // the HS pretending a message was targeting a different room.
	    if (roomId !== r.room_id) {
	        throw new Error(
	            "Mismatched room_id for inbound group session (expected " + r.room_id +
	                ", was " + roomId + ")"
	        );
	    }
	
	    var session = new Olm.InboundGroupSession();
	    try {
	        session.unpickle(this._pickleKey, r.session);
	        return func(session, r.keysClaimed || {});
	    } finally {
	        session.free();
	    }
	};
	
	/**
	 * Add an inbound group session to the session store
	 *
	 * @param {string} roomId     room in which this session will be used
	 * @param {string} senderKey  base64-encoded curve25519 key of the sender
	 * @param {string} sessionId  session identifier
	 * @param {string} sessionKey base64-encoded secret key
	 * @param {Object<string, string>} keysClaimed Other keys the sender claims.
	 */
	OlmDevice.prototype.addInboundGroupSession = function(
	    roomId, senderKey, sessionId, sessionKey, keysClaimed
	) {
	    var self = this;
	    var session = new Olm.InboundGroupSession();
	    try {
	        session.create(sessionKey);
	        if (sessionId != session.session_id()) {
	            throw new Error(
	                "Mismatched group session ID from senderKey: " + senderKey
	            );
	        }
	        self._saveInboundGroupSession(
	            roomId, senderKey, sessionId, session, keysClaimed
	        );
	    } finally {
	        session.free();
	    }
	};
	
	/**
	 * Decrypt a received message with an inbound group session
	 *
	 * @param {string} roomId    room in which the message was received
	 * @param {string} senderKey base64-encoded curve25519 key of the sender
	 * @param {string} sessionId session identifier
	 * @param {string} body      base64-encoded body of the encrypted message
	 *
	 * @return {null} the sessionId is unknown
	 *
	 * @return {{result: string, keysProved: Object<string, string>, keysClaimed:
	 *    Object<string, string>}} result
	 */
	OlmDevice.prototype.decryptGroupMessage = function(
	    roomId, senderKey, sessionId, body
	) {
	    var self = this;
	
	    function decrypt(session, keysClaimed) {
	        var res = session.decrypt(body);
	
	        // the sender must have had the senderKey to persuade us to save the
	        // session.
	        var keysProved = {curve25519: senderKey};
	
	        self._saveInboundGroupSession(
	            roomId, senderKey, sessionId, session, keysClaimed
	        );
	        return {
	            result: res,
	            keysClaimed: keysClaimed,
	            keysProved: keysProved,
	        };
	    }
	
	    return this._getInboundGroupSession(
	        roomId, senderKey, sessionId, decrypt
	    );
	};
	
	
	// Utilities
	// =========
	
	/**
	 * Verify an ed25519 signature.
	 *
	 * @param {string} key ed25519 key
	 * @param {string} message message which was signed
	 * @param {string} signature base64-encoded signature to be checked
	 *
	 * @raises {Error} if there is a problem with the verification. If the key was
	 * too small then the message will be "OLM.INVALID_BASE64". If the signature
	 * was invalid then the message will be "OLM.BAD_MESSAGE_MAC".
	 */
	OlmDevice.prototype.verifySignature = function(
	    key, message, signature
	) {
	    this._getUtility(function(util) {
	        util.ed25519_verify(key, message, signature);
	    });
	};
	
	/** */
	module.exports = OlmDevice;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	
	/**
	 * @module olmlib
	 *
	 * Utilities common to olm encryption algorithms
	 */
	
	var utils = __webpack_require__(185);
	
	/**
	 * matrix algorithm tag for olm
	 */
	module.exports.OLM_ALGORITHM = "m.olm.v1.curve25519-aes-sha2";
	
	/**
	 * matrix algorithm tag for megolm
	 */
	module.exports.MEGOLM_ALGORITHM = "m.megolm.v1.aes-sha2";
	
	
	/**
	 * Encrypt an event payload for a list of devices
	 *
	 * @param {string} ourDeviceId
	 * @param {module:crypto/OlmDevice} olmDevice olm.js wrapper
	 * @param {string[]} participantKeys list of curve25519 keys to encrypt for
	 * @param {object} payloadFields fields to include in the encrypted payload
	 *
	 * @return {object} content for an m.room.encrypted event
	 */
	module.exports.encryptMessageForDevices = function(
	    ourDeviceId, olmDevice, participantKeys, payloadFields
	) {
	    participantKeys.sort();
	    var participantHash = ""; // Olm.sha256(participantKeys.join());
	    var payloadJson = {
	        fingerprint: participantHash,
	        sender_device: ourDeviceId,
	
	        // Include the Ed25519 key so that the recipient knows what
	        // device this message came from.
	        // We don't need to include the curve25519 key since the
	        // recipient will already know this from the olm headers.
	        // When combined with the device keys retrieved from the
	        // homeserver signed by the ed25519 key this proves that
	        // the curve25519 key and the ed25519 key are owned by
	        // the same device.
	        keys: {
	            "ed25519": olmDevice.deviceEd25519Key,
	        },
	    };
	    utils.extend(payloadJson, payloadFields);
	
	    var ciphertext = {};
	    var payloadString = JSON.stringify(payloadJson);
	    for (var i = 0; i < participantKeys.length; ++i) {
	        var deviceKey = participantKeys[i];
	        var sessionId = olmDevice.getSessionIdForDevice(deviceKey);
	        if (sessionId === null) {
	            // If we don't have a session for a device then
	            // we can't encrypt a message for it.
	            continue;
	        }
	        console.log("Using sessionid " + sessionId + " for device " + deviceKey);
	        ciphertext[deviceKey] = olmDevice.encryptMessage(
	            deviceKey, sessionId, payloadString
	        );
	    }
	    var encryptedContent = {
	        algorithm: module.exports.OLM_ALGORITHM,
	        sender_key: olmDevice.deviceCurve25519Key,
	        ciphertext: ciphertext
	    };
	    return encryptedContent;
	};


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * @module crypto/algorithms
	 */
	
	var base = __webpack_require__(221);
	
	__webpack_require__(222);
	__webpack_require__(224);
	
	/**
	 * @see module:crypto/algorithms/base.ENCRYPTION_CLASSES
	 */
	module.exports.ENCRYPTION_CLASSES = base.ENCRYPTION_CLASSES;
	
	/**
	 * @see module:crypto/algorithms/base.DECRYPTION_CLASSES
	 */
	module.exports.DECRYPTION_CLASSES = base.DECRYPTION_CLASSES;
	
	/**
	 * @see module:crypto/algorithms/base.DecryptionError
	 */
	module.exports.DecryptionError = base.DecryptionError;


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * Internal module. Defines the base classes of the encryption implementations
	 *
	 * @module crypto/algorithms/base
	 */
	var utils = __webpack_require__(185);
	
	/**
	 * map of registered encryption algorithm classes. A map from string to {@link
	 * module:crypto/algorithms/base.EncryptionAlgorithm|EncryptionAlgorithm} class
	 *
	 * @type {Object.<string, function(new: module:crypto/algorithms/base.EncryptionAlgorithm)>}
	 */
	module.exports.ENCRYPTION_CLASSES = {};
	
	/**
	 * map of registered encryption algorithm classes. Map from string to {@link
	 * module:crypto/algorithms/base.DecryptionAlgorithm|DecryptionAlgorithm} class
	 *
	 * @type {Object.<string, function(new: module:crypto/algorithms/base.DecryptionAlgorithm)>}
	 */
	module.exports.DECRYPTION_CLASSES = {};
	
	/**
	 * base type for encryption implementations
	 *
	 * @constructor
	 * @alias module:crypto/algorithms/base.EncryptionAlgorithm
	 *
	 * @param {object} params parameters
	 * @param {string} params.deviceId The identifier for this device.
	 * @param {module:crypto} params.crypto crypto core
	 * @param {module:crypto/OlmDevice} params.olmDevice olm.js wrapper
	 * @param {module:base-apis~MatrixBaseApis} baseApis base matrix api interface
	 * @param {string} params.roomId  The ID of the room we will be sending to
	 */
	var EncryptionAlgorithm = function(params) {
	    this._deviceId = params.deviceId;
	    this._crypto = params.crypto;
	    this._olmDevice = params.olmDevice;
	    this._baseApis = params.baseApis;
	    this._roomId = params.roomId;
	};
	/** */
	module.exports.EncryptionAlgorithm = EncryptionAlgorithm;
	
	/**
	 * Encrypt a message event
	 *
	 * @method module:crypto/algorithms/base.EncryptionAlgorithm#encryptMessage
	 * @abstract
	 *
	 * @param {module:models/room} room
	 * @param {string} eventType
	 * @param {object} plaintext event content
	 *
	 * @return {module:client.Promise} Promise which resolves to the new event body
	 */
	
	/**
	 * Called when the membership of a member of the room changes.
	 *
	 * @param {module:models/event.MatrixEvent} event  event causing the change
	 * @param {module:models/room-member} member  user whose membership changed
	 * @param {string=} oldMembership  previous membership
	 */
	EncryptionAlgorithm.prototype.onRoomMembership = function(
	    event, member, oldMembership
	) {};
	
	/**
	 * Called when a new device announces itself in the room
	 *
	 * @param {string} userId    owner of the device
	 * @param {string} deviceId  deviceId of the device
	 */
	EncryptionAlgorithm.prototype.onNewDevice = function(userId, deviceId) {};
	
	
	/**
	 * base type for decryption implementations
	 *
	 * @constructor
	 * @alias module:crypto/algorithms/base.DecryptionAlgorithm
	 *
	 * @param {object} params parameters
	 * @param {module:crypto/OlmDevice} params.olmDevice olm.js wrapper
	 */
	var DecryptionAlgorithm = function(params) {
	    this._olmDevice = params.olmDevice;
	};
	/** */
	module.exports.DecryptionAlgorithm = DecryptionAlgorithm;
	
	/**
	 * Decrypt an event
	 *
	 * @method module:crypto/algorithms/base.DecryptionAlgorithm#decryptEvent
	 * @abstract
	 *
	 * @param {object} event raw event
	 *
	 * @return {null} if the event referred to an unknown megolm session
	 * @return {module:crypto.DecryptionResult} decryption result
	 *
	 * @throws {module:crypto/algorithms/base.DecryptionError} if there is a
	 *   problem decrypting the event
	 */
	
	/**
	 * Handle a key event
	 *
	 * @method module:crypto/algorithms/base.DecryptionAlgorithm#onRoomKeyEvent
	 *
	 * @param {module:models/event.MatrixEvent} event key event
	 */
	DecryptionAlgorithm.prototype.onRoomKeyEvent = function(params) {
	    // ignore by default
	};
	
	/**
	 * Exception thrown when decryption fails
	 *
	 * @constructor
	 * @param {string} msg message describing the problem
	 * @extends Error
	 */
	module.exports.DecryptionError = function(msg) {
	    this.message = msg;
	};
	utils.inherits(module.exports.DecryptionError, Error);
	
	/**
	 * Registers an encryption/decryption class for a particular algorithm
	 *
	 * @param {string} algorithm algorithm tag to register for
	 *
	 * @param {class} encryptor {@link
	 *     module:crypto/algorithms/base.EncryptionAlgorithm|EncryptionAlgorithm}
	 *     implementation
	 *
	 * @param {class} decryptor {@link
	 *     module:crypto/algorithms/base.DecryptionAlgorithm|DecryptionAlgorithm}
	 *     implementation
	 */
	module.exports.registerAlgorithm = function(algorithm, encryptor, decryptor) {
	    module.exports.ENCRYPTION_CLASSES[algorithm] = encryptor;
	    module.exports.DECRYPTION_CLASSES[algorithm] = decryptor;
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * Defines m.olm encryption/decryption
	 *
	 * @module crypto/algorithms/olm
	 */
	var q = __webpack_require__(197);
	
	var utils = __webpack_require__(185);
	var olmlib = __webpack_require__(219);
	var DeviceInfo = __webpack_require__(223);
	var DeviceVerification = DeviceInfo.DeviceVerification;
	
	
	var base = __webpack_require__(221);
	
	/**
	 * Olm encryption implementation
	 *
	 * @constructor
	 * @extends {module:crypto/algorithms/base.EncryptionAlgorithm}
	 *
	 * @param {object} params parameters, as per
	 *     {@link module:crypto/algorithms/base.EncryptionAlgorithm}
	 */
	function OlmEncryption(params) {
	    base.EncryptionAlgorithm.call(this, params);
	    this._sessionPrepared = false;
	    this._prepPromise = null;
	}
	utils.inherits(OlmEncryption, base.EncryptionAlgorithm);
	
	/**
	 * @private
	
	 * @param {string[]} roomMembers list of currently-joined users in the room
	 * @return {module:client.Promise} Promise which resolves when setup is complete
	 */
	OlmEncryption.prototype._ensureSession = function(roomMembers) {
	    if (this._prepPromise) {
	        // prep already in progress
	        return this._prepPromise;
	    }
	
	    if (this._sessionPrepared) {
	        // prep already done
	        return q();
	    }
	
	    var self = this;
	    this._prepPromise = self._crypto.downloadKeys(roomMembers, true).then(function(res) {
	        return self._crypto.ensureOlmSessionsForUsers(roomMembers);
	    }).then(function() {
	        self._sessionPrepared = true;
	    }).finally(function() {
	        self._prepPromise = null;
	    });
	    return this._prepPromise;
	};
	
	/**
	 * @inheritdoc
	 *
	 * @param {module:models/room} room
	 * @param {string} eventType
	 * @param {object} plaintext event content
	 *
	 * @return {module:client.Promise} Promise which resolves to the new event body
	 */
	OlmEncryption.prototype.encryptMessage = function(room, eventType, content) {
	    // pick the list of recipients based on the membership list.
	    //
	    // TODO: there is a race condition here! What if a new user turns up
	    // just as you are sending a secret message?
	
	    var users = utils.map(room.getJoinedMembers(), function(u) {
	        return u.userId;
	    });
	
	    var self = this;
	    return this._ensureSession(users).then(function() {
	        var participantKeys = [];
	        for (var i = 0; i < users.length; ++i) {
	            var userId = users[i];
	            var devices = self._crypto.getStoredDevicesForUser(userId);
	            for (var j = 0; j < devices.length; ++j) {
	                var deviceInfo = devices[j];
	                var key = deviceInfo.getIdentityKey();
	                if (key == self._olmDevice.deviceCurve25519Key) {
	                    // don't bother setting up session to ourself
	                    continue;
	                }
	                if (deviceInfo.verified == DeviceVerification.BLOCKED) {
	                    // don't bother setting up sessions with blocked users
	                    continue;
	                }
	                participantKeys.push(key);
	            }
	        }
	
	        return olmlib.encryptMessageForDevices(
	            self._deviceId, self._olmDevice, participantKeys, {
	                room_id: room.roomId,
	                type: eventType,
	                content: content,
	            }
	        );
	    });
	};
	
	/**
	 * Olm decryption implementation
	 *
	 * @constructor
	 * @extends {module:crypto/algorithms/base.DecryptionAlgorithm}
	 * @param {object} params parameters, as per
	 *     {@link module:crypto/algorithms/base.DecryptionAlgorithm}
	 */
	function OlmDecryption(params) {
	    base.DecryptionAlgorithm.call(this, params);
	}
	utils.inherits(OlmDecryption, base.DecryptionAlgorithm);
	
	/**
	 * @inheritdoc
	 *
	 * @param {object} event raw event
	 *
	 * @return {module:crypto.DecryptionResult} decryption result
	 *
	 * @throws {module:crypto/algorithms/base.DecryptionError} if there is a
	 *   problem decrypting the event
	 */
	OlmDecryption.prototype.decryptEvent = function(event) {
	    var content = event.content;
	    var deviceKey = content.sender_key;
	    var ciphertext = content.ciphertext;
	
	    if (!ciphertext) {
	        throw new base.DecryptionError("Missing ciphertext");
	    }
	
	    if (!(this._olmDevice.deviceCurve25519Key in ciphertext)) {
	        throw new base.DecryptionError("Not included in recipients");
	    }
	    var message = ciphertext[this._olmDevice.deviceCurve25519Key];
	    var payloadString;
	
	    try {
	        payloadString = this._decryptMessage(deviceKey, message);
	    } catch (e) {
	        console.warn(
	            "Failed to decrypt Olm event (id=" +
	                event.event_id + ") from " + deviceKey +
	                ": " + e.message
	        );
	        throw new base.DecryptionError("Bad Encrypted Message");
	    }
	
	
	    // TODO: Check the sender user id matches the sender key.
	    // TODO: check the room_id and fingerprint
	    var payload = JSON.parse(payloadString);
	    return {
	        payload: payload,
	        sessionExists: true,
	        keysProved: {curve25519: deviceKey},
	        keysClaimed: payload.keys || {}
	    };
	};
	
	
	/**
	 * Attempt to decrypt an Olm message
	 *
	 * @param {string} theirDeviceIdentityKey  Curve25519 identity key of the sender
	 * @param {object} message  message object, with 'type' and 'body' fields
	 *
	 * @return {string} payload, if decrypted successfully.
	 */
	OlmDecryption.prototype._decryptMessage = function(theirDeviceIdentityKey, message) {
	    var sessionIds = this._olmDevice.getSessionIdsForDevice(theirDeviceIdentityKey);
	
	    // try each session in turn.
	    var decryptionErrors = {};
	    for (var i = 0; i < sessionIds.length; i++) {
	        var sessionId = sessionIds[i];
	        try {
	            var payload = this._olmDevice.decryptMessage(
	                theirDeviceIdentityKey, sessionId, message.type, message.body
	            );
	            console.log(
	                "Decrypted Olm message from " + theirDeviceIdentityKey +
	                    " with session " + sessionId
	            );
	            return payload;
	        } catch (e) {
	            var foundSession = this._olmDevice.matchesSession(
	                theirDeviceIdentityKey, sessionId, message.type, message.body
	            );
	
	            if (foundSession) {
	                // decryption failed, but it was a prekey message matching this
	                // session, so it should have worked.
	                throw new Error(
	                    "Error decrypting prekey message with existing session id " +
	                        sessionId + ": " + e.message
	                );
	            }
	
	            // otherwise it's probably a message for another session; carry on, but
	            // keep a record of the error
	            decryptionErrors[sessionId] = e.message;
	        }
	    }
	
	    if (message.type !== 0) {
	        // not a prekey message, so it should have matched an existing session, but it
	        // didn't work.
	
	        if (sessionIds.length === 0) {
	            throw new Error("No existing sessions");
	        }
	
	        throw new Error(
	            "Error decrypting non-prekey message with existing sessions: " +
	                JSON.stringify(decryptionErrors)
	        );
	    }
	
	    // prekey message which doesn't match any existing sessions: make a new
	    // session.
	
	    var res;
	    try {
	        res = this._olmDevice.createInboundSession(
	            theirDeviceIdentityKey, message.type, message.body
	        );
	    } catch (e) {
	        decryptionErrors["(new)"] = e.message;
	        throw new Error(
	            "Error decrypting prekey message: " +
	                JSON.stringify(decryptionErrors)
	        );
	    }
	
	    console.log(
	        "created new inbound Olm session ID " +
	            res.session_id + " with " + theirDeviceIdentityKey
	    );
	    return res.payload;
	};
	
	
	base.registerAlgorithm(olmlib.OLM_ALGORITHM, OlmEncryption, OlmDecryption);


/***/ },
/* 223 */
/***/ function(module, exports) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	
	/**
	 * @module crypto/deviceinfo
	 */
	
	/**
	  * Information about a user's device
	  *
	  * @constructor
	  * @alias module:crypto/deviceinfo
	  *
	  * @property {string} deviceId the ID of this device
	  *
	  * @property {string[]} algorithms list of algorithms supported by this device
	  *
	  * @property {Object.<string,string>} keys a map from
	  *      &lt;key type&gt;:&lt;id&gt; -> &lt;base64-encoded key&gt;>
	  *
	  * @property {module:crypto/deviceinfo.DeviceVerification} verified
	  *     whether the device has been verified by the user
	  *
	  * @property {Object} unsigned  additional data from the homeserver
	  *
	  * @param {string} deviceId id of the device
	  */
	function DeviceInfo(deviceId) {
	    // you can't change the deviceId
	    Object.defineProperty(this, 'deviceId', {
	        enumerable: true,
	        value: deviceId,
	    });
	
	    this.algorithms = [];
	    this.keys = {};
	    this.verified = DeviceVerification.UNVERIFIED;
	    this.unsigned = {};
	}
	
	/**
	 * rehydrate a DeviceInfo from the session store
	 *
	 * @param {object} obj  raw object from session store
	 * @param {string} deviceId id of the device
	 *
	 * @return {module:crypto~DeviceInfo} new DeviceInfo
	 */
	DeviceInfo.fromStorage = function(obj, deviceId) {
	    var res = new DeviceInfo(deviceId);
	    for (var prop in obj) {
	        if (obj.hasOwnProperty(prop)) {
	            res[prop] = obj[prop];
	        }
	    }
	    return res;
	};
	
	/**
	 * Prepare a DeviceInfo for JSON serialisation in the session store
	 *
	 * @return {object} deviceinfo with non-serialised members removed
	 */
	DeviceInfo.prototype.toStorage = function() {
	    return {
	        algorithms: this.algorithms,
	        keys: this.keys,
	        verified: this.verified,
	        unsigned: this.unsigned,
	    };
	};
	
	/**
	 * Get the fingerprint for this device (ie, the Ed25519 key)
	 *
	 * @return {string} base64-encoded fingerprint of this device
	 */
	DeviceInfo.prototype.getFingerprint = function() {
	    return this.keys["ed25519:" + this.deviceId];
	};
	
	/**
	 * Get the identity key for this device (ie, the Curve25519 key)
	 *
	 * @return {string} base64-encoded identity key of this device
	 */
	DeviceInfo.prototype.getIdentityKey = function() {
	    return this.keys["curve25519:" + this.deviceId];
	};
	
	/**
	 * Get the configured display name for this device, if any
	 *
	 * @return {string?} displayname
	 */
	DeviceInfo.prototype.getDisplayName = function() {
	    return this.unsigned.device_display_name || null;
	};
	
	/**
	 * Returns true if this device is blocked
	 *
	 * @return {Boolean} true if blocked
	 */
	DeviceInfo.prototype.isBlocked = function() {
	    return this.verified == DeviceVerification.BLOCKED;
	};
	
	/**
	 * Returns true if this device is verified
	 *
	 * @return {Boolean} true if verified
	 */
	DeviceInfo.prototype.isVerified = function() {
	    return this.verified == DeviceVerification.VERIFIED;
	};
	
	/**
	 * @enum
	 */
	DeviceInfo.DeviceVerification = {
	    VERIFIED: 1,
	    UNVERIFIED: 0,
	    BLOCKED: -1,
	};
	
	var DeviceVerification = DeviceInfo.DeviceVerification;
	
	/** */
	module.exports = DeviceInfo;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * Defines m.olm encryption/decryption
	 *
	 * @module crypto/algorithms/megolm
	 */
	
	var q = __webpack_require__(197);
	
	var utils = __webpack_require__(185);
	var olmlib = __webpack_require__(219);
	var base = __webpack_require__(221);
	
	/**
	 * Megolm encryption implementation
	 *
	 * @constructor
	 * @extends {module:crypto/algorithms/base.EncryptionAlgorithm}
	 *
	 * @param {object} params parameters, as per
	 *     {@link module:crypto/algorithms/base.EncryptionAlgorithm}
	 */
	function MegolmEncryption(params) {
	    base.EncryptionAlgorithm.call(this, params);
	    this._prepPromise = null;
	    this._outboundSessionId = null;
	    this._discardNewSession = false;
	
	    // devices which have joined since we last sent a message.
	    // userId -> {deviceId -> true}, or
	    // userId -> true
	    this._devicesPendingKeyShare = {};
	    this._sharePromise = null;
	}
	utils.inherits(MegolmEncryption, base.EncryptionAlgorithm);
	
	/**
	 * @private
	 *
	 * @param {module:models/room} room
	 *
	 * @return {module:client.Promise} Promise which resolves to the megolm
	 *   sessionId when setup is complete.
	 */
	MegolmEncryption.prototype._ensureOutboundSession = function(room) {
	    var self = this;
	
	    if (this._prepPromise) {
	        // prep already in progress
	        return this._prepPromise;
	    }
	
	    var sessionId = this._outboundSessionId;
	
	    // need to make a brand new session?
	    if (!sessionId) {
	        this._prepPromise = this._prepareNewSession(room).
	            finally(function() {
	                self._prepPromise = null;
	            });
	        return this._prepPromise;
	    }
	
	    if (this._sharePromise) {
	        // key share already in progress
	        return this._sharePromise;
	    }
	
	    // prep already done, but check for new devices
	    var shareMap = this._devicesPendingKeyShare;
	    this._devicesPendingKeyShare = {};
	
	    // check each user is (still) a member of the room
	    for (var userId in shareMap) {
	        if (!shareMap.hasOwnProperty(userId)) {
	            continue;
	        }
	
	        // XXX what about rooms where invitees can see the content?
	        var member = room.getMember(userId);
	        if (member.membership !== "join") {
	            delete shareMap[userId];
	        }
	    }
	
	    this._sharePromise = this._shareKeyWithDevices(
	        sessionId, shareMap
	    ).finally(function() {
	        self._sharePromise = null;
	    }).then(function() {
	        return sessionId;
	    });
	
	    return this._sharePromise;
	};
	
	/**
	 * @private
	 *
	 * @param {module:models/room} room
	 *
	 * @return {module:client.Promise} Promise which resolves to the megolm
	 *   sessionId when setup is complete.
	 */
	MegolmEncryption.prototype._prepareNewSession = function(room) {
	    var session_id = this._olmDevice.createOutboundGroupSession();
	    var key = this._olmDevice.getOutboundGroupSessionKey(session_id);
	
	    this._olmDevice.addInboundGroupSession(
	        this._roomId, this._olmDevice.deviceCurve25519Key, session_id,
	        key.key, {ed25519: this._olmDevice.deviceEd25519Key}
	    );
	
	    // we're going to share the key with all current members of the room,
	    // so we can reset this.
	    this._devicesPendingKeyShare = {};
	
	    var roomMembers = utils.map(room.getJoinedMembers(), function(u) {
	        return u.userId;
	    });
	
	    var shareMap = {};
	    for (var i = 0; i < roomMembers.length; i++) {
	        var userId = roomMembers[i];
	        shareMap[userId] = true;
	    }
	
	    var self = this;
	
	    // TODO: we need to give the user a chance to block any devices or users
	    // before we send them the keys; it's too late to download them here.
	    return this._crypto.downloadKeys(
	        roomMembers, false
	    ).then(function(res) {
	        return self._shareKeyWithDevices(session_id, shareMap);
	    }).then(function() {
	        if (self._discardNewSession) {
	            // we've had cause to reset the session_id since starting this process.
	            // we'll use the current session for any currently pending events, but
	            // don't save it as the current _outboundSessionId, so that new events
	            // will use a new session.
	            console.log("Session generation complete, but discarding");
	        } else {
	            self._outboundSessionId = session_id;
	        }
	        return session_id;
	    }).finally(function() {
	        self._discardNewSession = false;
	    });
	};
	
	/**
	 * @private
	 *
	 * @param {string} session_id
	 *
	 * @param {Object<string, Object<string, boolean>|boolean>} shareMap
	 *    Map from userid to either: true (meaning this is a new user in the room,
	 *    so all of his devices need the keys); or a map from deviceid to true
	 *    (meaning this user has one or more new devices, which need the keys).
	 *
	 * @return {module:client.Promise} Promise which resolves once the key sharing
	 *     message has been sent.
	 */
	MegolmEncryption.prototype._shareKeyWithDevices = function(session_id, shareMap) {
	    var self = this;
	
	    var key = this._olmDevice.getOutboundGroupSessionKey(session_id);
	    var payload = {
	        type: "m.room_key",
	        content: {
	            algorithm: olmlib.MEGOLM_ALGORITHM,
	            room_id: this._roomId,
	            session_id: session_id,
	            session_key: key.key,
	            chain_index: key.chain_index,
	        }
	    };
	
	    // we downloaded the user's device list when they joined the room, or when
	    // the new device announced itself, so there is no need to do so now.
	
	    return self._crypto.ensureOlmSessionsForUsers(
	        utils.keys(shareMap)
	    ).then(function(devicemap) {
	        var contentMap = {};
	        var haveTargets = false;
	
	        for (var userId in devicemap) {
	            if (!devicemap.hasOwnProperty(userId)) {
	                continue;
	            }
	
	            var devicesToShareWith = shareMap[userId];
	            var sessionResults = devicemap[userId];
	
	            for (var deviceId in sessionResults) {
	                if (!sessionResults.hasOwnProperty(deviceId)) {
	                    continue;
	                }
	
	                if (devicesToShareWith === true) {
	                    // all devices
	                } else if (!devicesToShareWith[deviceId]) {
	                    // not a new device
	                    continue;
	                }
	
	                var sessionResult = sessionResults[deviceId];
	                if (!sessionResult.sessionId) {
	                    // no session with this device, probably because there
	                    // were no one-time keys.
	                    //
	                    // we could send them a to_device message anyway, as a
	                    // signal that they have missed out on the key sharing
	                    // message because of the lack of keys, but there's not
	                    // much point in that really; it will mostly serve to clog
	                    // up to_device inboxes.
	                    //
	                    // ensureOlmSessionsForUsers has already done the logging,
	                    // so just skip it.
	                    continue;
	                }
	
	                console.log(
	                    "sharing keys with device " + userId + ":" + deviceId
	                );
	
	                var deviceInfo = sessionResult.device;
	
	                if (!contentMap[userId]) {
	                    contentMap[userId] = {};
	                }
	
	                contentMap[userId][deviceId] =
	                    olmlib.encryptMessageForDevices(
	                        self._deviceId,
	                        self._olmDevice,
	                        [deviceInfo.getIdentityKey()],
	                        payload
	                    );
	                haveTargets = true;
	            }
	        }
	
	        if (!haveTargets) {
	            return q();
	        }
	
	        // TODO: retries
	        return self._baseApis.sendToDevice("m.room.encrypted", contentMap);
	    });
	};
	
	/**
	 * @inheritdoc
	 *
	 * @param {module:models/room} room
	 * @param {string} eventType
	 * @param {object} plaintext event content
	 *
	 * @return {module:client.Promise} Promise which resolves to the new event body
	 */
	MegolmEncryption.prototype.encryptMessage = function(room, eventType, content) {
	    var self = this;
	    return this._ensureOutboundSession(room).then(function(session_id) {
	        var payloadJson = {
	            room_id: self._roomId,
	            type: eventType,
	            content: content
	        };
	
	        var ciphertext = self._olmDevice.encryptGroupMessage(
	            session_id, JSON.stringify(payloadJson)
	        );
	
	        var encryptedContent = {
	            algorithm: olmlib.MEGOLM_ALGORITHM,
	            sender_key: self._olmDevice.deviceCurve25519Key,
	            ciphertext: ciphertext,
	            session_id: session_id,
	             // Include our device ID so that recipients can send us a
	             // m.new_device message if they don't have our session key.
	            device_id: self._deviceId,
	        };
	
	        return encryptedContent;
	    });
	};
	
	/**
	 * @inheritdoc
	 *
	 * @param {module:models/event.MatrixEvent} event  event causing the change
	 * @param {module:models/room-member} member  user whose membership changed
	 * @param {string=} oldMembership  previous membership
	 */
	MegolmEncryption.prototype.onRoomMembership = function(event, member, oldMembership) {
	    var newMembership = member.membership;
	
	    if (newMembership === 'join') {
	        this._onNewRoomMember(member.userId);
	        return;
	    }
	
	    if (newMembership === 'invite' && oldMembership !== 'join') {
	        // we don't (yet) share keys with invited members, so nothing to do yet
	        return;
	    }
	
	    // otherwise we assume the user is leaving, and start a new outbound session.
	    if (this._outboundSessionId) {
	        console.log("Discarding outbound megolm session due to change in " +
	                    "membership of " + member.userId + " (" + oldMembership +
	                    "->" + newMembership + ")");
	        this._outboundSessionId = null;
	    }
	
	    if (this._prepPromise) {
	        console.log("Discarding as-yet-incomplete megolm session due to " +
	                    "change in membership of " + member.userId + " (" +
	                    oldMembership + "->" + newMembership + ")");
	        this._discardNewSession = true;
	    }
	};
	
	/**
	 * handle a new user joining a room
	 *
	 * @param {string} userId   new member
	 */
	MegolmEncryption.prototype._onNewRoomMember = function(userId) {
	    // make sure we have a list of this user's devices. We are happy to use a
	    // cached version here: we assume that if we already have a list of the
	    // user's devices, then we already share an e2e room with them, which means
	    // that they will have announced any new devices via an m.new_device.
	    this._crypto.downloadKeys([userId], false).done();
	
	    // also flag this user up for needing a keyshare.
	    this._devicesPendingKeyShare[userId] = true;
	};
	
	
	/**
	 * @inheritdoc
	 *
	 * @param {string} userId    owner of the device
	 * @param {string} deviceId  deviceId of the device
	 */
	MegolmEncryption.prototype.onNewDevice = function(userId, deviceId) {
	    var d = this._devicesPendingKeyShare[userId];
	
	    if (d === true) {
	        // we already want to share keys with all devices for this user
	        return;
	    }
	
	    if (!d) {
	        this._devicesPendingKeyShare[userId] = d = {};
	    }
	
	    d[deviceId] = true;
	};
	
	
	/**
	 * Megolm decryption implementation
	 *
	 * @constructor
	 * @extends {module:crypto/algorithms/base.DecryptionAlgorithm}
	 *
	 * @param {object} params parameters, as per
	 *     {@link module:crypto/algorithms/base.DecryptionAlgorithm}
	 */
	function MegolmDecryption(params) {
	    base.DecryptionAlgorithm.call(this, params);
	}
	utils.inherits(MegolmDecryption, base.DecryptionAlgorithm);
	
	/**
	 * @inheritdoc
	 *
	 * @param {object} event raw event
	 *
	 * @return {null} The event referred to an unknown megolm session
	 * @return {module:crypto.DecryptionResult} decryption result
	 *
	 * @throws {module:crypto/algorithms/base.DecryptionError} if there is a
	 *   problem decrypting the event
	 */
	MegolmDecryption.prototype.decryptEvent = function(event) {
	    var content = event.content;
	
	    if (!content.sender_key || !content.session_id ||
	        !content.ciphertext
	       ) {
	        throw new base.DecryptionError("Missing fields in input");
	    }
	
	    try {
	        var res = this._olmDevice.decryptGroupMessage(
	            event.room_id, content.sender_key, content.session_id, content.ciphertext
	        );
	        if (res === null) {
	            return null;
	        }
	        return {
	            payload: JSON.parse(res.result),
	            keysClaimed: res.keysClaimed,
	            keysProved: res.keysProved,
	        };
	    } catch (e) {
	        throw new base.DecryptionError(e);
	    }
	};
	
	/**
	 * @inheritdoc
	 *
	 * @param {module:models/event.MatrixEvent} event key event
	 */
	MegolmDecryption.prototype.onRoomKeyEvent = function(event) {
	    console.log("Adding key from ", event);
	    var content = event.getContent();
	
	    if (!content.room_id ||
	        !content.session_id ||
	        !content.session_key
	       ) {
	        console.error("key event is missing fields");
	        return;
	    }
	
	    this._olmDevice.addInboundGroupSession(
	        content.room_id, event.getSenderKey(), content.session_id,
	        content.session_key, event.getKeysClaimed()
	    );
	};
	
	base.registerAlgorithm(
	    olmlib.MEGOLM_ALGORITHM, MegolmEncryption, MegolmDecryption
	);


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	/**
	 * This is an internal module which manages queuing, scheduling and retrying
	 * of requests.
	 * @module scheduler
	 */
	var utils = __webpack_require__(185);
	var q = __webpack_require__(197);
	
	var DEBUG = false;  // set true to enable console logging.
	
	/**
	 * Construct a scheduler for Matrix. Requires
	 * {@link module:scheduler~MatrixScheduler#setProcessFunction} to be provided
	 * with a way of processing events.
	 * @constructor
	 * @param {module:scheduler~retryAlgorithm} retryAlgorithm Optional. The retry
	 * algorithm to apply when determining when to try to send an event again.
	 * Defaults to {@link module:scheduler~MatrixScheduler.RETRY_BACKOFF_RATELIMIT}.
	 * @param {module:scheduler~queueAlgorithm} queueAlgorithm Optional. The queuing
	 * algorithm to apply when determining which events should be sent before the
	 * given event. Defaults to {@link module:scheduler~MatrixScheduler.QUEUE_MESSAGES}.
	 */
	function MatrixScheduler(retryAlgorithm, queueAlgorithm) {
	    this.retryAlgorithm = retryAlgorithm || MatrixScheduler.RETRY_BACKOFF_RATELIMIT;
	    this.queueAlgorithm = queueAlgorithm || MatrixScheduler.QUEUE_MESSAGES;
	    this._queues = {
	        // queueName: [{
	        //  event: MatrixEvent,  // event to send
	        //  defer: Deferred,  // defer to resolve/reject at the END of the retries
	        //  attempts: Number  // number of times we've called processFn
	        // }, ...]
	    };
	    this._activeQueues = [];
	    this._procFn = null;
	}
	
	/**
	 * Retrieve a queue based on an event. The event provided does not need to be in
	 * the queue.
	 * @param {MatrixEvent} event An event to get the queue for.
	 * @return {?Array<MatrixEvent>} A shallow copy of events in the queue or null.
	 * Modifying this array will not modify the list itself. Modifying events in
	 * this array <i>will</i> modify the underlying event in the queue.
	 * @see MatrixScheduler.removeEventFromQueue To remove an event from the queue.
	 */
	MatrixScheduler.prototype.getQueueForEvent = function(event) {
	    var name = this.queueAlgorithm(event);
	    if (!name || !this._queues[name]) {
	        return null;
	    }
	    return utils.map(this._queues[name], function(obj) {
	        return obj.event;
	    });
	};
	
	/**
	 * Remove this event from the queue. The event is equal to another event if they
	 * have the same ID returned from event.getId().
	 * @param {MatrixEvent} event The event to remove.
	 * @return {boolean} True if this event was removed.
	 */
	MatrixScheduler.prototype.removeEventFromQueue = function(event) {
	    var name = this.queueAlgorithm(event);
	    if (!name || !this._queues[name]) {
	        return false;
	    }
	    var removed = false;
	    utils.removeElement(this._queues[name], function(element) {
	        if (element.event.getId() === event.getId()) {
	            removed = true;
	            return true;
	        }
	    });
	    return removed;
	};
	
	
	/**
	 * Set the process function. Required for events in the queue to be processed.
	 * If set after events have been added to the queue, this will immediately start
	 * processing them.
	 * @param {module:scheduler~processFn} fn The function that can process events
	 * in the queue.
	 */
	MatrixScheduler.prototype.setProcessFunction = function(fn) {
	    this._procFn = fn;
	    _startProcessingQueues(this);
	};
	
	/**
	 * Queue an event if it is required and start processing queues.
	 * @param {MatrixEvent} event The event that may be queued.
	 * @return {?Promise} A promise if the event was queued, which will be
	 * resolved or rejected in due time, else null.
	 */
	MatrixScheduler.prototype.queueEvent = function(event) {
	    var queueName = this.queueAlgorithm(event);
	    if (!queueName) {
	        return null;
	    }
	    // add the event to the queue and make a deferred for it.
	    if (!this._queues[queueName]) {
	        this._queues[queueName] = [];
	    }
	    var defer = q.defer();
	    this._queues[queueName].push({
	        event: event,
	        defer: defer,
	        attempts: 0
	    });
	    debuglog(
	        "Queue algorithm dumped event %s into queue '%s'",
	        event.getId(), queueName
	    );
	    _startProcessingQueues(this);
	    return defer.promise;
	};
	
	/**
	 * Retries events up to 4 times using exponential backoff. This produces wait
	 * times of 2, 4, 8, and 16 seconds (30s total) after which we give up. If the
	 * failure was due to a rate limited request, the time specified in the error is
	 * waited before being retried.
	 * @param {MatrixEvent} event
	 * @param {Number} attempts
	 * @param {MatrixError} err
	 * @return {Number}
	 * @see module:scheduler~retryAlgorithm
	 */
	MatrixScheduler.RETRY_BACKOFF_RATELIMIT = function(event, attempts, err) {
	    if (err.httpStatus === 400 || err.httpStatus === 403 || err.httpStatus === 401) {
	        // client error; no amount of retrying with save you now.
	        return -1;
	    }
	    // we ship with browser-request which returns { cors: rejected } when trying
	    // with no connection, so if we match that, give up since they have no conn.
	    if (err.cors === "rejected") {
	        return -1;
	    }
	
	    if (err.name === "M_LIMIT_EXCEEDED") {
	        var waitTime = err.data.retry_after_ms;
	        if (waitTime) {
	            return waitTime;
	        }
	    }
	    if (attempts > 4) {
	        return -1; // give up
	    }
	    return (1000 * Math.pow(2, attempts));
	};
	
	/**
	 * Queues <code>m.room.message</code> events and lets other events continue
	 * concurrently.
	 * @param {MatrixEvent} event
	 * @return {string}
	 * @see module:scheduler~queueAlgorithm
	 */
	MatrixScheduler.QUEUE_MESSAGES = function(event) {
	    if (event.getType() === "m.room.message") {
	        // put these events in the 'message' queue.
	        return "message";
	    }
	    // allow all other events continue concurrently.
	    return null;
	};
	
	function _startProcessingQueues(scheduler) {
	    if (!scheduler._procFn) {
	        return;
	    }
	    // for each inactive queue with events in them
	    utils.forEach(utils.filter(utils.keys(scheduler._queues), function(queueName) {
	        return scheduler._activeQueues.indexOf(queueName) === -1 &&
	                scheduler._queues[queueName].length > 0;
	    }), function(queueName) {
	        // mark the queue as active
	        scheduler._activeQueues.push(queueName);
	        // begin processing the head of the queue
	        debuglog("Spinning up queue: '%s'", queueName);
	        _processQueue(scheduler, queueName);
	    });
	}
	
	function _processQueue(scheduler, queueName) {
	    // get head of queue
	    var obj = _peekNextEvent(scheduler, queueName);
	    if (!obj) {
	        // queue is empty. Mark as inactive and stop recursing.
	        var index = scheduler._activeQueues.indexOf(queueName);
	        if (index >= 0) {
	            scheduler._activeQueues.splice(index, 1);
	        }
	        debuglog("Stopping queue '%s' as it is now empty", queueName);
	        return;
	    }
	    debuglog(
	        "Queue '%s' has %s pending events",
	        queueName, scheduler._queues[queueName].length
	    );
	    // fire the process function and if it resolves, resolve the deferred. Else
	    // invoke the retry algorithm.
	    scheduler._procFn(obj.event).done(function(res) {
	        // remove this from the queue
	        _removeNextEvent(scheduler, queueName);
	        debuglog("Queue '%s' sent event %s", queueName, obj.event.getId());
	        obj.defer.resolve(res);
	        // keep processing
	        _processQueue(scheduler, queueName);
	    }, function(err) {
	        obj.attempts += 1;
	        // ask the retry algorithm when/if we should try again
	        var waitTimeMs = scheduler.retryAlgorithm(obj.event, obj.attempts, err);
	        debuglog(
	            "retry(%s) err=%s event_id=%s waitTime=%s",
	            obj.attempts, err, obj.event.getId(), waitTimeMs
	        );
	        if (waitTimeMs === -1) {  // give up (you quitter!)
	            debuglog(
	                "Queue '%s' giving up on event %s", queueName, obj.event.getId()
	            );
	            // remove this from the queue
	            _removeNextEvent(scheduler, queueName);
	            obj.defer.reject(err);
	            // process next event
	            _processQueue(scheduler, queueName);
	        }
	        else {
	            setTimeout(function() {
	                _processQueue(scheduler, queueName);
	            }, waitTimeMs);
	        }
	    });
	}
	
	function _peekNextEvent(scheduler, queueName) {
	    var queue = scheduler._queues[queueName];
	    if (!utils.isArray(queue)) {
	        return null;
	    }
	    return queue[0];
	}
	
	function _removeNextEvent(scheduler, queueName) {
	    var queue = scheduler._queues[queueName];
	    if (!utils.isArray(queue)) {
	        return null;
	    }
	    return queue.shift();
	}
	
	function debuglog() {
	    if (DEBUG) {
	        console.log.apply(console, arguments);
	    }
	}
	
	/**
	 * The retry algorithm to apply when retrying events. To stop retrying, return
	 * <code>-1</code>. If this event was part of a queue, it will be removed from
	 * the queue.
	 * @callback retryAlgorithm
	 * @param {MatrixEvent} event The event being retried.
	 * @param {Number} attempts The number of failed attempts. This will always be
	 * >= 1.
	 * @param {MatrixError} err The most recent error message received when trying
	 * to send this event.
	 * @return {Number} The number of milliseconds to wait before trying again. If
	 * this is 0, the request will be immediately retried. If this is
	 * <code>-1</code>, the event will be marked as
	 * {@link module:models/event.EventStatus.NOT_SENT} and will not be retried.
	 */
	
	/**
	 * The queuing algorithm to apply to events. This function must be idempotent as
	 * it may be called multiple times with the same event. All queues created are
	 * serviced in a FIFO manner. To send the event ASAP, return <code>null</code>
	 * which will not put this event in a queue. Events that fail to send that form
	 * part of a queue will be removed from the queue and the next event in the
	 * queue will be sent.
	 * @callback queueAlgorithm
	 * @param {MatrixEvent} event The event to be sent.
	 * @return {string} The name of the queue to put the event into. If a queue with
	 * this name does not exist, it will be created. If this is <code>null</code>,
	 * the event is not put into a queue and will be sent concurrently.
	 */
	
	 /**
	 * The function to invoke to process (send) events in the queue.
	 * @callback processFn
	 * @param {MatrixEvent} event The event to send.
	 * @return {Promise} Resolved/rejected depending on the outcome of the request.
	 */
	
	/**
	 * The MatrixScheduler class.
	 */
	module.exports = MatrixScheduler;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2015, 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/**
	 * @module store/session/webstorage
	 */
	
	var utils = __webpack_require__(185);
	
	var DEBUG = false;  // set true to enable console logging.
	var E2E_PREFIX = "session.e2e.";
	
	/**
	 * Construct a web storage session store, capable of storing account keys,
	 * session keys and access tokens.
	 * @constructor
	 * @param {WebStorage} webStore A web storage implementation, e.g.
	 * 'window.localStorage' or 'window.sessionStorage' or a custom implementation.
	 * @throws if the supplied 'store' does not meet the Storage interface of the
	 * WebStorage API.
	 */
	function WebStorageSessionStore(webStore) {
	    this.store = webStore;
	    if (!utils.isFunction(webStore.getItem) ||
	        !utils.isFunction(webStore.setItem) ||
	        !utils.isFunction(webStore.removeItem)) {
	        throw new Error(
	            "Supplied webStore does not meet the WebStorage API interface"
	        );
	    }
	}
	
	WebStorageSessionStore.prototype = {
	
	    /**
	     * Store the end to end account for the logged-in user.
	     * @param {string} account Base64 encoded account.
	     */
	    storeEndToEndAccount: function(account) {
	        this.store.setItem(KEY_END_TO_END_ACCOUNT, account);
	    },
	
	    /**
	     * Load the end to end account for the logged-in user.
	     * @return {?string} Base64 encoded account.
	     */
	    getEndToEndAccount: function() {
	        return this.store.getItem(KEY_END_TO_END_ACCOUNT);
	    },
	
	    /**
	     * Store a flag indicating that we have announced the new device.
	     */
	    setDeviceAnnounced: function() {
	        this.store.setItem(KEY_END_TO_END_ANNOUNCED, "true");
	    },
	
	    /**
	     * Check if the "device announced" flag is set
	     *
	     * @return {boolean} true if the "device announced" flag has been set.
	     */
	    getDeviceAnnounced: function() {
	        return this.store.getItem(KEY_END_TO_END_ANNOUNCED) == "true";
	    },
	
	    /**
	     * Stores the known devices for a user.
	     * @param {string} userId The user's ID.
	     * @param {object} devices A map from device ID to keys for the device.
	     */
	    storeEndToEndDevicesForUser: function(userId, devices) {
	        setJsonItem(this.store, keyEndToEndDevicesForUser(userId), devices);
	    },
	
	    /**
	     * Retrieves the known devices for a user.
	     * @param {string} userId The user's ID.
	     * @return {object} A map from device ID to keys for the device.
	     */
	    getEndToEndDevicesForUser: function(userId)  {
	        return getJsonItem(this.store, keyEndToEndDevicesForUser(userId));
	    },
	
	    /**
	     * Store a session between the logged-in user and another device
	     * @param {string} deviceKey The public key of the other device.
	     * @param {string} sessionId The ID for this end-to-end session.
	     * @param {string} session Base64 encoded end-to-end session.
	     */
	    storeEndToEndSession: function(deviceKey, sessionId, session) {
	        var sessions = this.getEndToEndSessions(deviceKey) || {};
	        sessions[sessionId] = session;
	        setJsonItem(
	            this.store, keyEndToEndSessions(deviceKey), sessions
	        );
	    },
	
	    /**
	     * Retrieve the end-to-end sessions between the logged-in user and another
	     * device.
	     * @param {string} deviceKey The public key of the other device.
	     * @return {object} A map from sessionId to Base64 end-to-end session.
	     */
	    getEndToEndSessions: function(deviceKey) {
	        return getJsonItem(this.store, keyEndToEndSessions(deviceKey));
	    },
	
	    getEndToEndInboundGroupSession: function(senderKey, sessionId) {
	        var key = keyEndToEndInboundGroupSession(senderKey, sessionId);
	        return this.store.getItem(key);
	    },
	
	    storeEndToEndInboundGroupSession: function(senderKey, sessionId, pickledSession) {
	        var key = keyEndToEndInboundGroupSession(senderKey, sessionId);
	        return this.store.setItem(key, pickledSession);
	    },
	
	    /**
	     * Store the end-to-end state for a room.
	     * @param {string} roomId The room's ID.
	     * @param {object} roomInfo The end-to-end info for the room.
	     */
	    storeEndToEndRoom: function(roomId, roomInfo) {
	        setJsonItem(this.store, keyEndToEndRoom(roomId), roomInfo);
	    },
	
	    /**
	     * Get the end-to-end state for a room
	     * @param {string} roomId The room's ID.
	     * @return {object} The end-to-end info for the room.
	     */
	    getEndToEndRoom: function(roomId) {
	        return getJsonItem(this.store, keyEndToEndRoom(roomId));
	    }
	};
	
	var KEY_END_TO_END_ACCOUNT = E2E_PREFIX + "account";
	var KEY_END_TO_END_ANNOUNCED = E2E_PREFIX + "announced";
	
	function keyEndToEndDevicesForUser(userId) {
	    return E2E_PREFIX + "devices/" + userId;
	}
	
	function keyEndToEndSessions(deviceKey) {
	    return E2E_PREFIX + "sessions/" + deviceKey;
	}
	
	function keyEndToEndInboundGroupSession(senderKey, sessionId) {
	    return E2E_PREFIX + "inboundgroupsessions/" + senderKey + "/" + sessionId;
	}
	
	function keyEndToEndRoom(roomId) {
	    return E2E_PREFIX + "rooms/" + roomId;
	}
	
	function getJsonItem(store, key) {
	    try {
	        return JSON.parse(store.getItem(key));
	    }
	    catch (e) {
	        debuglog("Failed to get key %s: %s", key, e);
	        debuglog(e.stack);
	    }
	    return null;
	}
	
	function setJsonItem(store, key, val) {
	    store.setItem(key, JSON.stringify(val));
	}
	
	function debuglog() {
	    if (DEBUG) {
	        console.log.apply(console, arguments);
	    }
	}
	
	/** */
	module.exports = WebStorageSessionStore;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright 2016 OpenMarket Ltd
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	"use strict";
	
	/** @module timeline-window */
	
	var q = __webpack_require__(197);
	var EventTimeline = __webpack_require__(192);
	
	/**
	 * @private
	 */
	var DEBUG = false;
	
	/**
	 * @private
	 */
	var debuglog = DEBUG ? console.log.bind(console) : function() {};
	
	/**
	 * the number of times we ask the server for more events before giving up
	 *
	 * @private
	 */
	var DEFAULT_PAGINATE_LOOP_LIMIT = 5;
	
	/**
	 * Construct a TimelineWindow.
	 *
	 * <p>This abstracts the separate timelines in a Matrix {@link
	 * module:models/room|Room} into a single iterable thing. It keeps track of
	 * the start and endpoints of the window, which can be advanced with the help
	 * of pagination requests.
	 *
	 * <p>Before the window is useful, it must be initialised by calling {@link
	 * module:timeline-window~TimelineWindow#load|load}.
	 *
	 * <p>Note that the window will not automatically extend itself when new events
	 * are received from /sync; you should arrange to call {@link
	 * module:timeline-window~TimelineWindow#paginate|paginate} on {@link
	 * module:client~MatrixClient.event:"Room.timeline"|Room.timeline} events.
	 *
	 * @param {MatrixClient} client   MatrixClient to be used for context/pagination
	 *   requests.
	 *
	 * @param {EventTimelineSet} timelineSet  The timelineSet to track
	 *
	 * @param {Object} [opts] Configuration options for this window
	 *
	 * @param {number} [opts.windowLimit = 1000] maximum number of events to keep
	 *    in the window. If more events are retrieved via pagination requests,
	 *    excess events will be dropped from the other end of the window.
	 *
	 * @constructor
	 */
	function TimelineWindow(client, timelineSet, opts) {
	    opts = opts || {};
	    this._client = client;
	    this._timelineSet = timelineSet;
	
	    // these will be TimelineIndex objects; they delineate the 'start' and
	    // 'end' of the window.
	    //
	    // _start.index is inclusive; _end.index is exclusive.
	    this._start = null;
	    this._end = null;
	
	    this._eventCount = 0;
	    this._windowLimit = opts.windowLimit || 1000;
	}
	
	/**
	 * Initialise the window to point at a given event, or the live timeline
	 *
	 * @param {string} [initialEventId]   If given, the window will contain the
	 *    given event
	 * @param {number} [initialWindowSize = 20]   Size of the initial window
	 *
	 * @return {module:client.Promise}
	 */
	TimelineWindow.prototype.load = function(initialEventId, initialWindowSize) {
	    var self = this;
	    initialWindowSize = initialWindowSize || 20;
	
	    // given an EventTimeline, and an event index within it, initialise our
	    // fields so that the event in question is in the middle of the window.
	    var initFields = function(timeline, eventIndex) {
	        var endIndex = Math.min(timeline.getEvents().length,
	                                eventIndex + Math.ceil(initialWindowSize / 2));
	        var startIndex = Math.max(0, endIndex - initialWindowSize);
	        self._start = new TimelineIndex(timeline, startIndex - timeline.getBaseIndex());
	        self._end = new TimelineIndex(timeline, endIndex - timeline.getBaseIndex());
	        self._eventCount = endIndex - startIndex;
	    };
	
	    // We avoid delaying the resolution of the promise by a reactor tick if
	    // we already have the data we need, which is important to keep room-switching
	    // feeling snappy.
	    //
	    // TODO: ideally we'd spot getEventTimeline returning a resolved promise and
	    // skip straight to the find-event loop.
	    if (initialEventId) {
	        return this._client.getEventTimeline(this._timelineSet, initialEventId)
	            .then(function(tl) {
	                // make sure that our window includes the event
	                for (var i = 0; i < tl.getEvents().length; i++) {
	                    if (tl.getEvents()[i].getId() == initialEventId) {
	                        initFields(tl, i);
	                        return;
	                    }
	                }
	                throw new Error("getEventTimeline result didn't include requested event");
	            });
	    } else {
	        // start with the most recent events
	        var tl = this._timelineSet.getLiveTimeline();
	        initFields(tl, tl.getEvents().length);
	        return q();
	    }
	};
	
	/**
	 * Check if this window can be extended
	 *
	 * <p>This returns true if we either have more events, or if we have a
	 * pagination token which means we can paginate in that direction. It does not
	 * necessarily mean that there are more events available in that direction at
	 * this time.
	 *
	 * @param {string} direction   EventTimeline.BACKWARDS to check if we can
	 *   paginate backwards; EventTimeline.FORWARDS to check if we can go forwards
	 *
	 * @return {boolean} true if we can paginate in the given direction
	 */
	TimelineWindow.prototype.canPaginate = function(direction) {
	    var tl;
	    if (direction == EventTimeline.BACKWARDS) {
	        tl = this._start;
	    } else if (direction == EventTimeline.FORWARDS) {
	        tl = this._end;
	    } else {
	        throw new Error("Invalid direction '" + direction + "'");
	    }
	
	    if (!tl) {
	        debuglog("TimelineWindow: no timeline yet");
	        return false;
	    }
	
	    if (direction == EventTimeline.BACKWARDS) {
	        if (tl.index > tl.minIndex()) { return true; }
	    } else {
	        if (tl.index < tl.maxIndex()) { return true; }
	    }
	
	    return Boolean(tl.timeline.getNeighbouringTimeline(direction) ||
	                   tl.timeline.getPaginationToken(direction));
	};
	
	/**
	 * Attempt to extend the window
	 *
	 * @param {string} direction   EventTimeline.BACKWARDS to extend the window
	 *    backwards (towards older events); EventTimeline.FORWARDS to go forwards.
	 *
	 * @param {number} size   number of events to try to extend by. If fewer than this
	 *    number are immediately available, then we return immediately rather than
	 *    making an API call.
	 *
	 * @param {boolean} [makeRequest = true] whether we should make API calls to
	 *    fetch further events if we don't have any at all. (This has no effect if
	 *    the room already knows about additional events in the relevant direction,
	 *    even if there are fewer than 'size' of them, as we will just return those
	 *    we already know about.)
	 *
	 * @param {number} [requestLimit = 5] limit for the number of API requests we
	 *    should make.
	 *
	 * @return {module:client.Promise} Resolves to a boolean which is true if more events
	 *    were successfully retrieved.
	 */
	TimelineWindow.prototype.paginate = function(direction, size, makeRequest,
	                                             requestLimit) {
	    // Either wind back the message cap (if there are enough events in the
	    // timeline to do so), or fire off a pagination request.
	
	    if (makeRequest === undefined) {
	        makeRequest = true;
	    }
	
	    if (requestLimit === undefined) {
	        requestLimit = DEFAULT_PAGINATE_LOOP_LIMIT;
	    }
	
	    var tl;
	    if (direction == EventTimeline.BACKWARDS) {
	        tl = this._start;
	    } else if (direction == EventTimeline.FORWARDS) {
	        tl = this._end;
	    } else {
	        throw new Error("Invalid direction '" + direction + "'");
	    }
	
	    if (!tl) {
	        debuglog("TimelineWindow: no timeline yet");
	        return q(false);
	    }
	
	    if (tl.pendingPaginate) {
	        return tl.pendingPaginate;
	    }
	
	    // try moving the cap
	    var count = (direction == EventTimeline.BACKWARDS) ?
	        tl.retreat(size) : tl.advance(size);
	
	    if (count) {
	        this._eventCount += count;
	        debuglog("TimelineWindow: increased cap by " + count +
	                 " (now " + this._eventCount + ")");
	        // remove some events from the other end, if necessary
	        var excess = this._eventCount - this._windowLimit;
	        if (excess > 0) {
	            this._unpaginate(excess, direction != EventTimeline.BACKWARDS);
	        }
	        return q(true);
	    }
	
	    if (!makeRequest || requestLimit === 0) {
	        // todo: should we return something different to indicate that there
	        // might be more events out there, but we haven't found them yet?
	        return q(false);
	    }
	
	    // try making a pagination request
	    var token = tl.timeline.getPaginationToken(direction);
	    if (!token) {
	        debuglog("TimelineWindow: no token");
	        return q(false);
	    }
	
	    debuglog("TimelineWindow: starting request");
	    var self = this;
	
	    var prom = this._client.paginateEventTimeline(tl.timeline, {
	        backwards: direction == EventTimeline.BACKWARDS,
	        limit: size
	    }).finally(function() {
	        tl.pendingPaginate = null;
	    }).then(function(r) {
	        debuglog("TimelineWindow: request completed with result " + r);
	        if (!r) {
	            // end of timeline
	            return false;
	        }
	
	        // recurse to advance the index into the results.
	        //
	        // If we don't get any new events, we want to make sure we keep asking
	        // the server for events for as long as we have a valid pagination
	        // token. In particular, we want to know if we've actually hit the
	        // start of the timeline, or if we just happened to know about all of
	        // the events thanks to https://matrix.org/jira/browse/SYN-645.
	        //
	        // On the other hand, we necessarily want to wait forever for the
	        // server to make its mind up about whether there are other events,
	        // because it gives a bad user experience
	        // (https://github.com/vector-im/vector-web/issues/1204).
	        return self.paginate(direction, size, true, requestLimit - 1);
	    });
	    tl.pendingPaginate = prom;
	    return prom;
	};
	
	
	/**
	 * Trim the window to the windowlimit
	 *
	 * @param {number}  delta           number of events to remove from the timeline
	 * @param {boolean} startOfTimeline if events should be removed from the start
	 *     of the timeline.
	 *
	 * @private
	 */
	TimelineWindow.prototype._unpaginate = function(delta, startOfTimeline) {
	    var tl = startOfTimeline ? this._start : this._end;
	
	    // sanity-check the delta
	    if (delta > this._eventCount || delta < 0) {
	        throw new Error("Attemting to unpaginate " + delta + " events, but " +
	                        "only have " + this._eventCount + " in the timeline");
	    }
	
	    while (delta > 0) {
	        var count = startOfTimeline ? tl.advance(delta) : tl.retreat(delta);
	        if (count <= 0) {
	            // sadness. This shouldn't be possible.
	            throw new Error(
	                "Unable to unpaginate any further, but still have " +
	                    this._eventCount + " events");
	        }
	
	        delta -= count;
	        this._eventCount -= count;
	        debuglog("TimelineWindow.unpaginate: dropped " + count +
	                 " (now " + this._eventCount + ")");
	    }
	};
	
	
	/**
	 * Get a list of the events currently in the window
	 *
	 * @return {MatrixEvent[]} the events in the window
	 */
	TimelineWindow.prototype.getEvents = function() {
	    if (!this._start) {
	        // not yet loaded
	        return [];
	    }
	
	    var result = [];
	
	    // iterate through each timeline between this._start and this._end
	    // (inclusive).
	    var timeline = this._start.timeline;
	    while (true) {
	        var events = timeline.getEvents();
	
	        // For the first timeline in the chain, we want to start at
	        // this._start.index. For the last timeline in the chain, we want to
	        // stop before this._end.index. Otherwise, we want to copy all of the
	        // events in the timeline.
	        //
	        // (Note that both this._start.index and this._end.index are relative
	        // to their respective timelines' BaseIndex).
	        //
	        var startIndex = 0, endIndex = events.length;
	        if (timeline === this._start.timeline) {
	            startIndex = this._start.index + timeline.getBaseIndex();
	        }
	        if (timeline === this._end.timeline) {
	            endIndex = this._end.index + timeline.getBaseIndex();
	        }
	
	        for (var i = startIndex; i < endIndex; i++) {
	            result.push(events[i]);
	        }
	
	        // if we're not done, iterate to the next timeline.
	        if (timeline === this._end.timeline) {
	            break;
	        } else {
	            timeline = timeline.getNeighbouringTimeline(EventTimeline.FORWARDS);
	        }
	    }
	
	    return result;
	};
	
	
	/**
	 * a thing which contains a timeline reference, and an index into it.
	 *
	 * @constructor
	 * @param {EventTimeline} timeline
	 * @param {number} index
	 * @private
	 */
	function TimelineIndex(timeline, index) {
	    this.timeline = timeline;
	
	    // the indexes are relative to BaseIndex, so could well be negative.
	    this.index = index;
	}
	
	/**
	 * @return {number} the minimum possible value for the index in the current
	 *    timeline
	 */
	TimelineIndex.prototype.minIndex = function() {
	    return this.timeline.getBaseIndex() * -1;
	};
	
	/**
	 * @return {number} the maximum possible value for the index in the current
	 *    timeline (exclusive - ie, it actually returns one more than the index
	 *    of the last element).
	 */
	TimelineIndex.prototype.maxIndex = function() {
	    return this.timeline.getEvents().length - this.timeline.getBaseIndex();
	};
	
	/**
	 * Try move the index forward, or into the neighbouring timeline
	 *
	 * @param {number} delta  number of events to advance by
	 * @return {number} number of events successfully advanced by
	 */
	TimelineIndex.prototype.advance = function(delta) {
	    if (!delta) {
	        return 0;
	    }
	
	    // first try moving the index in the current timeline. See if there is room
	    // to do so.
	    var cappedDelta;
	    if (delta < 0) {
	        // we want to wind the index backwards.
	        //
	        // (this.minIndex() - this.index) is a negative number whose magnitude
	        // is the amount of room we have to wind back the index in the current
	        // timeline. We cap delta to this quantity.
	        cappedDelta = Math.max(delta, this.minIndex() - this.index);
	        if (cappedDelta < 0) {
	            this.index += cappedDelta;
	            return cappedDelta;
	        }
	    } else {
	        // we want to wind the index forwards.
	        //
	        // (this.maxIndex() - this.index) is a (positive) number whose magnitude
	        // is the amount of room we have to wind forward the index in the current
	        // timeline. We cap delta to this quantity.
	        cappedDelta = Math.min(delta, this.maxIndex() - this.index);
	        if (cappedDelta > 0) {
	            this.index += cappedDelta;
	            return cappedDelta;
	        }
	    }
	
	    // the index is already at the start/end of the current timeline.
	    //
	    // next see if there is a neighbouring timeline to switch to.
	    var neighbour = this.timeline.getNeighbouringTimeline(
	        delta < 0 ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS);
	    if (neighbour) {
	        this.timeline = neighbour;
	        if (delta < 0) {
	            this.index = this.maxIndex();
	        } else {
	            this.index = this.minIndex();
	        }
	
	        debuglog("paginate: switched to new neighbour");
	
	        // recurse, using the next timeline
	        return this.advance(delta);
	    }
	
	    return 0;
	};
	
	/**
	 * Try move the index backwards, or into the neighbouring timeline
	 *
	 * @param {number} delta  number of events to retreat by
	 * @return {number} number of events successfully retreated by
	 */
	TimelineIndex.prototype.retreat = function(delta) {
	    return this.advance(delta * -1) * -1;
	};
	
	/**
	 * The TimelineWindow class.
	 */
	module.exports.TimelineWindow = TimelineWindow;
	
	/**
	 * The TimelineIndex class. exported here for unit testing.
	 */
	module.exports.TimelineIndex = TimelineIndex;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Browser Request
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	
	// UMD HEADER START 
	(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like enviroments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.returnExports = factory();
	  }
	}(this, function () {
	// UMD HEADER END
	
	var XHR = XMLHttpRequest
	if (!XHR) throw new Error('missing XMLHttpRequest')
	request.log = {
	  'trace': noop, 'debug': noop, 'info': noop, 'warn': noop, 'error': noop
	}
	
	var DEFAULT_TIMEOUT = 3 * 60 * 1000 // 3 minutes
	
	//
	// request
	//
	
	function request(options, callback) {
	  // The entry-point to the API: prep the options object and pass the real work to run_xhr.
	  if(typeof callback !== 'function')
	    throw new Error('Bad callback given: ' + callback)
	
	  if(!options)
	    throw new Error('No options given')
	
	  var options_onResponse = options.onResponse; // Save this for later.
	
	  if(typeof options === 'string')
	    options = {'uri':options};
	  else
	    options = JSON.parse(JSON.stringify(options)); // Use a duplicate for mutating.
	
	  options.onResponse = options_onResponse // And put it back.
	
	  if (options.verbose) request.log = getLogger();
	
	  if(options.url) {
	    options.uri = options.url;
	    delete options.url;
	  }
	
	  if(!options.uri && options.uri !== "")
	    throw new Error("options.uri is a required argument");
	
	  if(typeof options.uri != "string")
	    throw new Error("options.uri must be a string");
	
	  var unsupported_options = ['proxy', '_redirectsFollowed', 'maxRedirects', 'followRedirect']
	  for (var i = 0; i < unsupported_options.length; i++)
	    if(options[ unsupported_options[i] ])
	      throw new Error("options." + unsupported_options[i] + " is not supported")
	
	  options.callback = callback
	  options.method = options.method || 'GET';
	  options.headers = options.headers || {};
	  options.body    = options.body || null
	  options.timeout = options.timeout || request.DEFAULT_TIMEOUT
	
	  if(options.headers.host)
	    throw new Error("Options.headers.host is not supported");
	
	  if(options.json) {
	    options.headers.accept = options.headers.accept || 'application/json'
	    if(options.method !== 'GET')
	      options.headers['content-type'] = 'application/json'
	
	    if(typeof options.json !== 'boolean')
	      options.body = JSON.stringify(options.json)
	    else if(typeof options.body !== 'string')
	      options.body = JSON.stringify(options.body)
	  }
	  
	  //BEGIN QS Hack
	  var serialize = function(obj) {
	    var str = [];
	    for(var p in obj)
	      if (obj.hasOwnProperty(p)) {
	        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
	      }
	    return str.join("&");
	  }
	  
	  if(options.qs){
	    var qs = (typeof options.qs == 'string')? options.qs : serialize(options.qs);
	    if(options.uri.indexOf('?') !== -1){ //no get params
	        options.uri = options.uri+'&'+qs;
	    }else{ //existing get params
	        options.uri = options.uri+'?'+qs;
	    }
	  }
	  //END QS Hack
	  
	  //BEGIN FORM Hack
	  var multipart = function(obj) {
	    //todo: support file type (useful?)
	    var result = {};
	    result.boundry = '-------------------------------'+Math.floor(Math.random()*1000000000);
	    var lines = [];
	    for(var p in obj){
	        if (obj.hasOwnProperty(p)) {
	            lines.push(
	                '--'+result.boundry+"\n"+
	                'Content-Disposition: form-data; name="'+p+'"'+"\n"+
	                "\n"+
	                obj[p]+"\n"
	            );
	        }
	    }
	    lines.push( '--'+result.boundry+'--' );
	    result.body = lines.join('');
	    result.length = result.body.length;
	    result.type = 'multipart/form-data; boundary='+result.boundry;
	    return result;
	  }
	  
	  if(options.form){
	    if(typeof options.form == 'string') throw('form name unsupported');
	    if(options.method === 'POST'){
	        var encoding = (options.encoding || 'application/x-www-form-urlencoded').toLowerCase();
	        options.headers['content-type'] = encoding;
	        switch(encoding){
	            case 'application/x-www-form-urlencoded':
	                options.body = serialize(options.form).replace(/%20/g, "+");
	                break;
	            case 'multipart/form-data':
	                var multi = multipart(options.form);
	                //options.headers['content-length'] = multi.length;
	                options.body = multi.body;
	                options.headers['content-type'] = multi.type;
	                break;
	            default : throw new Error('unsupported encoding:'+encoding);
	        }
	    }
	  }
	  //END FORM Hack
	
	  // If onResponse is boolean true, call back immediately when the response is known,
	  // not when the full request is complete.
	  options.onResponse = options.onResponse || noop
	  if(options.onResponse === true) {
	    options.onResponse = callback
	    options.callback = noop
	  }
	
	  // XXX Browsers do not like this.
	  //if(options.body)
	  //  options.headers['content-length'] = options.body.length;
	
	  // HTTP basic authentication
	  if(!options.headers.authorization && options.auth)
	    options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);
	
	  return run_xhr(options)
	}
	
	var req_seq = 0
	function run_xhr(options) {
	  var xhr = new XHR
	    , timed_out = false
	    , is_cors = is_crossDomain(options.uri)
	    , supports_cors = ('withCredentials' in xhr)
	
	  req_seq += 1
	  xhr.seq_id = req_seq
	  xhr.id = req_seq + ': ' + options.method + ' ' + options.uri
	  xhr._id = xhr.id // I know I will type "_id" from habit all the time.
	
	  if(is_cors && !supports_cors) {
	    var cors_err = new Error('Browser does not support cross-origin request: ' + options.uri)
	    cors_err.cors = 'unsupported'
	    return options.callback(cors_err, xhr)
	  }
	
	  xhr.timeoutTimer = setTimeout(too_late, options.timeout)
	  function too_late() {
	    timed_out = true
	    var er = new Error('ETIMEDOUT')
	    er.code = 'ETIMEDOUT'
	    er.duration = options.timeout
	
	    request.log.error('Timeout', { 'id':xhr._id, 'milliseconds':options.timeout })
	    return options.callback(er, xhr)
	  }
	
	  // Some states can be skipped over, so remember what is still incomplete.
	  var did = {'response':false, 'loading':false, 'end':false}
	
	  xhr.onreadystatechange = on_state_change
	  xhr.open(options.method, options.uri, true) // asynchronous
	  if(is_cors)
	    xhr.withCredentials = !! options.withCredentials
	  xhr.send(options.body)
	  return xhr
	
	  function on_state_change(event) {
	    if(timed_out)
	      return request.log.debug('Ignoring timed out state change', {'state':xhr.readyState, 'id':xhr.id})
	
	    request.log.debug('State change', {'state':xhr.readyState, 'id':xhr.id, 'timed_out':timed_out})
	
	    if(xhr.readyState === XHR.OPENED) {
	      request.log.debug('Request started', {'id':xhr.id})
	      for (var key in options.headers)
	        xhr.setRequestHeader(key, options.headers[key])
	    }
	
	    else if(xhr.readyState === XHR.HEADERS_RECEIVED)
	      on_response()
	
	    else if(xhr.readyState === XHR.LOADING) {
	      on_response()
	      on_loading()
	    }
	
	    else if(xhr.readyState === XHR.DONE) {
	      on_response()
	      on_loading()
	      on_end()
	    }
	  }
	
	  function on_response() {
	    if(did.response)
	      return
	
	    did.response = true
	    request.log.debug('Got response', {'id':xhr.id, 'status':xhr.status})
	    clearTimeout(xhr.timeoutTimer)
	    xhr.statusCode = xhr.status // Node request compatibility
	
	    // Detect failed CORS requests.
	    if(is_cors && xhr.statusCode == 0) {
	      var cors_err = new Error('CORS request rejected: ' + options.uri)
	      cors_err.cors = 'rejected'
	
	      // Do not process this request further.
	      did.loading = true
	      did.end = true
	
	      return options.callback(cors_err, xhr)
	    }
	
	    options.onResponse(null, xhr)
	  }
	
	  function on_loading() {
	    if(did.loading)
	      return
	
	    did.loading = true
	    request.log.debug('Response body loading', {'id':xhr.id})
	    // TODO: Maybe simulate "data" events by watching xhr.responseText
	  }
	
	  function on_end() {
	    if(did.end)
	      return
	
	    did.end = true
	    request.log.debug('Request done', {'id':xhr.id})
	
	    xhr.body = xhr.responseText
	    if(options.json) {
	      try        { xhr.body = JSON.parse(xhr.responseText) }
	      catch (er) { return options.callback(er, xhr)        }
	    }
	
	    options.callback(null, xhr, xhr.body)
	  }
	
	} // request
	
	request.withCredentials = false;
	request.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;
	
	//
	// defaults
	//
	
	request.defaults = function(options, requester) {
	  var def = function (method) {
	    var d = function (params, callback) {
	      if(typeof params === 'string')
	        params = {'uri': params};
	      else {
	        params = JSON.parse(JSON.stringify(params));
	      }
	      for (var i in options) {
	        if (params[i] === undefined) params[i] = options[i]
	      }
	      return method(params, callback)
	    }
	    return d
	  }
	  var de = def(request)
	  de.get = def(request.get)
	  de.post = def(request.post)
	  de.put = def(request.put)
	  de.head = def(request.head)
	  return de
	}
	
	//
	// HTTP method shortcuts
	//
	
	var shortcuts = [ 'get', 'put', 'post', 'head' ];
	shortcuts.forEach(function(shortcut) {
	  var method = shortcut.toUpperCase();
	  var func   = shortcut.toLowerCase();
	
	  request[func] = function(opts) {
	    if(typeof opts === 'string')
	      opts = {'method':method, 'uri':opts};
	    else {
	      opts = JSON.parse(JSON.stringify(opts));
	      opts.method = method;
	    }
	
	    var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));
	    return request.apply(this, args);
	  }
	})
	
	//
	// CouchDB shortcut
	//
	
	request.couch = function(options, callback) {
	  if(typeof options === 'string')
	    options = {'uri':options}
	
	  // Just use the request API to do JSON.
	  options.json = true
	  if(options.body)
	    options.json = options.body
	  delete options.body
	
	  callback = callback || noop
	
	  var xhr = request(options, couch_handler)
	  return xhr
	
	  function couch_handler(er, resp, body) {
	    if(er)
	      return callback(er, resp, body)
	
	    if((resp.statusCode < 200 || resp.statusCode > 299) && body.error) {
	      // The body is a Couch JSON object indicating the error.
	      er = new Error('CouchDB error: ' + (body.error.reason || body.error.error))
	      for (var key in body)
	        er[key] = body[key]
	      return callback(er, resp, body);
	    }
	
	    return callback(er, resp, body);
	  }
	}
	
	//
	// Utility
	//
	
	function noop() {}
	
	function getLogger() {
	  var logger = {}
	    , levels = ['trace', 'debug', 'info', 'warn', 'error']
	    , level, i
	
	  for(i = 0; i < levels.length; i++) {
	    level = levels[i]
	
	    logger[level] = noop
	    if(typeof console !== 'undefined' && console && console[level])
	      logger[level] = formatted(console, level)
	  }
	
	  return logger
	}
	
	function formatted(obj, method) {
	  return formatted_logger
	
	  function formatted_logger(str, context) {
	    if(typeof context === 'object')
	      str += ' ' + JSON.stringify(context)
	
	    return obj[method].call(obj, str)
	  }
	}
	
	// Return whether a URL is a cross-domain request.
	function is_crossDomain(url) {
	  var rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/
	
	  // jQuery #8138, IE may throw an exception when accessing
	  // a field from window.location if document.domain has been set
	  var ajaxLocation
	  try { ajaxLocation = location.href }
	  catch (e) {
	    // Use the href attribute of an A element since IE will modify it given document.location
	    ajaxLocation = document.createElement( "a" );
	    ajaxLocation.href = "";
	    ajaxLocation = ajaxLocation.href;
	  }
	
	  var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []
	    , parts = rurl.exec(url.toLowerCase() )
	
	  var result = !!(
	    parts &&
	    (  parts[1] != ajaxLocParts[1]
	    || parts[2] != ajaxLocParts[2]
	    || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))
	    )
	  )
	
	  //console.debug('is_crossDomain('+url+') -> ' + result)
	  return result
	}
	
	// MIT License from http://phpjs.org/functions/base64_encode:358
	function b64_enc (data) {
	    // Encodes string using MIME base64 algorithm
	    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc="", tmp_arr = [];
	
	    if (!data) {
	        return data;
	    }
	
	    // assume utf8 data
	    // data = this.utf8_encode(data+'');
	
	    do { // pack three octets into four hexets
	        o1 = data.charCodeAt(i++);
	        o2 = data.charCodeAt(i++);
	        o3 = data.charCodeAt(i++);
	
	        bits = o1<<16 | o2<<8 | o3;
	
	        h1 = bits>>18 & 0x3f;
	        h2 = bits>>12 & 0x3f;
	        h3 = bits>>6 & 0x3f;
	        h4 = bits & 0x3f;
	
	        // use hexets to index into b64, and append result to encoded string
	        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
	    } while (i < data.length);
	
	    enc = tmp_arr.join('');
	
	    switch (data.length % 3) {
	        case 1:
	            enc = enc.slice(0, -2) + '==';
	        break;
	        case 2:
	            enc = enc.slice(0, -1) + '=';
	        break;
	    }
	
	    return enc;
	}
	    return request;
	//UMD FOOTER START
	}));
	//UMD FOOTER END


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(20);
	var Tweet = __webpack_require__(178);
	
	module.exports = React.createClass({
	  displayName: 'exports',
	
	  render: function render() {
	    return React.createElement(Tweet, { tweetData: this.props.tweet, store: this.props.store });
	  }
	});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(20);
	var Conversation = __webpack_require__(229);
	var TweetContainer = __webpack_require__(177);
	
	module.exports = React.createClass({
	  displayName: 'exports',
	
	  getInitialState: function getInitialState() {
	    return { scene: this.props.scene };
	  },
	  componentDidMount: function componentDidMount() {
	    var self = this;
	    this.props.store.subscribe(function () {
	      console.log("state update");
	      self.setState({ scene: self.props.store.getState().scene });
	    });
	  },
	
	  render: function render() {
	    var scene = React.createElement(
	      'div',
	      null,
	      'Empty Scene'
	    );
	    console.log(this.state.scene);
	    if (this.state && this.state.scene) {
	      if (this.state.scene == "conversation") {
	        scene = React.createElement(Conversation, null);
	      }
	      if (this.state.scene == "container") {
	        scene = React.createElement(TweetContainer, { store: this.props.store });
	      }
	    }
	    return scene;
	  }
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, process, setImmediate) {/*
	 Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>
	 Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>
	 Copyright (c) 2014 Daniel Wirtz <dcode@dcode.io>
	
	 Redistribution and use in source and binary forms, with or without
	 modification, are permitted provided that the following conditions
	 are met:
	 1. Redistributions of source code must retain the above copyright
	 notice, this list of conditions and the following disclaimer.
	 2. Redistributions in binary form must reproduce the above copyright
	 notice, this list of conditions and the following disclaimer in the
	 documentation and/or other materials provided with the distribution.
	 3. The name of the author may not be used to endorse or promote products
	 derived from this software without specific prior written permission.
	
	 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
	 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
	 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
	 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	/**
	 * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
	 * Released under the Apache License, Version 2.0
	 * see: https://github.com/dcodeIO/bcrypt.js for details
	 */
	(function(global, factory) {
	
	    /* AMD */ if ("function" === 'function' && __webpack_require__(232)["amd"])
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    /* CommonJS */ else if ("function" === 'function' && typeof module === "object" && module && module["exports"])
	        module["exports"] = factory();
	    /* Global */ else
	        (global["dcodeIO"] = global["dcodeIO"] || {})["bcrypt"] = factory();
	
	}(this, function() {
	    "use strict";
	
	    /**
	     * bcrypt namespace.
	     * @type {Object.<string,*>}
	     */
	    var bcrypt = {};
	
	    /**
	     * The random implementation to use as a fallback.
	     * @type {?function(number):!Array.<number>}
	     * @inner
	     */
	    var randomFallback = null;
	
	    /**
	     * Generates cryptographically secure random bytes.
	     * @function
	     * @param {number} len Bytes length
	     * @returns {!Array.<number>} Random bytes
	     * @throws {Error} If no random implementation is available
	     * @inner
	     */
	    function random(len) {
	        /* node */ if (typeof module !== 'undefined' && module && module['exports'])
	            try {
	                return __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"crypto\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))['randomBytes'](len);
	            } catch (e) {}
	        /* WCA */ try {
	            var a; (self['crypto']||self['msCrypto'])['getRandomValues'](a = new Uint32Array(len));
	            return Array.prototype.slice.call(a);
	        } catch (e) {}
	        /* fallback */ if (!randomFallback)
	            throw Error("Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative");
	        return randomFallback(len);
	    }
	
	    // Test if any secure randomness source is available
	    var randomAvailable = false;
	    try {
	        random(1);
	        randomAvailable = true;
	    } catch (e) {}
	
	    // Default fallback, if any
	    randomFallback = null;
	
	    /**
	     * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto
	     *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it
	     *  is seeded properly!
	     * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its
	     *  sole argument, returning the corresponding array of cryptographically secure random byte values.
	     * @see http://nodejs.org/api/crypto.html
	     * @see http://www.w3.org/TR/WebCryptoAPI/
	     */
	    bcrypt.setRandomFallback = function(random) {
	        randomFallback = random;
	    };
	
	    /**
	     * Synchronously generates a salt.
	     * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted
	     * @param {number=} seed_length Not supported.
	     * @returns {string} Resulting salt
	     * @throws {Error} If a random fallback is required but not set
	     * @expose
	     */
	    bcrypt.genSaltSync = function(rounds, seed_length) {
	        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;
	        if (typeof rounds !== 'number')
	            throw Error("Illegal arguments: "+(typeof rounds)+", "+(typeof seed_length));
	        if (rounds < 4)
	            rounds = 4;
	        else if (rounds > 31)
	            rounds = 31;
	        var salt = [];
	        salt.push("$2a$");
	        if (rounds < 10)
	            salt.push("0");
	        salt.push(rounds.toString());
	        salt.push('$');
	        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw
	        return salt.join('');
	    };
	
	    /**
	     * Asynchronously generates a salt.
	     * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted
	     * @param {(number|function(Error, string=))=} seed_length Not supported.
	     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt
	     * @expose
	     */
	    bcrypt.genSalt = function(rounds, seed_length, callback) {
	        if (typeof seed_length === 'function')
	            callback = seed_length,
	            seed_length = undefined; // Not supported.
	        if (typeof rounds === 'function')
	            callback = rounds,
	            rounds = GENSALT_DEFAULT_LOG2_ROUNDS;
	        if (typeof callback !== 'function')
	            throw Error("Illegal callback: "+typeof(callback));
	        if (typeof rounds !== 'number') {
	            nextTick(callback.bind(this, Error("Illegal arguments: "+(typeof rounds))));
	            return;
	        }
	        nextTick(function() { // Pretty thin, but salting is fast enough
	            try {
	                callback(null, bcrypt.genSaltSync(rounds));
	            } catch (err) {
	                callback(err);
	            }
	        });
	    };
	
	    /**
	     * Synchronously generates a hash for the given string.
	     * @param {string} s String to hash
	     * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10
	     * @returns {string} Resulting hash
	     * @expose
	     */
	    bcrypt.hashSync = function(s, salt) {
	        if (typeof salt === 'undefined')
	            salt = GENSALT_DEFAULT_LOG2_ROUNDS;
	        if (typeof salt === 'number')
	            salt = bcrypt.genSaltSync(salt);
	        if (typeof s !== 'string' || typeof salt !== 'string')
	            throw Error("Illegal arguments: "+(typeof s)+', '+(typeof salt));
	        return _hash(s, salt);
	    };
	
	    /**
	     * Asynchronously generates a hash for the given string.
	     * @param {string} s String to hash
	     * @param {number|string} salt Salt length to generate or salt to use
	     * @param {function(Error, string=)} callback Callback receiving the error, if any, and the resulting hash
	     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed
	     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.
	     * @expose
	     */
	    bcrypt.hash = function(s, salt, callback, progressCallback) {
	        if (typeof callback !== 'function')
	            throw Error("Illegal callback: "+typeof(callback));
	        if (typeof s === 'string' && typeof salt === 'number')
	            bcrypt.genSalt(salt, function(err, salt) {
	                _hash(s, salt, callback, progressCallback);
	            });
	        else if (typeof s === 'string' && typeof salt === 'string')
	            _hash(s, salt, callback, progressCallback);
	        else
	            nextTick(callback.bind(this, Error("Illegal arguments: "+(typeof s)+', '+(typeof salt))));
	    };
	
	    /**
	     * Compares two strings of the same length in constant time.
	     * @param {string} known Must be of the correct length
	     * @param {string} unknown Must be the same length as `known`
	     * @returns {boolean}
	     * @inner
	     */
	    function safeStringCompare(known, unknown) {
	        var right = 0,
	            wrong = 0;
	        for (var i=0, k=known.length; i<k; ++i) {
	            if (known.charCodeAt(i) === unknown.charCodeAt(i))
	                ++right;
	            else
	                ++wrong;
	        }
	        // Prevent removal of unused variables (never true, actually)
	        if (right < 0)
	            return false;
	        return wrong === 0;
	    }
	
	    /**
	     * Synchronously tests a string against a hash.
	     * @param {string} s String to compare
	     * @param {string} hash Hash to test against
	     * @returns {boolean} true if matching, otherwise false
	     * @throws {Error} If an argument is illegal
	     * @expose
	     */
	    bcrypt.compareSync = function(s, hash) {
	        if (typeof s !== "string" || typeof hash !== "string")
	            throw Error("Illegal arguments: "+(typeof s)+', '+(typeof hash));
	        if (hash.length !== 60)
	            return false;
	        return safeStringCompare(bcrypt.hashSync(s, hash.substr(0, hash.length-31)), hash);
	    };
	
	    /**
	     * Asynchronously compares the given data against the given hash.
	     * @param {string} s Data to compare
	     * @param {string} hash Data to be compared to
	     * @param {function(Error, boolean)} callback Callback receiving the error, if any, otherwise the result
	     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed
	     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.
	     * @throws {Error} If the callback argument is invalid
	     * @expose
	     */
	    bcrypt.compare = function(s, hash, callback, progressCallback) {
	        if (typeof callback !== 'function')
	            throw Error("Illegal callback: "+typeof(callback));
	        if (typeof s !== "string" || typeof hash !== "string") {
	            nextTick(callback.bind(this, Error("Illegal arguments: "+(typeof s)+', '+(typeof hash))));
	            return;
	        }
	        if (hash.length !== 60) {
	            nextTick(callback.bind(this, null, false));
	            return;
	        }
	        bcrypt.hash(s, hash.substr(0, 29), function(err, comp) {
	            if (err)
	                callback(err);
	            else
	                callback(null, safeStringCompare(comp, hash));
	        }, progressCallback);
	    };
	
	    /**
	     * Gets the number of rounds used to encrypt the specified hash.
	     * @param {string} hash Hash to extract the used number of rounds from
	     * @returns {number} Number of rounds used
	     * @throws {Error} If hash is not a string
	     * @expose
	     */
	    bcrypt.getRounds = function(hash) {
	        if (typeof hash !== "string")
	            throw Error("Illegal arguments: "+(typeof hash));
	        return parseInt(hash.split("$")[2], 10);
	    };
	
	    /**
	     * Gets the salt portion from a hash. Does not validate the hash.
	     * @param {string} hash Hash to extract the salt from
	     * @returns {string} Extracted salt part
	     * @throws {Error} If `hash` is not a string or otherwise invalid
	     * @expose
	     */
	    bcrypt.getSalt = function(hash) {
	        if (typeof hash !== 'string')
	            throw Error("Illegal arguments: "+(typeof hash));
	        if (hash.length !== 60)
	            throw Error("Illegal hash length: "+hash.length+" != 60");
	        return hash.substring(0, 29);
	    };
	
	    /**
	     * Continues with the callback on the next tick.
	     * @function
	     * @param {function(...[*])} callback Callback to execute
	     * @inner
	     */
	    var nextTick = typeof process !== 'undefined' && process && typeof process.nextTick === 'function'
	        ? (typeof setImmediate === 'function' ? setImmediate : process.nextTick)
	        : setTimeout;
	
	    /**
	     * Converts a JavaScript string to UTF8 bytes.
	     * @param {string} str String
	     * @returns {!Array.<number>} UTF8 bytes
	     * @inner
	     */
	    function stringToBytes(str) {
	        var out = [],
	            i = 0;
	        utfx.encodeUTF16toUTF8(function() {
	            if (i >= str.length) return null;
	            return str.charCodeAt(i++);
	        }, function(b) {
	            out.push(b);
	        });
	        return out;
	    }
	
	    // A base64 implementation for the bcrypt algorithm. This is partly non-standard.
	
	    /**
	     * bcrypt's own non-standard base64 dictionary.
	     * @type {!Array.<string>}
	     * @const
	     * @inner
	     **/
	    var BASE64_CODE = "./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split('');
	
	    /**
	     * @type {!Array.<number>}
	     * @const
	     * @inner
	     **/
	    var BASE64_INDEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
	        1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1,
	        -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	        20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30,
	        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	        48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];
	
	    /**
	     * @type {!function(...number):string}
	     * @inner
	     */
	    var stringFromCharCode = String.fromCharCode;
	
	    /**
	     * Encodes a byte array to base64 with up to len bytes of input.
	     * @param {!Array.<number>} b Byte array
	     * @param {number} len Maximum input length
	     * @returns {string}
	     * @inner
	     */
	    function base64_encode(b, len) {
	        var off = 0,
	            rs = [],
	            c1, c2;
	        if (len <= 0 || len > b.length)
	            throw Error("Illegal len: "+len);
	        while (off < len) {
	            c1 = b[off++] & 0xff;
	            rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);
	            c1 = (c1 & 0x03) << 4;
	            if (off >= len) {
	                rs.push(BASE64_CODE[c1 & 0x3f]);
	                break;
	            }
	            c2 = b[off++] & 0xff;
	            c1 |= (c2 >> 4) & 0x0f;
	            rs.push(BASE64_CODE[c1 & 0x3f]);
	            c1 = (c2 & 0x0f) << 2;
	            if (off >= len) {
	                rs.push(BASE64_CODE[c1 & 0x3f]);
	                break;
	            }
	            c2 = b[off++] & 0xff;
	            c1 |= (c2 >> 6) & 0x03;
	            rs.push(BASE64_CODE[c1 & 0x3f]);
	            rs.push(BASE64_CODE[c2 & 0x3f]);
	        }
	        return rs.join('');
	    }
	
	    /**
	     * Decodes a base64 encoded string to up to len bytes of output.
	     * @param {string} s String to decode
	     * @param {number} len Maximum output length
	     * @returns {!Array.<number>}
	     * @inner
	     */
	    function base64_decode(s, len) {
	        var off = 0,
	            slen = s.length,
	            olen = 0,
	            rs = [],
	            c1, c2, c3, c4, o, code;
	        if (len <= 0)
	            throw Error("Illegal len: "+len);
	        while (off < slen - 1 && olen < len) {
	            code = s.charCodeAt(off++);
	            c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
	            code = s.charCodeAt(off++);
	            c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
	            if (c1 == -1 || c2 == -1)
	                break;
	            o = (c1 << 2) >>> 0;
	            o |= (c2 & 0x30) >> 4;
	            rs.push(stringFromCharCode(o));
	            if (++olen >= len || off >= slen)
	                break;
	            code = s.charCodeAt(off++);
	            c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
	            if (c3 == -1)
	                break;
	            o = ((c2 & 0x0f) << 4) >>> 0;
	            o |= (c3 & 0x3c) >> 2;
	            rs.push(stringFromCharCode(o));
	            if (++olen >= len || off >= slen)
	                break;
	            code = s.charCodeAt(off++);
	            c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
	            o = ((c3 & 0x03) << 6) >>> 0;
	            o |= c4;
	            rs.push(stringFromCharCode(o));
	            ++olen;
	        }
	        var res = [];
	        for (off = 0; off<olen; off++)
	            res.push(rs[off].charCodeAt(0));
	        return res;
	    }
	
	    /**
	     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
	     * Released under the Apache License, Version 2.0
	     * see: https://github.com/dcodeIO/utfx for details
	     */
	    var utfx = function() {
	        "use strict";
	
	        /**
	         * utfx namespace.
	         * @inner
	         * @type {!Object.<string,*>}
	         */
	        var utfx = {};
	
	        /**
	         * Maximum valid code point.
	         * @type {number}
	         * @const
	         */
	        utfx.MAX_CODEPOINT = 0x10FFFF;
	
	        /**
	         * Encodes UTF8 code points to UTF8 bytes.
	         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	         *  respectively `null` if there are no more code points left or a single numeric code point.
	         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
	         */
	        utfx.encodeUTF8 = function(src, dst) {
	            var cp = null;
	            if (typeof src === 'number')
	                cp = src,
	                src = function() { return null; };
	            while (cp !== null || (cp = src()) !== null) {
	                if (cp < 0x80)
	                    dst(cp&0x7F);
	                else if (cp < 0x800)
	                    dst(((cp>>6)&0x1F)|0xC0),
	                    dst((cp&0x3F)|0x80);
	                else if (cp < 0x10000)
	                    dst(((cp>>12)&0x0F)|0xE0),
	                    dst(((cp>>6)&0x3F)|0x80),
	                    dst((cp&0x3F)|0x80);
	                else
	                    dst(((cp>>18)&0x07)|0xF0),
	                    dst(((cp>>12)&0x3F)|0x80),
	                    dst(((cp>>6)&0x3F)|0x80),
	                    dst((cp&0x3F)|0x80);
	                cp = null;
	            }
	        };
	
	        /**
	         * Decodes UTF8 bytes to UTF8 code points.
	         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	         *  are no more bytes left.
	         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
	         * @throws {RangeError} If a starting byte is invalid in UTF8
	         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
	         *  remaining bytes.
	         */
	        utfx.decodeUTF8 = function(src, dst) {
	            var a, b, c, d, fail = function(b) {
	                b = b.slice(0, b.indexOf(null));
	                var err = Error(b.toString());
	                err.name = "TruncatedError";
	                err['bytes'] = b;
	                throw err;
	            };
	            while ((a = src()) !== null) {
	                if ((a&0x80) === 0)
	                    dst(a);
	                else if ((a&0xE0) === 0xC0)
	                    ((b = src()) === null) && fail([a, b]),
	                    dst(((a&0x1F)<<6) | (b&0x3F));
	                else if ((a&0xF0) === 0xE0)
	                    ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),
	                    dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));
	                else if ((a&0xF8) === 0xF0)
	                    ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),
	                    dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));
	                else throw RangeError("Illegal starting byte: "+a);
	            }
	        };
	
	        /**
	         * Converts UTF16 characters to UTF8 code points.
	         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
	         *  `null` if there are no more characters left.
	         * @param {!function(number)} dst Code points destination as a function successively called with each converted code
	         *  point.
	         */
	        utfx.UTF16toUTF8 = function(src, dst) {
	            var c1, c2 = null;
	            while (true) {
	                if ((c1 = c2 !== null ? c2 : src()) === null)
	                    break;
	                if (c1 >= 0xD800 && c1 <= 0xDFFF) {
	                    if ((c2 = src()) !== null) {
	                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
	                            dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);
	                            c2 = null; continue;
	                        }
	                    }
	                }
	                dst(c1);
	            }
	            if (c2 !== null) dst(c2);
	        };
	
	        /**
	         * Converts UTF8 code points to UTF16 characters.
	         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	         *  respectively `null` if there are no more code points left or a single numeric code point.
	         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	         * @throws {RangeError} If a code point is out of range
	         */
	        utfx.UTF8toUTF16 = function(src, dst) {
	            var cp = null;
	            if (typeof src === 'number')
	                cp = src, src = function() { return null; };
	            while (cp !== null || (cp = src()) !== null) {
	                if (cp <= 0xFFFF)
	                    dst(cp);
	                else
	                    cp -= 0x10000,
	                    dst((cp>>10)+0xD800),
	                    dst((cp%0x400)+0xDC00);
	                cp = null;
	            }
	        };
	
	        /**
	         * Converts and encodes UTF16 characters to UTF8 bytes.
	         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
	         *  if there are no more characters left.
	         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
	         */
	        utfx.encodeUTF16toUTF8 = function(src, dst) {
	            utfx.UTF16toUTF8(src, function(cp) {
	                utfx.encodeUTF8(cp, dst);
	            });
	        };
	
	        /**
	         * Decodes and converts UTF8 bytes to UTF16 characters.
	         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	         *  are no more bytes left.
	         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	         * @throws {RangeError} If a starting byte is invalid in UTF8
	         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
	         */
	        utfx.decodeUTF8toUTF16 = function(src, dst) {
	            utfx.decodeUTF8(src, function(cp) {
	                utfx.UTF8toUTF16(cp, dst);
	            });
	        };
	
	        /**
	         * Calculates the byte length of an UTF8 code point.
	         * @param {number} cp UTF8 code point
	         * @returns {number} Byte length
	         */
	        utfx.calculateCodePoint = function(cp) {
	            return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
	        };
	
	        /**
	         * Calculates the number of UTF8 bytes required to store UTF8 code points.
	         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
	         *  `null` if there are no more code points left.
	         * @returns {number} The number of UTF8 bytes required
	         */
	        utfx.calculateUTF8 = function(src) {
	            var cp, l=0;
	            while ((cp = src()) !== null)
	                l += utfx.calculateCodePoint(cp);
	            return l;
	        };
	
	        /**
	         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
	         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
	         *  `null` if there are no more characters left.
	         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
	         */
	        utfx.calculateUTF16asUTF8 = function(src) {
	            var n=0, l=0;
	            utfx.UTF16toUTF8(src, function(cp) {
	                ++n; l += utfx.calculateCodePoint(cp);
	            });
	            return [n,l];
	        };
	
	        return utfx;
	    }();
	
	    Date.now = Date.now || function() { return +new Date; };
	
	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var BCRYPT_SALT_LEN = 16;
	
	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var GENSALT_DEFAULT_LOG2_ROUNDS = 10;
	
	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var BLOWFISH_NUM_ROUNDS = 16;
	
	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var MAX_EXECUTION_TIME = 100;
	
	    /**
	     * @type {Array.<number>}
	     * @const
	     * @inner
	     */
	    var P_ORIG = [
	        0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822,
	        0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,
	        0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,
	        0xb5470917, 0x9216d5d9, 0x8979fb1b
	    ];
	
	    /**
	     * @type {Array.<number>}
	     * @const
	     * @inner
	     */
	    var S_ORIG = [
	        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,
	        0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,
	        0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,
	        0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,
	        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,
	        0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,
	        0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,
	        0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
	        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,
	        0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,
	        0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,
	        0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
	        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,
	        0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,
	        0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,
	        0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
	        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,
	        0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,
	        0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,
	        0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,
	        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,
	        0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b,
	        0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,
	        0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
	        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,
	        0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,
	        0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,
	        0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,
	        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,
	        0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,
	        0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,
	        0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
	        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,
	        0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,
	        0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,
	        0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
	        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,
	        0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,
	        0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,
	        0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
	        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,
	        0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,
	        0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,
	        0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,
	        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b,
	        0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f,
	        0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968,
	        0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
	        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5,
	        0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,
	        0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799,
	        0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,
	        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71,
	        0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,
	        0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6,
	        0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
	        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f,
	        0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286,
	        0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec,
	        0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,
	        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9,
	        0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,
	        0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e,
	        0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,
	        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290,
	        0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,
	        0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6,
	        0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,
	        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847,
	        0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451,
	        0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6,
	        0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
	        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570,
	        0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,
	        0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978,
	        0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,
	        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708,
	        0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,
	        0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185,
	        0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
	        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830,
	        0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239,
	        0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab,
	        0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,
	        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19,
	        0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,
	        0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1,
	        0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,
	        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef,
	        0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,
	        0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15,
	        0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,
	        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2,
	        0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492,
	        0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174,
	        0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
	        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759,
	        0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,
	        0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc,
	        0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,
	        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465,
	        0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,
	        0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c,
	        0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,
	        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e,
	        0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,
	        0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0,
	        0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,
	        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462,
	        0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,
	        0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399,
	        0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
	        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74,
	        0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,
	        0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7,
	        0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,
	        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802,
	        0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,
	        0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4,
	        0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,
	        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2,
	        0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,
	        0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c,
	        0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,
	        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341,
	        0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,
	        0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b,
	        0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,
	        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88,
	        0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,
	        0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc,
	        0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,
	        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659,
	        0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,
	        0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8,
	        0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
	        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be,
	        0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,
	        0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255,
	        0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,
	        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1,
	        0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,
	        0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025,
	        0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,
	        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01,
	        0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,
	        0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa,
	        0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,
	        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409,
	        0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,
	        0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3,
	        0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,
	        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234,
	        0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf,
	        0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,
	        0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
	        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f,
	        0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,
	        0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8,
	        0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,
	        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba,
	        0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,
	        0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69,
	        0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,
	        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,
	        0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b,
	        0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd,
	        0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
	        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4,
	        0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,
	        0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb,
	        0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,
	        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751,
	        0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,
	        0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,
	        0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,
	        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd,
	        0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45,
	        0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae,
	        0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
	        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08,
	        0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,
	        0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b,
	        0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,
	        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,
	        0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,
	        0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c,
	        0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,
	        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361,
	        0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,
	        0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be,
	        0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
	        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d,
	        0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,
	        0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,
	        0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,
	        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292,
	        0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,
	        0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2,
	        0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,
	        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c,
	        0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8,
	        0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4,
	        0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
	        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6
	    ];
	
	    /**
	     * @type {Array.<number>}
	     * @const
	     * @inner
	     */
	    var C_ORIG = [
	        0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944,
	        0x6f756274
	    ];
	
	    /**
	     * @param {Array.<number>} lr
	     * @param {number} off
	     * @param {Array.<number>} P
	     * @param {Array.<number>} S
	     * @returns {Array.<number>}
	     * @inner
	     */
	    function _encipher(lr, off, P, S) { // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt
	        var n,
	            l = lr[off],
	            r = lr[off + 1];
	
	        l ^= P[0];
	        for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)
	            // Feistel substitution on left word
	            n  = S[(l >> 24) & 0xff],
	            n += S[0x100 | ((l >> 16) & 0xff)],
	            n ^= S[0x200 | ((l >> 8) & 0xff)],
	            n += S[0x300 | (l & 0xff)],
	            r ^= n ^ P[++i],
	            // Feistel substitution on right word
	            n  = S[(r >> 24) & 0xff],
	            n += S[0x100 | ((r >> 16) & 0xff)],
	            n ^= S[0x200 | ((r >> 8) & 0xff)],
	            n += S[0x300 | (r & 0xff)],
	            l ^= n ^ P[++i];
	        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];
	        lr[off + 1] = l;
	        return lr;
	    }
	
	    /**
	     * @param {Array.<number>} data
	     * @param {number} offp
	     * @returns {{key: number, offp: number}}
	     * @inner
	     */
	    function _streamtoword(data, offp) {
	        for (var i = 0, word = 0; i < 4; ++i)
	            word = (word << 8) | (data[offp] & 0xff),
	            offp = (offp + 1) % data.length;
	        return { key: word, offp: offp };
	    }
	
	    /**
	     * @param {Array.<number>} key
	     * @param {Array.<number>} P
	     * @param {Array.<number>} S
	     * @inner
	     */
	    function _key(key, P, S) {
	        var offset = 0,
	            lr = [0, 0],
	            plen = P.length,
	            slen = S.length,
	            sw;
	        for (var i = 0; i < plen; i++)
	            sw = _streamtoword(key, offset),
	            offset = sw.offp,
	            P[i] = P[i] ^ sw.key;
	        for (i = 0; i < plen; i += 2)
	            lr = _encipher(lr, 0, P, S),
	            P[i] = lr[0],
	            P[i + 1] = lr[1];
	        for (i = 0; i < slen; i += 2)
	            lr = _encipher(lr, 0, P, S),
	            S[i] = lr[0],
	            S[i + 1] = lr[1];
	    }
	
	    /**
	     * Expensive key schedule Blowfish.
	     * @param {Array.<number>} data
	     * @param {Array.<number>} key
	     * @param {Array.<number>} P
	     * @param {Array.<number>} S
	     * @inner
	     */
	    function _ekskey(data, key, P, S) {
	        var offp = 0,
	            lr = [0, 0],
	            plen = P.length,
	            slen = S.length,
	            sw;
	        for (var i = 0; i < plen; i++)
	            sw = _streamtoword(key, offp),
	            offp = sw.offp,
	            P[i] = P[i] ^ sw.key;
	        offp = 0;
	        for (i = 0; i < plen; i += 2)
	            sw = _streamtoword(data, offp),
	            offp = sw.offp,
	            lr[0] ^= sw.key,
	            sw = _streamtoword(data, offp),
	            offp = sw.offp,
	            lr[1] ^= sw.key,
	            lr = _encipher(lr, 0, P, S),
	            P[i] = lr[0],
	            P[i + 1] = lr[1];
	        for (i = 0; i < slen; i += 2)
	            sw = _streamtoword(data, offp),
	            offp = sw.offp,
	            lr[0] ^= sw.key,
	            sw = _streamtoword(data, offp),
	            offp = sw.offp,
	            lr[1] ^= sw.key,
	            lr = _encipher(lr, 0, P, S),
	            S[i] = lr[0],
	            S[i + 1] = lr[1];
	    }
	
	    /**
	     * Internaly crypts a string.
	     * @param {Array.<number>} b Bytes to crypt
	     * @param {Array.<number>} salt Salt bytes to use
	     * @param {number} rounds Number of rounds
	     * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If
	     *  omitted, the operation will be performed synchronously.
	     *  @param {function(number)=} progressCallback Callback called with the current progress
	     * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`
	     * @inner
	     */
	    function _crypt(b, salt, rounds, callback, progressCallback) {
	        var cdata = C_ORIG.slice(),
	            clen = cdata.length,
	            err;
	
	        // Validate
	        if (rounds < 4 || rounds > 31) {
	            err = Error("Illegal number of rounds (4-31): "+rounds);
	            if (callback) {
	                nextTick(callback.bind(this, err));
	                return;
	            } else
	                throw err;
	        }
	        if (salt.length !== BCRYPT_SALT_LEN) {
	            err =Error("Illegal salt length: "+salt.length+" != "+BCRYPT_SALT_LEN);
	            if (callback) {
	                nextTick(callback.bind(this, err));
	                return;
	            } else
	                throw err;
	        }
	        rounds = (1 << rounds) >>> 0;
	        var P = P_ORIG.slice(),
	            S = S_ORIG.slice(),
	            i = 0, j;
	        _ekskey(salt, b, P, S);
	
	        /**
	         * Calcualtes the next round.
	         * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`
	         * @inner
	         */
	        function next() {
	            if (progressCallback)
	                progressCallback(i / rounds);
	            if (i < rounds) {
	                var start = Date.now();
	                for (; i < rounds;) {
	                    i = i + 1;
	                    _key(b, P, S);
	                    _key(salt, P, S);
	                    if (Date.now() - start > MAX_EXECUTION_TIME)
	                        break;
	                }
	            } else {
	                for (i = 0; i < 64; i++)
	                    for (j = 0; j < (clen >> 1); j++)
	                        _encipher(cdata, j << 1, P, S);
	                var ret = [];
	                for (i = 0; i < clen; i++)
	                    ret.push(((cdata[i] >> 24) & 0xff) >>> 0),
	                    ret.push(((cdata[i] >> 16) & 0xff) >>> 0),
	                    ret.push(((cdata[i] >> 8) & 0xff) >>> 0),
	                    ret.push((cdata[i] & 0xff) >>> 0);
	                if (callback) {
	                    callback(null, ret);
	                    return;
	                } else
	                    return ret;
	            }
	            if (callback)
	                nextTick(next);
	        }
	
	        // Async
	        if (typeof callback !== 'undefined') {
	            next();
	
	            // Sync
	        } else {
	            var res;
	            while (true)
	                if (typeof(res = next()) !== 'undefined')
	                    return res || [];
	        }
	    }
	
	    /**
	     * Internally hashes a string.
	     * @param {string} s String to hash
	     * @param {?string} salt Salt to use, actually never null
	     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,
	     *  hashing is perormed synchronously.
	     *  @param {function(number)=} progressCallback Callback called with the current progress
	     * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`
	     * @inner
	     */
	    function _hash(s, salt, callback, progressCallback) {
	        var err;
	        if (typeof s !== 'string' || typeof salt !== 'string') {
	            err = Error("Invalid string / salt: Not a string");
	            if (callback) {
	                nextTick(callback.bind(this, err));
	                return;
	            }
	            else
	                throw err;
	        }
	
	        // Validate the salt
	        var minor, offset;
	        if (salt.charAt(0) !== '$' || salt.charAt(1) !== '2') {
	            err = Error("Invalid salt version: "+salt.substring(0,2));
	            if (callback) {
	                nextTick(callback.bind(this, err));
	                return;
	            }
	            else
	                throw err;
	        }
	        if (salt.charAt(2) === '$')
	            minor = String.fromCharCode(0),
	            offset = 3;
	        else {
	            minor = salt.charAt(2);
	            if ((minor !== 'a' && minor !== 'b' && minor !== 'y') || salt.charAt(3) !== '$') {
	                err = Error("Invalid salt revision: "+salt.substring(2,4));
	                if (callback) {
	                    nextTick(callback.bind(this, err));
	                    return;
	                } else
	                    throw err;
	            }
	            offset = 4;
	        }
	
	        // Extract number of rounds
	        if (salt.charAt(offset + 2) > '$') {
	            err = Error("Missing salt rounds");
	            if (callback) {
	                nextTick(callback.bind(this, err));
	                return;
	            } else
	                throw err;
	        }
	        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,
	            r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),
	            rounds = r1 + r2,
	            real_salt = salt.substring(offset + 3, offset + 25);
	        s += minor >= 'a' ? "\x00" : "";
	
	        var passwordb = stringToBytes(s),
	            saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);
	
	        /**
	         * Finishes hashing.
	         * @param {Array.<number>} bytes Byte array
	         * @returns {string}
	         * @inner
	         */
	        function finish(bytes) {
	            var res = [];
	            res.push("$2");
	            if (minor >= 'a')
	                res.push(minor);
	            res.push("$");
	            if (rounds < 10)
	                res.push("0");
	            res.push(rounds.toString());
	            res.push("$");
	            res.push(base64_encode(saltb, saltb.length));
	            res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));
	            return res.join('');
	        }
	
	        // Sync
	        if (typeof callback == 'undefined')
	            return finish(_crypt(passwordb, saltb, rounds));
	
	        // Async
	        else {
	            _crypt(passwordb, saltb, rounds, function(err, bytes) {
	                if (err)
	                    callback(err, null);
	                else
	                    callback(null, finish(bytes));
	            }, progressCallback);
	        }
	    }
	
	    /**
	     * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.
	     * @function
	     * @param {!Array.<number>} b Byte array
	     * @param {number} len Maximum input length
	     * @returns {string}
	     * @expose
	     */
	    bcrypt.encodeBase64 = base64_encode;
	
	    /**
	     * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.
	     * @function
	     * @param {string} s String to decode
	     * @param {number} len Maximum output length
	     * @returns {!Array.<number>}
	     * @expose
	     */
	    bcrypt.decodeBase64 = base64_decode;
	
	    return bcrypt;
	}));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204)(module), __webpack_require__(2), __webpack_require__(198).setImmediate))

/***/ },
/* 232 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map